{
    "logs": [
        {
            "idx": 914,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n",
                                "11 - 5 = 6 (left: 1 6 10)\n",
                                "10 - 1 = 9 (left: 5 9 11)\n",
                                "11 - 1 = 10 (left: 5 10 10)\n",
                                "5 * 5 = 25 (left: 25 10)\n",
                                "10 + 10 = 20 (left: 20 11)\n",
                                "20 - 11 = 9 (left: 9 10)\n",
                                "25 - 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "25 - 1 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "25 - 1 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n"
                            ],
                            "new_ys": [
                                "25 - 1 = 24 (left: 24)\nAnswer: 25 - 1 = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 * 1 = 1 (left: 1 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 - 1 = 4 (left: 1 4)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 / 1 = 5 (left: 1 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 5 = 6 (left: 6)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 * 5 = 5 (left: 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 - 1 = 4 (left: 4)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 / 1 = 5 (left: 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "25 - 1 = 24 (left: 24)\nAnswer: 25 - 1 = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "25 - 1 = 24 (left: 24)\nAnswer: 25 - 1 = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n"
                            ],
                            "new_ys": [
                                "25 - 1 = 24 (left: 24)\nAnswer: 25 - 1 = 24\n25 - 1 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n2 + 2 = 4 (left: 4)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n8 - 4 = 4 (left: 4)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n4 + 4 = 8 (left: 8)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n8 / 8 = 1 (left: 1)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n1 * 24 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n1 * 24 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n8 - 4 = 4 (left: 4)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n1 * 24 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n8 - 4 = 4 (left: 4)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n1 * 24 = 24 (left: 24)\nAnswer: (11 - 10) + (5 * 1) = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n8 - 4 = 4 (left: 4)\n4\n"
                            ],
                            "values": [
                                0.002,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n1 * 24 = 24 (left: 24)\nAnswer: (11 - 10) + (5 * 1) = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n8 - 4 = 4 (left: 4)\n4\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n",
                                "11 - 5 = 6 (left: 1 6 10)\n",
                                "10 - 1 = 9 (left: 9 5 11)\n",
                                "5 * 1 = 5 (left: 5 10 11)\n",
                                "11 - 1 = 10 (left: 10 5 1)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 - 1 = 4 (left: 1 4)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 * 1 = 5 (left: 1 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 + 1 = 6 (left: 1 6)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 / 1 = 5 (left: 1 5)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n11 - 5 = 6 (left: 1 6)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n11 - 1 = 10 (left: 5 10)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n5 * 5 = 25 (left: 25 11)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n10 + 11 = 21 (left: 5 21)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n6 + 5 = 11 (left: 1 11)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002
                            ],
                            "select_new_ys": [
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n"
                            ],
                            "new_ys": [
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n11 - 11 = 0 (left: 0)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n11 + 13 = 24 (left: 13)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n11 * 2 = 22 (left: 2)\n",
                                "10 - 5 = 5 (left: 1 11 5)\n25 - 1 = 24 (left: 11)\n11 + 13 - 0 = 24 (left: 0)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 * 24 = 0 (left: 5 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 - 24 = -24 (left: 5 - 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 / 24 = 0 (left: 5 0)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n5 + 19 = 24 (left: 19)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n5 * 4.8 = 24 (left: 4.8)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n5 / 5 = 1 (left: 1 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n5 - 4 = 1 (left: 1 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                1.002,
                                0.003,
                                1.002,
                                0.003,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 * 24 = 0 (left: 5 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 * 24 = 0 (left: 5 24)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\nAnswer: (11 - 10) * (5 + 1) = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 * 24 = 0 (left: 5 24)\n24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\nAnswer: (11 - 10) * (5 + 1) = 24\n",
                                "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 * 24 = 0 (left: 5 24)\n24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "Use subtraction to reduce larger numbers: for example, 11 - 10 = 1, leaving 1, 5, and 1. Focus on combining these remaining numbers with addition or multiplication to reach 24. Prioritize operations that generate intermediate values close to 24, then adjust accordingly.",
                    "value_summary": "Avoid moves leading to repeated or impossible reduced number sets."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n",
                                "11 - 1 = 10 (left: 10 5 1)\n",
                                "10 - 1 = 9 (left: 9 5 11)\n",
                                "5 + 11 = 16 (left: 16 10 1)\n",
                                "5 * 5 = 25 (left: 25 10 1)\n",
                                "11 - 1 = 10 (left: 10 5 1)\n"
                            ],
                            "values": [
                                20.002,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n",
                                "5 * 5 = 25 (left: 25 10 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n",
                                "5 * 5 = 25 (left: 25 10 1)\n"
                            ],
                            "new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 - 1 = 4 (left: 4 5)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 / 5 = 1 (left: 1 4)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n4 * 6 = 24 (left: 24)\n",
                                "5 * 5 = 25 (left: 25 10 1)\n25 - 1 = 24 (left: 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                3.0
                            ],
                            "select_new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n4 * 6 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2 6)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n6 / 2 = 3 (left: 3 4)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 + 6 = 10 (left: 10)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 + 2 = 6 (left: 6)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n6 - 4 = 2 (left: 2)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n6 / 2 = 3 (left: 3)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 5) * (11 - 1) = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                3.0,
                                60.0,
                                21.001,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 + 2 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 + 2 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 5) * (5 + 1) = 24\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 + 2 = 6 (left: 6)\n6 * 4 = 24 (left: 6)\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 5) * (5 + 1) = 24\n",
                                "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 + 2 = 6 (left: 6)\n6 * 4 = 24 (left: 6)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize subtracting larger numbers to reduce the set, such as 11 - 10 = 1. Use remaining 5 and 1 to reach 24 via multiplication or addition (e.g., 5 \u00d7 5 \u2013 1 = 24). Avoid dead ends; focus on combinations that produce intermediate targets close to 24 to efficiently solve the puzzle.",
                    "value_summary": "Avoid steps generating impossible or repeated reduced number sets."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n",
                                "10 - 5 = 5 (left: 11 5 1)\n",
                                "10 - 1 = 9 (left: 11 5 9)\n",
                                "11 - 1 = 10 (left: 10 5 1)\n",
                                "5 + 1 = 6 (left: 11 6)\n",
                                "5 - 1 = 4 (left: 11 4)\n",
                                "10 / 5 = 2 (left: 11 2)\n",
                                "11 - 2 = 9 (left: 9 5)\n",
                                "11 - 4 = 7 (left: 7 10)\n"
                            ],
                            "values": [
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n10 - 6 = 4 (left: 1 4)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n11 - 10 = 1 (left: 1 1)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 * 1 = 5 (left: 5 1)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n11 - 1 = 10 (left: 10)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n10 / 5 = 2 (left: 2 1)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n10 - 1 = 9 (left: 9)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n10 - 5 = 5 (left: 5 1)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 - 1 = 4 (left: 1 4)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n11 - 10 = 1 (left: 1 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n10 - 11 = -1 (left: 1 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 + 1 = 6 (left: 6 10)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 * 1 = 5 (left: 5 10)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n10 / 5 = 2 (left: 2 11)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n11 - 10 = 1 (left: 1 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n10 - 1 = 9 (left: 9 5)\n",
                                "11 - 10 = 1 (left: 1 5 1)\n5 * 5 - 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n5 * 5 - 1 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n5 * 5 - 1 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n5 * 5 - 1 = 24 (left: 24)\nAnswer: 5 * 5 - (11 - 10) = 24\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 + 6 = 12 (left: 12)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 + 18 = 24 (left: 18)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 + 18 = 24 (left: 18)\n"
                            ],
                            "values": [
                                0.003,
                                1.002,
                                2.001,
                                1.002,
                                3.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n4 + 20 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n4 * 6 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n10 + 14 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n12 + 12 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n5 * 5 - 1 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n```\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n4 (no operations possible with a single number)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n4 + 20 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n4 * 6 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "Focus on reducing 11 and 10 early, such as subtracting 10 from 11 to get 1. Use the remaining 5 and 1 to reach 24 via multiplication or addition (e.g., 5 \u00d7 5 \u2013 1 = 24). Avoid dead ends by targeting intermediate totals near 24; combining large subtractions and strategic multiplications is key to efficiently solving for 24.",
                    "value_summary": "Prioritize steps that produce valid, original-number sets; avoid moves leading to impossible or repeated combinations. Valid progress maintains original numbers and avoids invalid operations, guiding toward achievable solutions without redundancy or impossibility."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5)\n",
                                "5 * 1 = 5 (left: 1 11)\n",
                                "11 - 1 = 10 (left: 5 10)\n",
                                "10 + 1 = 11 (left: 5 11)\n",
                                "5 * 11 = 55 (left: 10)\n",
                                "55 / 5 = 11 (left: 10)\n",
                                "10 + 11 = 21 (left: 5)\n",
                                "5 * 5 = 25 (left: 10)\n",
                                "25 - 1 = 24 (left: 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                2.001,
                                1.002,
                                3.0,
                                2.001,
                                1.002
                            ],
                            "select_new_ys": [
                                "10 + 11 = 21 (left: 5)\n",
                                "5 * 11 = 55 (left: 10)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 + 11 = 21 (left: 5)\n",
                                "5 * 11 = 55 (left: 10)\n"
                            ],
                            "new_ys": [
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n",
                                "5 * 11 = 55 (left: 10)\n10 + 14 = 24 (left: )\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n"
                            ],
                            "values": [
                                0.003,
                                0.0,
                                2.001
                            ],
                            "select_new_ys": [
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n",
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n",
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n"
                            ],
                            "new_ys": [
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n4 * 6 = 24 (left: )\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n12 * 2 = 24 (left: )\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n48 / 2 = 24 (left: )\n",
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                22.0
                            ],
                            "select_new_ys": [
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: 5 * 5 - 1 = 24\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n10 - 5 = 5 (left: 11 1 5)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n11 - 10 = 1 (left: 1 5)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n5 * 1 = 5 (left: 11 5)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n11 - 5 = 6 (left: 10 6)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n10 - 6 = 4 (left: 4 11)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n11 - 4 = 7 (left: 10 7)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n10 - 7 = 3 (left: 3 11)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n11 - 3 = 8 (left: 10 8)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n10 - 8 = 2 (left: 2 11)\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n11 - 2 = 9 (left: 10 9)\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: 5 * 5 - 1 = 24\n",
                                "5 * 11 = 55 (left: 10)\n10 * 2.4 = 24 (left: 2.4)\n2 + 22 = 24 (left: )\n10 - 5 = 5 (left: 11 1 5)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 5, 10, 11, avoid initial operations that produce dead ends like subtracting or adding 5 and 11, which lead to unreachable totals. Instead, prioritize reducing 11 early by subtracting 10 to get 1, then use remaining numbers for multiplication or addition to reach 24. For example, after 11 - 10 = 1, combine 5 and 1 via multiplication (e.g., 5 \u00d7 1 = 5), then add 19 (which can be formed from remaining numbers) to reach 24. Focusing on strategic reductions and leveraging multiplications with small numbers enhances the chances of efficiently reaching 24.",
                    "value_summary": "Favor valid, achievable intermediate sets; avoid impossible or redundant operations reducing solution viability."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 1 5)\n",
                                "11 - 5 = 6 (left: 6 10 1)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n",
                                "5 * 1 = 5 (left: 11 5)\n",
                                "5 * 1 = 5 (left: 11 5)\n",
                                "11 - 10 = 1 (left: 1 1 5)\n",
                                "1 + 1 = 2 (left: 2 5)\n",
                                "2 * 12 = 24 (assuming 12 is derived, for example by 6 * 2 or other steps)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n",
                                "11 - 10 = 1 (left: 1 1 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n",
                                "11 - 10 = 1 (left: 1 1 5)\n"
                            ],
                            "new_ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n",
                                "11 - 10 = 1 (left: 1 1 5)\n11 - 10 = 1 (left: 1 5)  \n",
                                "11 - 10 = 1 (left: 1 1 5)\n5 * 1 = 5 (left: 1 5)  \n",
                                "11 - 10 = 1 (left: 1 1 5)\n1 + 1 = 2 (left: 2 5)  \n",
                                "11 - 10 = 1 (left: 1 1 5)\n5 * 2 = 10 (left: 10)  \n",
                                "11 - 10 = 1 (left: 1 1 5)\n10 * 2.4 = 24 (left: 24) \n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 1 5)\n10 * 2.4 = 24 (left: 24) \n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 1 5)\n10 * 2.4 = 24 (left: 24) \n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 1 5)\n10 * 2.4 = 24 (left: 24) \nAnswer: (11 - 10) * 5 * 1 = 24\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n1 * 11 = 11 (left: 1 11)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n11 - 10 = 1 (left: 1 1)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n5 * 1 = 5 (left: 5)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n5 + 1 = 6 (left: 6)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n6 * 4 = 24 (left: 24)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n3 * 8 = 24 (left: 24)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n2 * 12 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n6 * 4 = 24 (left: 24)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n3 * 8 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n6 * 4 = 24 (left: 24)\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 10) * (5 + 1) = 24\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n3 * 8 = 24 (left: 24)\nAnswer: (11 - 10) * (5 * 2) = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 10) * (5 + 1) = 24\n",
                                "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n3 * 8 = 24 (left: 24)\nAnswer: (11 - 10) * (5 * 2) = 24\n"
                            ]
                        }
                    ],
                    "summary": "Focus on reducing larger numbers early, especially 11, by subtracting 10 to get 1, which simplifies combinations. Avoid using 5 and 11 together in addition or subtraction that don't progress toward 24, as these often lead to dead ends. Instead, consider multiplying small numbers like 5 by 1 (formed by subtracting 10 from 11) to create larger values. Use remaining operations to combine these results toward 24, prioritizing multiplication and strategic subtraction. For example, after obtaining 1, multiply 5 \u00d7 1 = 5, then add or multiply with other results to reach 24. Leveraging early reductions and small number manipulations enhances the chances of efficiently hitting 24.",
                    "value_summary": "Prioritize achievable, avoid impossible or redundant."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n",
                                "5 * 1 = 5 (left: 1 5)  \n",
                                "10 - 5 = 5 (left: 1 5)  \n",
                                "1 + 5 = 6 (left: 6)  \n",
                                "6 * 4 = 24 (left: )  \n",
                                "(Alternatively, from 1 and 5, create 4: 5 - 1 = 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n",
                                "5 * 1 = 5 (left: 1 5)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5)  \n",
                                "5 * 1 = 5 (left: 1 5)  \n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n",
                                "5 * 1 = 5 (left: 1 5)  \n5 - 1 = 4 (left: 4)\n",
                                "5 * 1 = 5 (left: 1 5)  \n5 * 1 = 5 (left: 5)\n",
                                "5 * 1 = 5 (left: 1 5)  \n5 / 1 = 5 (left: 5)\n"
                            ],
                            "values": [
                                1.002,
                                1.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\n"
                            ],
                            "values": [
                                0.002,
                                0.001
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n6 + 18 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n12 * 2 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n8 * 3 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n48 / 2 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n36 / 1.5 = 24 (left: )\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\n6 * 4 = 24 (left: )\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\n12 * 2 = 24 (left: )\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\n8 * 3 = 24 (left: )\n",
                                "5 * 1 = 5 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no operations possible with a single number)\nNote: These are based on possible intermediate steps assuming the initial numbers are 6, 12, 8, 3, or their combinations.\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n6 + 18 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n12 * 2 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "Reduce 11 by subtracting 10 to get 1. Use 5 \u00d7 1 = 5, then multiply 5 \u00d7 2 (from 10 \u00f7 5) to reach 10, but avoid dead ends. Instead, subtract 11 \u2013 (10 \u2013 5) = 6, then combine with remaining numbers to reach 24, focusing on strategic reductions and multiplications.",
                    "value_summary": "Avoid impossible or redundant remaining states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 5 1)\n",
                                "10 - 11 = -1 (left: 1 5 -1)\n",
                                "5 * 10 = 50 (left: 50 11)\n",
                                "50 - (11 + 1) = 38 (left: 38)\n",
                                "50 - 11 = 39 (left: 39 1)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n",
                                "12 * 2 = 24 (left: 24)\n",
                                "10 + 11 = 21 (left: 21 1 5)\n",
                                "5 * 11 = 55 (left: 55 10)\n",
                                "55 - (11 + 10) = 34 (left: 34)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                40.001,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n",
                                "12 * 2 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n",
                                "12 * 2 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 10 = 2 (left: 2 5)  \n",
                                "11 + 1 = 12 (left: 12 5 10)\n10 / 5 = 2 (left: 2 12)  \n",
                                "11 + 1 = 12 (left: 12 5 10)\n10 - 5 = 5 (left: 5 12)\n",
                                "12 * 2 = 24 (left: 24)\nAnswer: (12 * 2) = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n10 / 5 = 2 (left: 2 12)  \n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n10 / 5 = 2 (left: 2 12)  \n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n"
                            ],
                            "new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n10 / 5 = 2 (left: 2 12)  \n12 - 8 = 4 (left: 4 2)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n10 / 5 = 2 (left: 2 12)  \n12 / 2 = 6 (left: 6 8)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n10 / 5 = 2 (left: 2 12)  \n12 - 2 = 10 (left: 10 8)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n10 - 7 = 3 (left: 3 17)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n10 / 5 = 2 (left: 2 7)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 17 = 24 (left: 24)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n10 + 14 = 24 (left: 24)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n15 + 9 = 24 (left: 24)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n12 * 2 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                41.0,
                                40.001,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n15 + 9 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n15 + 9 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n17 - 7 = 10 (left: 10 17)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n17 - 10 = 7 (left: 7 17)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n10 * 2.4 = 24 (left: 24 7)\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n15 + 9 = 24 (left: 24)\nAnswer: (11 + 1) * (10 - 5) = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n15 + 9 = 24 (left: 24)\nAnswer: (11 + 1) * (10 - 5) = 24\n",
                                "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n7 + 10 = 17 (left: 7 17)\n17 - 7 = 10 (left: 10 17)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 5, 10, 11, avoid invalid moves like directly subtracting 10 from 11. Instead, use operations that combine these numbers toward 24 efficiently. Focus on multiplying 5 and 10 to get 50, then subtract 26 (e.g., 50 \u2013 (11 + 1)) to reach 24. Alternatively, subtract 1 from 11 to get 10, then multiply 5 by 2 (from 10 \u00f7 5) to reach 10, and finally multiply 5 \u00d7 4 (from 10 \u2013 6) to get 20, then add 4. Prioritize combining 10 and 5 for intermediate steps, avoiding dead-end subtractions that don't lead to 24.",
                    "value_summary": "Avoid impossible, redundant states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 1 = 10 (left: 10 5)\n",
                                "5 * 10 = 50 (left: 50 11)\n",
                                "11 - 1 = 10 (left: 10 5)\n",
                                "50 / 2 = 25 (left: 25 11)\n",
                                "50 - 26 = 24 (left: 24 11)\n",
                                "11 + 1 = 12 (left: 12 10)\n",
                                "10 - 2 = 8 (left: 8 11)\n",
                                "11 - 8 = 3 (left: 3 10)\n",
                                "10 / 5 = 2 (left: 2 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                20.002,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n",
                                "11 + 1 = 12 (left: 12 10)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "50 - 26 = 24 (left: 24 11)\n",
                                "11 + 1 = 12 (left: 12 10)\n"
                            ],
                            "new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n11 - 1 = 10 (left: 10)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n",
                                "50 - 26 = 24 (left: 24 11)\n50 - (11 + 1) = 24 (left: 24)\n",
                                "11 + 1 = 12 (left: 12 10)\n12 - 10 = 2 (left: 2)\n",
                                "11 + 1 = 12 (left: 12 10)\n12 / 10 = 1.2 (left: 1.2)\n",
                                "11 + 1 = 12 (left: 12 10)\n10 - 12 = -2 (left: -2)\n",
                                "11 + 1 = 12 (left: 12 10)\n10 / 12 \u2248 0.833 (left: 0.833)\n"
                            ],
                            "values": [
                                0.003,
                                41.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n50 - (11 + 1) = 24 (left: 24)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "50 - 26 = 24 (left: 24 11)\n50 - (11 + 1) = 24 (left: 24)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n"
                            ],
                            "new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n50 - (11 + 1) = 24 (left: 24)\nAnswer: 50 - (11 + 1) = 24\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 - 24 = 26 (left: 26)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 / 2 = 25 (left: 25 24)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n24 + 1 = 25 (left: 25)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n26 - 2 = 24 (left: 24)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 - 25 = 25 (left: 25)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 / 2 = 25 (left: 25)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n26 - 2 = 24 (left: 24)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 / 2 = 25 (left: 25 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n26 - 2 = 24 (left: 24)\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 / 2 = 25 (left: 25 24)\n"
                            ],
                            "new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n26 - 2 = 24 (left: 24)\nAnswer: 5 * 10 - (11 - 1) = 24\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 / 2 = 25 (left: 25 24)\n25 - 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n26 - 2 = 24 (left: 24)\nAnswer: 5 * 10 - (11 - 1) = 24\n",
                                "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n50 / 2 = 25 (left: 25 24)\n25 - 1 = 24 (left: 24)\n"
                            ]
                        }
                    ],
                    "summary": "Use 11 \u2013 1 = 10 to create a duplicate 10, then multiply 5 \u00d7 10 = 50, and subtract 26 (via 11 + 1) to reach 24; avoid invalid operations like directly subtracting 10 from 11.",
                    "value_summary": "Prioritize feasible, promising reductions"
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n",
                                "10 * 5 = 50 (left: )  \n",
                                "10 + 5 + 1 = 16 (left: )  \n",
                                "11 - 1 = 10 (left: 10 5)  \n",
                                "10 + 5 = 15 (left: 15)  \n",
                                "10 - 5 = 5 (left: 11 1)  \n",
                                "11 - 1 = 10 (left: 10)  \n",
                                "10 * 2.4 = 24 (invalid, as 2.4 not in original set)  \n",
                                "10 + 10 - 1 = 19 (left: 19)  \n",
                                "11 + 1 = 12 (left: 12 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.0,
                                0.0,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 1 = 10 (left: 10 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n"
                            ],
                            "new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9, 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n5 + 9 = 14 (left: 14)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 / 1 = 10 (left: 10, 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n11 - 1 = 10 (left: 10, 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 + 5 = 15 (left: 15)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 * 2.4 = 24 (not applicable with integers)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n5 * 4.8 = 24 (not applicable with integers)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 + 10 - 2 = 18 (left: 18)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n11 + 1 + 12 = 24 (not applicable, as 12 not in set)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n11 - 1 = 10 (left: 10 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 + 5 = 15 (left: 15)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n5 * 2 = 10 (left: 10)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 + 10 = 20 (left: 20)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n20 + 4 = 24 (left: 4)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n15 + 9 = 24 (left: 9)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n10 + 14 = 24 (left: 14)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n5 * 4.8 = 24 (left: 4.8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.001,
                                0.003,
                                0.002,
                                20.002,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                1.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n"
                            ],
                            "new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n9 + 5 = 14 (left: 14)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n9 - 5 = 4 (left: 4)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n9 * 5 = 45 (left: 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n9 / 5 = 1.8 (left: 1.8)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 - 9 = -4 (left: -4)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 + 9 = 14 (left: 14)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 / 9 \u2248 0.555 (left: 0.555)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n5 * 10 = 50 (left: 50)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n10 + 5 + 1 = 16 (left: 16)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n50 / 2.0833 \u2248 24 (not exact, discard)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n10 + 10 + 4 = 24 (if 4 is available)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n10 + 10 + 4 = 24 (assuming 4 from previous steps)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n5 * 4 + 4 = 24 (if 4 available)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n10 * 2.4 = 24 (not exact, discard)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 + 13 = 24 (if 13 available)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n(Use only the original numbers and their combinations to reach 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n"
                            ],
                            "new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n11 - 1 = 10 (left: 10 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n5 * 10 = 50 (left: 50 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n10 + 5 + 1 = 16 (left: 16 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n50 - 45 = 5 (left: 5)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n50 / 2 = 25 (left: 25)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n11 + 11 + 1 = 23 (left: 23 5)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n11 + 11 + 1 + 1 = 24 (left: 24)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n10 + 10 + 4 = 24 (left: 24)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n50 / 2 = 25 (left: 25)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n10 + 1 = 11 (left: 11)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n10 - 1 = 9 (left: 9)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n10 + 5 = 15 (left: 15)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n10 - 5 = 5 (left: 5)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n11 - 1 = 10 (left: 10)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n11 - 5 = 6 (left: 6)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n5 + 10 = 15 (left: 15)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n5 + 1 = 6 (left: 6)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n1 + 10 = 11 (left: 11)\n",
                                "11 - 1 = 10 (left: 10 5)  \n14 - 10 = 4 (left: 4)  \n11 - 1 = 10 (left: 10)\n1 + 5 = 6 (left: 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n11 - 1 = 10 (left: 10 45)\n",
                                "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n5 * 10 = 50 (left: 50 45)\n"
                            ]
                        }
                    ],
                    "summary": "Use 11 \u2013 1 = 10 to duplicate 10, then multiply 5 \u00d7 10 = 50. Focus on combining remaining numbers directly\u2014such as 10 + 5 + 1\u2014to reach 24, or use operations that stay within the original set. Avoid creating invalid intermediate numbers outside 1, 5, 10, 11.",
                    "value_summary": "Avoid impossible, focus feasible"
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 5 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 6 1 10)\n",
                                "10 - 1 = 9 (left: 9 5 11)\n",
                                "11 - 1 = 10 (left: 10 5 10)\n",
                                "5 * 2 = 10 (left: 10 10 11)\n",
                                "5 + 1 = 6 (left: 6 10 11)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n"
                            ],
                            "new_ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n11 - 1 = 10 (left: 10 2)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n10 + 1 = 11 (left: 11 2)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n10 - 1 = 9 (left: 9 2)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 - 1 = 10 (left: 10 2)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 / 11 = 1 (left: 1 2)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n10 / 5 = 2 (left: 2 11)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n10 + 10 = 20 (left: 20 1)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 - 2 = 9 (left: 9 1)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n10 - 2 = 8 (left: 8 1)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 - 1 = 5 (left: 5 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n10 - 6 = 4 (left: 4 1)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n10 - 1 = 9 (left: 9 6)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n10 / 5 = 2 (left: 2 6)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n11 - 5 = 6 (left: 6 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n11 - 1 = 10 (left: 10 6)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n10 / 5 = 2 (left: 2 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 5 10 11",
                            "ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n"
                            ],
                            "new_ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 12)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 - 2 = 10 (left: 10 12)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 + 2 = 14 (left: 14 12)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 / 5 = 2 (left: 2 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n11 - 5 = 6 (left: 6 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n11 - 6 = 5 (left: 5 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 / 5 = 2 (left: 2 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n11 - 10 = 1 (left: 1 5)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n5 * 4 = 20 (left: 20 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n11 - 4 = 7 (left: 7 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 5 = 5 (left: 5 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n11 - 5 = 6 (left: 6 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 5 10 11",
                            "ys": [
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n6 * 4 = 24 (left: )\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n10 + 11 = 21 (left: 5)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n11 + 5 = 16 (left: 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n10 + 11 = 21 (left: 5)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n11 + 5 = 16 (left: 10)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n10 + 5 = 15 (left: 11)\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n11 + 5 = 16 (left: 10)\n",
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (11 + 1) * (10 / 5) = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                60.0
                            ],
                            "select_new_ys": [
                                "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (11 + 1) * (10 / 5) = 24\n",
                                "11 - 5 = 6 (left: 6 1 10)\n6 * 1 = 6 (left: 6 10)\n10 - 6 = 4 (left: 4 6)\n6 * 4 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To solve for 24 using 1, 5, 10, and 11, avoid subtracting directly from 11 or 10 unless clearly permissible. Focus on combining smaller numbers first\u2014such as 5 + 1 = 6\u2014and then multiplying to reach 24 (e.g., 6 \u00d7 4), or use addition to reach 24 directly. Since subtracting 1 from 11 or 10 appears invalid based on previous feedback, do not subtract these large numbers directly. Instead, consider pairing 10 and 5 to get 50, then divide or subtract to reach 24, or combine 11 and 5 to get 16, then add or multiply with remaining numbers. Prioritize operations that stay within the available set without reusing or invalidating numbers.",
                    "value_summary": "Prioritize feasible, avoid impossible"
                }
            ],
            "env_info": [
                {
                    "action": "11 - 10 = 1 (left: 1 5 1)\n1 + 1 = 2 (left: 2 5)\n1 * 24 = 24 (left: 24)\nAnswer: (11 - 10) + (5 * 1) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "11 - 10 = 1 (left: 1 5 1)\n1 - 1 = 0 (left: 0 5)\n0 + 24 = 24 (left: 24)\nAnswer: (11 - 10) * (5 + 1) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "10 - 5 = 5 (left: 1 5 5)\n5 + 1 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (10 - 5) * (5 + 1) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "11 - 5 = 6 (left: 6 10 1)\n5 + 1 = 6 (left: 6)\n6 * 4 = 24 (left: 4)\n4 + 20 = 24 (left: )\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "10 + 11 = 21 (left: 5)\n5 * 5 = 25 (left: 25)\n25 - 1 = 24 (left: 24)\nAnswer: 5 * 5 - 1 = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "10 / 5 = 2 (left: 2 11 1)\n11 - 10 = 1 (left: 1 2 1)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 10) * (5 + 1) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "11 - 10 = 1 (left: 1 5)  \n1 + 5 = 6 (left: 6)\n6 (no further steps possible with a single number)\n6 + 18 = 24 (left: )\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "11 + 1 = 12 (left: 12 5 10)\n12 - 5 = 7 (left: 7 10)  \n15 + 9 = 24 (left: 24)\nAnswer: (11 + 1) * (10 - 5) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "50 - 26 = 24 (left: 24 11)\n5 * 10 = 50 (left: 24 50)\n26 - 2 = 24 (left: 24)\nAnswer: 5 * 10 - (11 - 1) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "11 - 1 = 10 (left: 10 5)  \n10 - 1 = 9 (left: 9 5)  \n5 * 9 = 45 (left: 45)\n11 - 1 = 10 (left: 10 45)\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                },
                {
                    "action": "10 / 5 = 2 (left: 2 1 11)\n11 + 1 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\nAnswer: (11 + 1) * (10 / 5) = 24\n",
                    "history": [
                        "Answer: (11 + 1) * (10 / 5) = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 167937,
                "prompt_tokens": 93799,
                "cost": 0.0765547
            }
        },
        {
            "idx": 913,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 - 4 = 0 (left: 1 8 0)\n",
                                "4 + 4 = 8 (left: 1 8 8)\n",
                                "8 / 8 = 1 (left: 1 1)\n",
                                "8 - 4 = 4 (left: 1 4)\n",
                                "8 + 4 = 12 (left: 1 12)\n",
                                "8 * 4 = 32 (left: 1 32)\n",
                                "4 / 4 = 1 (left: 1 1)\n",
                                "4 - 1 = 3 (left: 3 8)\n",
                                "4 + 1 = 5 (left: 5 8)\n",
                                "4 * 1 = 4 (left: 4 8)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n",
                                "8 + 4 = 12 (left: 1 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 - 1 = 3 (left: 3 8)\n",
                                "8 + 4 = 12 (left: 1 12)\n"
                            ],
                            "new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "4 - 1 = 3 (left: 3 8)\n8 / 3 \u2248 2.6667 (not an integer, discard)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "4 - 1 = 3 (left: 3 8)\n8 - 8 = 0 (left: 0 3)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 - 8 = -5 (left: -5 8)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 / 8 = 0.375 (not integer, discard)\n",
                                "8 + 4 = 12 (left: 1 12)\n12 / 1 = 12 (left: 12)\n",
                                "8 + 4 = 12 (left: 1 12)\n12 - 1 = 11 (left: 11)\n",
                                "8 + 4 = 12 (left: 1 12)\n12 + 1 = 13 (left: 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.001,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                0.001,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ],
                            "new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11\n"
                            ],
                            "values": [
                                0.001,
                                0.0
                            ],
                            "select_new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11\n"
                            ],
                            "new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n2 + 8 = 10 (left: 8 10)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n8 - 2 = 6 (left: 6 8)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n8 / 2 = 4 (left: 4 8)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n8 * 2 = 16 (left: 16 8)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n14 - 8 = 6 (left: 6 14)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n14 / 2 = 7 (left: 7 14)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n14 - 2 = 12 (left: 12 14)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n14 / 2 = 7 (left: 7 14)\n",
                                "4 - 1 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11\n11\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n8 * 2 = 16 (left: 16 8)  \n",
                                "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n8 / 2 = 4 (left: 4 8)  \n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n",
                                "4 + 4 = 8 (left: 8 1 8)\n",
                                "8 + 8 = 16 (left: 16 1)\n",
                                "8 * 3 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 24)\n",
                                "1 * 24 = 24 (left: 24)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.003,
                                40.001,
                                20.002,
                                40.001
                            ],
                            "select_new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n",
                                "8 * 3 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n",
                                "8 * 3 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n4 / 4 = 1 (left: 1 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n4 - 4 = 0 (left: 0 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n4 + 4 = 8 (left: 8 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n8 / 4 = 2 (left: 2 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n4 * 4 = 16 (left: 16 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 / 4 = 4 (left: 4 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n12 + 4 = 16 (left: 16 1 2)\n",
                                "8 * 3 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n"
                            ],
                            "new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 - 1 = 11 (left: 2 11)  \n",
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 - 2 = 10 (left: 1 10)  \n",
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 2 = 6 (left: 1 6)  \n",
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 - 1 = 11 (left: 2 11)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 2 = 6 (left: 6 1)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 - 2 = 10 (left: 1 10)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n1 + 2 = 3 (left: 3 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n1 * 2 = 2 (left: 2 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n2 + 12 = 14 (left: 14)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n2 * 12 = 24 (left: 24)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 - 1 = 11 (left: 2 11)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                21.001,
                                0.003,
                                0.003,
                                60.0,
                                1.002,
                                60.0,
                                0.003,
                                2.001,
                                1.002
                            ],
                            "select_new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n"
                            ],
                            "new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 / 12 = 1 (left: 1)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 / 2 = 6 (left: 6 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 - 2 = 10 (left: 10 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 + 2 = 14 (left: 14 12)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 * 2 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 / 12 = 1 (left: 1)\n",
                                "8 / 4 = 2 (left: 2 1 4)\n16 - 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 / 2 = 6 (left: 6 12)\n"
                            ]
                        }
                    ],
                    "summary": "For solving 1, 4, 4, 8 in 24, avoid step operations that directly alter original numbers without proper tracking. Focus on combining the 4s first\u2014using addition or multiplication\u2014to generate intermediate targets (e.g., 4+4=8 or 4\u00d74=16). Then, pair the results with 1 or 8 to reach 24, such as using (8 + 8) \u00f7 (1/4) or similar combinations. Prioritize operations that maintain the integrity of original numbers, and ensure each step logically combines remaining values toward 24 without invalid manipulations. This approach minimizes invalid steps and guides efficient solution paths.",
                    "value_summary": "Avoid moves leading to 3 and 8; prioritize promising reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n",
                                "4 * 4 = 16 (left: 1 16)\n",
                                "8 / 4 = 2 (left: 1 2)\n",
                                "8 - 4 = 4 (left: 1 4)\n",
                                "16 / 8 = 2 (left: 1 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 4 5)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 - 1 = 3 (left: 3 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 1 = 5 (left: 4 5)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 * 1 = 4 (left: 4 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 / 1 = 4 (left: 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 7)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 - 7 = 1 (left: 1 8)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 / 7 \u2248 1.14 (left: 1.14 8)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 + 1 = 9 (left: 9 8)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 * 1 = 8 (left: 8 8)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 4 5)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 4 5)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 4 5)\n8 * 3 = 24 (left: 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 + 8 = 12 (left: 12 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 / 4 = 2 (left: 2 3)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 8 = 32 (left: 3 32)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 + 8 = 12 (left: 3 12)\n"
                            ],
                            "values": [
                                22.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n16 / 8 = 2 (left: 2 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n16 - 8 = 8 (left: 8 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n32 / 4 = 8 (left: 8 24)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n4 * 6 = 24 (left: 24)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n8 * 3 = 24 (left: 4 24)\n```\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 in 24, focus on combining the two 4s first through addition or multiplication to create intermediate values like 8 or 16. Use these results with 8 or 1 to reach 24, avoiding steps that discard or improperly manipulate original numbers. For example, multiply 4\u00d74=16, then combine with 8 and 1 using addition and division strategically; e.g., (8 + 16) - 1 = 23, close but requires adjustment. Prioritize operations that preserve all numbers until they meaningfully contribute to reaching 24, ensuring each step is logically connected to the goal.",
                    "value_summary": "Avoid steps leading to impossible or unpromising intermediate values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "4 + 4 = 8 (left: 8 8)\n",
                                "8 + 16 = 24 (left: 8)\n",
                                "8 + 8 = 16 (left: 16)\n",
                                "8 * 3 = 24 (left: 3 8)\n",
                                "8 / 1 = 8 (left: 4 4 8)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                3.0,
                                2.001,
                                60.0,
                                20.002
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "8 * 3 = 24 (left: 3 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "8 * 3 = 24 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n",
                                "8 * 3 = 24 (left: 3 8)\n8 * 3 = 24 (left: 8)\n",
                                "8 * 3 = 24 (left: 3 8)\n8 + 3 = 11 (left: 11 4)\n",
                                "8 * 3 = 24 (left: 3 8)\n8 / 8 = 1 (left: 1 3 4)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 * 3 = 12 (left: 4 12)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 + 8 = 12 (left: 3 12)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n"
                            ],
                            "values": [
                                3.0,
                                3.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n"
                            ],
                            "new_ys": [
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n8 / 4 = 2 (left: 1 2 4)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n4 + 8 = 12 (left: 1 12)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n4 * 2 = 8 (left: 1 8)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n8 + 4 = 12 (left: 1 12)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n8 - 4 = 4 (left: 1 4)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n8 / 4 = 2 (left: 1 2)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n8 + 1 = 9 (left: 2 9)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n8 - 1 = 7 (left: 2 7)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n4 + 1 = 5 (left: 2 5)\n",
                                "8 * 3 = 24 (left: 3 8)\n4 / 4 = 1 (left: 1 3 8)\n4 - 1 = 3 (left: 2 3)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n8 * 3 = 24 (left: 4 8)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 6 = 24 (left: 8 6)\n"
                            ],
                            "values": [
                                20.002,
                                20.002,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.0,
                                60.0,
                                0.0,
                                1.002,
                                20.002
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 * 16 = 128 (left: 128)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 in 24, prioritize combining the two 4s early\u2014using multiplication to create 16 (4\u00d74)\u2014which provides a strong base. Next, consider pairing 8 with this 16: adding yields 24 directly (8 + 16 = 24). To do this efficiently, perform (4\u00d74) + 8 = 24, then subtract 1 if needed to adjust, but since the sum is already 24, the goal is achieved. Alternatively, multiplying 4\u00d74=16, then adding 8 yields 24 immediately. Be cautious about steps that leave residual numbers with no path to 24; for example, using 8 - 4 = 4 leaves {1, 4, 4}, which has no solution. Focus on operations that combine 8 with the product of 4 and 4 early, avoiding dead-ends. Always aim to preserve all numbers until they contribute meaningfully toward 24.",
                    "value_summary": "Avoid steps leading to impossible values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "4 + 4 = 8 (left: 8 8)\n",
                                "8 + 8 = 16 (left: 16)\n",
                                "8 + 16 = 24 (left: 16)\n",
                                "8 * 3 = 24 (left: 8 3)\n",
                                "8 + 8 = 16 (left: 16)\n",
                                "16 + 8 = 24 (left: 8)\n",
                                "8 * 3 = 24 (left: 3)\n",
                                "4 * 4 = 16 (left: 8 16)\n",
                                "8 + 16 = 24 (left: 16)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "8 * 3 = 24 (left: 8 3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "8 * 3 = 24 (left: 8 3)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 16 = 128 (left: 128)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 * 8 = 128 (left: 128)\n",
                                "8 * 3 = 24 (left: 8 3)\n8 - 3 = 5 (left: 5 8)\n",
                                "8 * 3 = 24 (left: 8 3)\n8 / 2 = 4 (left: 4 3)\n",
                                "8 * 3 = 24 (left: 8 3)\n8 + 4 = 12 (left: 3 12)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 + 8 = 12 (left: 3 12)\n",
                                "8 * 3 = 24 (left: 8 3)\n8 / 4 = 2 (left: 2 3)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                20.002,
                                0.003,
                                20.002,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 / 4 = 2 (left: 2 12)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 - 4 = 4 (left: 4 12)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 + 12 = 20 (left: 20)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 * 12 = 96 (left: 96)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n12 - 8 = 4 (left: 4 4)\n",
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n12 / 8 = 1.5 (left: 1.5 8)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 / 4 = 2 (left: 2 12)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 / 4 = 2 (left: 2 12)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n"
                            ],
                            "new_ys": [
                                "8 * 3 = 24 (left: 8 3)\n4 * 3 = 12 (left: 8 12)\n8 / 4 = 2 (left: 2 12)\n12 + 12 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n8 / (4 - 4) = undefined (left: 8 4 4)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n16 + 8 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                41.0,
                                60.0,
                                0.0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n8 / (4 - 4) = undefined (left: 8 4 4)\n"
                            ]
                        }
                    ],
                    "summary": "To effectively solve 1, 4, 4, 8 for 24, focus on combining the two 4s early using multiplication: 4 \u00d7 4 = 16. This provides a strong base. Next, look to pair the 8 with this product to reach 24 directly: 8 + 16 = 24, which is straightforward and uses all numbers efficiently. Avoid steps that create dead-ends, such as subtracting 4 from 8 to get 4 and leaving unpaired numbers without a clear path to 24. Since the previous attempt misused the combination, consider alternative operations that preserve the integrity of each number. For instance, using (8 / (4 - 1)) yields 8/3, which isn't helpful, but combining 4 + 4 = 8 allows pairing with 8 for multiplication or addition. Remember, operations like multiplying 4 and 4 first then adding 8 is valid: (4\u00d74)+8=24. If stuck, explore combining 8 with the sum or difference of the 4s, but always ensure each number is used exactly once and operations respect game rules. Ultimately, prioritize merging 4s early, then combining the result with 8 via addition or multiplication to reach 24, avoiding intermediate steps that eliminate options prematurely.",
                    "value_summary": "Avoid impossible intermediate results."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 8 1)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n",
                                "8 - 4 = 4 (left: 4 1)\n",
                                "8 / 4 = 2 (left: 2 1)\n",
                                "8 / 8 = 1 (left: 4 1)\n",
                                "8 - 1 = 7 (left: 7 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n",
                                "4 * 8 = 32 (left: 32 1)\n",
                                "8 / 1 = 8 (left: 8 4)\n",
                                "4 / 1 = 4 (left: 4 8)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n",
                                "4 + 8 = 12 (left: 12 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n",
                                "4 + 8 = 12 (left: 12 1)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n16 / 8 = 2 (left: 2 1)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n16 - 8 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n16 / 1 = 16 (left: 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 / 1 = 12 (left: 12)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 + 1 = 13 (left: 12)\n",
                                "4 + 8 = 12 (left: 12 1)\n\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n16 / 8 = 2 (left: 2)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n16 - 8 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 1 = 8 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n8 - 4 = 4 (left: 4 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n8 / 4 = 2 (left: 2 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n8 / 8 = 1 (left: 1 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 8 = 12 (left: 12)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 - 8 = -4 (left: -4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 8 = 32 (left: 32)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n8 - 4 = 4 (left: 4 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n8 / 4 = 2 (left: 2 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n"
                            ],
                            "new_ys": [
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 / 4 = 2 (left: 8 2)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n4 + 4 = 8 (left: 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 - 8 = 0 (left: 0)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n4 * 2 = 8 (left: 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n4 + 2 = 6 (left: 8 6)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n4 - 2 = 2 (left: 8 2)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n2 + 8 = 10 (left: 10)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 / 8 = 1 (left: 1)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n8 / 4 = 2 (left: 8 2)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n8 - 2 = 6 (left: 8 6)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n8 / 2 = 4 (left: 8 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n4 + 4 = 8 (left: 8 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n4 * 2 = 8 (left: 8 8)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 * 4 = 16 (left: 8 8 16)\n8 / 4 = 2 (left: 8 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 / 4 = 2 (left: 8 2)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 for 24, avoid premature multiplication of the two 4s into 16 if it leads to invalid steps or misuses original numbers. Instead, consider combining 8 with the 4s more flexibly. For example, pairing 8 with (4 + 1) yields 8/ (4 - 1) = 8/3, which isn't helpful, so focus on operations that keep all numbers usable. A promising approach is to multiply one 4 by 8: 4 \u00d7 8 = 32, then subtract the remaining 4 and 1 strategically: (8 - 4) + (4 \u00d7 1) = 4 + 4 = 8, which doesn't reach 24 directly. Alternatively, use (4 + 4) = 8, then multiply by 3 (from 8/ (8/3)), but that complicates the sequence. Focus on combining 4 + 4 = 8 early, then explore multiplying this 8 with 3 (from 8/ (8/3)) to reach 24, ensuring each number is used once.",
                    "value_summary": "Avoid impossible intermediate results"
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 8 1)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n",
                                "8 - 4 = 4 (left: 4 1 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n",
                                "8 / (4 - 1) = 8/3 (left: 8/3 4 1)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                20.002,
                                40.001,
                                0.002
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 - 1 = 7 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n16 - 8 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 / 1 = 8 (left: 8 8)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n4 * 2 = 8 (left: 8 8)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 / 8 = 1 (left: 1 4)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n4 + 4 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 3 = 24 (left: 24)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n4 + 4 = 8 (left: 8 8 1)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n4 * 6 = 24 (left: 8 1 6)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 - 4 = 4 (left: 4 8 1)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / (4 - 1) = 8 / 3 (left: 8 4 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                20.002,
                                20.002
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 3 = 24 (left: 24)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 3 = 24 (left: 24)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16 1)\n8 * 3 = 24 (left: 24)\nAnswer: (4 * 4) * (8 - 8/3) = 24\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 + 4 = 8 (left: 8 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 - 4 = 4 (left: 4 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 8 = 1 (left: 1 4)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 - 8 = 0 (left: 0 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n"
                            ],
                            "new_ys": [
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n8 + 8 = 16 (left: 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n8 / 4 = 2 (left: 2 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n4 + 4 = 8 (left: 8 2)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n8 - 4 = 4 (left: 4 8)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n8 / 4 = 2 (left: 2 8)\n8 / 2 = 4 (left: 4 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 4, 4, 8 for 24, focus on combining the 4s early to create flexible intermediate values. Use the pair (4 + 4) = 8 to produce a new 8, which can then be paired with the remaining 8 to reach 64 via multiplication or with other operations. Avoid combining 8 with 4 or 1 prematurely unless it leads directly toward 24. Consider that pairing 8 with (4 + 1) yields 8/(4 - 1)=8/3, which complicates the path; thus, prioritize operations that keep all original numbers usable without dropping or reusing them improperly. For instance, after using (4 + 4)=8, multiply this 8 by 3 (from 8/ (8/3)) to reach 24, but ensure each step involves only available numbers. Remember that each move should combine two current numbers, replacing them with their result, and no number should be reused or dropped out of sequence. In this puzzle, the key is to create 8 or 24 through simple combinations\u2014either by pairing 4s or combining 8 with the sum of 4 and 1\u2014while strictly adhering to move legality. Avoid complex or invalid combinations like directly adding 8 and 4 if feedback indicates such steps are illegal. Focus on structured, stepwise operations that preserve all numbers until the final step to reach 24.",
                    "value_summary": "In the 24 game with numbers 1, 4, 4, 8, valid moves must strictly adhere to using only available numbers at each step, combining exactly two at a time, and resulting in intermediate values achievable through permissible operations. Moves that attempt to combine numbers not present in the current set or produce impossible intermediate results should be labeled 'impossible.' For this specific set, combining 4 and 8 to produce 12 is valid if rules permit; otherwise, such steps are invalid. The key is to prioritize moves that keep the sequence within feasible intermediate values, avoiding impossible or illegal combinations, to maintain a promising path toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 8 1)\n",
                                "8 / 8 = 1 (left: 1 4 1)\n",
                                "4 * 6 = 24 (left: 24 1)\n",
                                "4 * 6 = 24 (left: 24 8)\n",
                                "8 * 3 = 24 (left: 4 3)\n",
                                "8 / 4 = 2 (left: 2 4)\n",
                                "8 / 4 = 2 (left: 8 1)\n",
                                "4 + 4 = 8 (left: 8 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n",
                                "4 * 6 = 24 (left: 24 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 6 = 24 (left: 24 1)\n",
                                "4 * 6 = 24 (left: 24 8)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 + 8 = 16 (left: 4 16)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 24 8)\n8 / 4 = 2 (left: 24 2)\n",
                                "4 * 6 = 24 (left: 24 8)\n8 - 4 = 4 (left: 24 4)\n",
                                "4 * 6 = 24 (left: 24 8)\n8 * 3 = 24 (left: 4 3)\n",
                                "4 * 6 = 24 (left: 24 8)\n4 + 4 = 8 (left: 8 8)\n",
                                "4 * 6 = 24 (left: 24 8)\n4 * 6 = 24 (left: 8 6)\n",
                                "4 * 6 = 24 (left: 24 8)\n24 / 1 = 24 (left: 8 1)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                40.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 * 3 = 24 (left: 3 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n4 + 4 = 8 (left: 8 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n8 / 8 = 1 (left: 1 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n8 - 8 = 0 (left: 0 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n24 + 8 = 32 (left: 32)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n8 * 3 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n4 * 6 = 24 (left: 8 24)\n8 + 16 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                40.001,
                                60.0,
                                1.002,
                                21.001,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n4 + 4 = 8 (left: 8 8 1)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n8 * 3 = 24 (left: 4 8)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n8 / 4 = 2 (left: 2 8)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n8 / 2 = 4 (left: 4 4)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n4 * 6 = 24 (left: 4 6)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n8 + 4 = 12 (left: 12 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n8 * 3 = 24 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n4 * 6 = 24 (left: 8 24)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n4 + 20 = 24 (left: 8 20)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n8 + 16 = 24 (left: 4 16)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n4 * 6 = 24 (left: 8 6)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n8 / (8 / 3) = 3 (left: 3 4 3)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 - 4 = 4 (left: 4 24)\n8 / (8 / 2) = 2 (left: 2 4 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n4 + 4 = 8 (left: 8 8 1)\n",
                                "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n8 * 3 = 24 (left: 4 8)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 for 24, focus on correctly combining the 4s first to create flexible intermediates. Use (4 + 4) = 8, ensuring that after each operation, only the remaining unused numbers are kept, replacing used numbers with their results. Avoid reusing or dropping numbers improperly; each move must remove exactly two numbers and replace them with their result. From the original set, combine 4 and 4 to get 8, leaving {8, 1}. Next, combine the remaining 8 with 1 via multiplication: 8 \u00d7 3 (obtained from 8 / (8/3)) is a valid approach, but since 8/ (8/3) involves an invalid intermediate, better to focus on simpler steps. For example, pairing 8 and 4 to get 32, then dividing or subtracting to reach 24, is promising. Keep the operations straightforward, ensuring each step accurately updates the set of remaining numbers. The key is to create 8 or 24 through valid, stepwise combinations, prioritizing the use of (4 + 4)=8 early and carefully managing remaining numbers.",
                    "value_summary": "In the 24 game with 1, 4, 4, 8, valid moves must use only current numbers, combining exactly two with permissible operations, resulting in achievable intermediate values. Moves that reuse numbers improperly, produce invalid intermediate results, or violate rules are 'impossible.' Prioritize operations that maintain feasible, reachable intermediate states\u2014such as combining 4 and 8 to get 12 or 4 and 4 to get 8\u2014while avoiding illegal steps like using a number twice or producing unattainable values. This approach ensures a promising pathway toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "8 / 4 = 2 (left: 1 2 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n",
                                "4 * 4 = 16 (left: 8 1)\n",
                                "8 - 1 = 7 (left: 7 4)\n",
                                "8 / 1 = 8 (left: 8 4)\n",
                                "8 + 4 = 12 (left: 8 1)\n",
                                "8 - 4 = 4 (left: 8 1)\n"
                            ],
                            "values": [
                                21.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "8 / 1 = 8 (left: 8 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "8 / 1 = 8 (left: 8 4)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 * 4 = 16 (left: 1 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n8 - 4 = 4 (left: 1 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n8 / 4 = 2 (left: 1 2)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 1 = 5 (left: 4 5)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 - 1 = 3 (left: 4 3)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n8 / 1 = 8 (left: 4 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n8 - 1 = 7 (left: 4 7)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n",
                                "8 / 1 = 8 (left: 8 4)\n8 - 4 = 4 (left: 8 4)\n",
                                "8 / 1 = 8 (left: 8 4)\n8 / 4 = 2 (left: 8 2)\n",
                                "8 / 1 = 8 (left: 8 4)\n8 * 4 = 32 (left: 32 4)\n",
                                "8 / 1 = 8 (left: 8 4)\n4 + 8 = 12 (left: 12 4)\n",
                                "8 / 1 = 8 (left: 8 4)\n4 - 8 = -4 (left: -4 8)\n",
                                "8 / 1 = 8 (left: 8 4)\n4 / 8 = 0.5 (left: 0.5 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                41.0,
                                40.001,
                                20.002,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 / 2 = 8 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 / 4 = 4 (left: 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 - 8 = 8 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 - 4 = 12 (left: 12)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 + 8 = 24 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 + 4 = 20 (left: 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n16 * 1 = 16 (left: 1)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 * 3 = 48 (left: 4 3)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 / 2 = 8 (left: 8 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 4 = 12 (left: 12)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 + 8 = 24 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 8 = 8 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 / 4 = 4 (left: 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 + 4 = 20 (left: 4 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 2 = 14 (left: 14)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 / 2 = 8 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                22.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 4 = 12 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 4 = 12 (left: 12)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 * 1 = 16 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 / 1 = 16 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 - 0 = 16 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 + 8 = 24 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 + 8 / 1 = 24 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 + 8 - 0 = 24 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 + 8 * 1 = 24 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 4 = 12 (left: 12)\n12 * 2 = 24 (left: 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 4 = 12 (left: 12)\n12 + 12 = 24 (left: )\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 - 4 = 12 (left: 16)\n16 - 4 = 12 (left: 12)\n12 - 0 = 12 (left: 0)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 * 1 = 16 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 / 1 = 16 (left: 16)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 for 24, prioritize combining the two 4s first: (4 + 4) = 8. This simplifies the set to {8, 8, 1}. Next, combine one 8 with the remaining 8 via multiplication: 8 \u00d7 3 = 24, but since 3 isn't available, instead, subtract 8 - 1 = 7, then multiply 8 by 3 is invalid here. Alternatively, multiply the initial 8 and 4 to get 32, then subtract 8 to obtain 24: (8 \u00d7 4) - 8 = 24. Focus on using valid operations that directly manipulate 4s and 8s, ensuring each step reduces the set correctly and avoids introducing non-existent intermediate values.",
                    "value_summary": "In the 24 game with 1, 4, 4, 8, valid moves combine only current numbers using permissible operations, producing reachable intermediate results. Moves that reuse numbers improperly, involve invalid values (like 6 without derivation), or violate rules are 'impossible.' Focus on combining 4 and 8 or 4 and 4 to generate feasible intermediate states toward 24, avoiding illegal steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "4 + 4 = 8 (left: 8 8)\n",
                                "16 - 8 = 8 (left: 8 8)\n",
                                "8 * 3 = 24 (left: 8)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "4 + 4 = 8 (left: 8 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 8 16)\n",
                                "4 + 4 = 8 (left: 8 8)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n16 * 1.5 = 24 (left: )\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 + 4 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n8 * 3 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n16 + 8 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.0,
                                0.003,
                                0.0,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n16 / 4 = 4 (left: 4 4)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n4 * 4 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n4 + 4 = 8 (left: 8)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n8 * 3 = 24 (left: 3)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n16 + 8 = 24 (left: 8)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n8 * 3 = 24 (left: 3)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n4 * 6 = 24 (left: 6)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n8 * 3 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n4 + 4 + 8 = 16 (not directly leading to 24, ignore)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n4 * 4 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n8 * 3 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n4 * 4 = 16 (left: 8)\n16 + 8 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n16 / 4 = 4 (left: 4 4)\n",
                                "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n4 * 4 = 16 (left: 16)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize combining the two 4s via addition or multiplication: (4 + 4) = 8 or (4 \u00d7 4) = 16. Then, pair the result with 8 using multiplication or subtraction to reach 24, such as (8 \u00d7 3) or (16 + 8). Avoid steps like (8 - 4) = 4, which don't directly lead toward 24. Focus on combining 4s first to simplify the set efficiently.",
                    "value_summary": "In the 1,4,4,8 puzzle, promising moves combine remaining numbers to approach 24; operations producing intermediate sums/differences that progress toward 24 are favorable. Moves wasting or misusing numbers\u2014like unnecessary subtractions or invalid results\u2014are unpromising. Focus on operations that efficiently reduce toward 24 without invalid or dead-end steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n",
                                "4 * 4 = 16 (left: 1 16)\n",
                                "8 + 8 = 16 (left: 1 16)\n",
                                "16 / 4 = 4 (left: 1 4)\n",
                                "16 / 8 = 2 (left: 1 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 * 4 = 16 (left: 1 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 * 4 = 4 (left: 4 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 * 4 = 4 (left: 4 4)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 1)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 - 8 = 0 (left: 0 1)\n",
                                "4 + 4 = 8 (left: 1 8)\n8 + 1 = 9 (left: 9 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n8 + 16 = 24 (left: 1)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n8 * 3 = 24 (left: 1)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n4 + 4 = 8 (left: 1 8)\n```\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 - 8 = 0 (left: 0)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 / 8 = 1 (left: 1)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n16 - 1 = 15 (left: 15 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n16 / 1 = 16 (left: 16)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n16 - 16 = 0 (left: 0)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 * 4 = 16 (left: 1 16)\n16 / 16 = 1 (left: 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8)\n"
                            ]
                        }
                    ],
                    "summary": "To solve the 1, 4, 4, 8 puzzle, prioritize combining the two 4s early using addition or multiplication (e.g., 4 + 4 = 8 or 4 \u00d7 4 = 16) to reduce complexity. Focus on creating intermediate results that can directly reach 24 with remaining numbers. For example, after obtaining 8 or 16, combine it with the 8 or 1 through multiplication, addition, or subtraction to reach 24. Be cautious to only use each number once per step and update the set accordingly. Avoid invalid operations such as reusing numbers or performing operations that don't utilize the current set correctly. Since the initial set contains two 4s, combining them immediately is often advantageous. For instance, using 4 + 4 = 8 simplifies the set to {1, 8, 8}; from there, multiply 8 \u00d7 3 (if possible) or add/subtract to reach 24. The key is to systematically reduce the set to 24 with valid, step-by-step operations focusing on combining the 4s first.",
                    "value_summary": "Prioritize operations that reduce numbers toward 24, avoid dead-ends or invalid results; effective moves combine remaining numbers toward 24 efficiently, avoiding unnecessary subtractions or invalid steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n",
                                "4 + 4 = 8 (left: 1 8 8)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n",
                                "8 - 4 = 4 (left: 1 4 4)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n",
                                "4 + 8 = 12 (left: 1 4 12)\n",
                                "4 * 2 = 8 (left: 1 8 8)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                40.001,
                                21.001,
                                40.001,
                                20.002,
                                20.002
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 4 = 4 (left: 1 4 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n(assuming 3 is created via 4 - 1)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n8 - 4 = 4 (left: 1 4 4)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n4 * 4 = 16 (left: 1 16)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n8 / 4 = 2 (left: 2 4)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n4 + 4 = 8 (left: 1 8)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n8 + 8 = 16 (left: 1 16)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n8 - 4 = 4 (left: 1 4)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n4 + 8 = 12 (left: 1 12)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n8 / 4 = 2 (left: 1 2)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n4 * 2 = 8 (left: 1 8)\n",
                                "8 / 4 = 2 (left: 1 2 8)\n4 + 8 = 12 (left: 1 12)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.0,
                                0.003,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 8 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 2 = 6 (left: 8 6)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 2 = 4 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 8 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n4 * 4 = 16 (left: 3 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 / 4 = 2 (left: 3 2 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n3 * 8 / 4 = 6 (left: 6 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n3 + 4 = 7 (left: 7 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n4 * 3 = 12 (left: 12 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n16 + 8 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n16 + 8 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n16 * 1.5 = 24 (left: 1.5)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n8 / 4 = 2 (left: 3 4 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n4 * 2 = 8 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n3 * 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n8 + 8 = 16 (left: 3 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n8 - 3 = 5 (left: 5 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n4 * 3 = 12 (left: 12 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 4 4 3)\n8 - 4 = 4 (left: 3 4 4)\n4 + 3 = 7 (left: 7 4)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve the 1, 4, 4, 8 puzzle, avoid initial operations that cannot lead to 24, such as subtracting 4 from 8 (e.g., 8 - 4 = 4), as these do not progress toward the goal. Instead, focus on combining the two 4s early using multiplication or addition to reduce complexity. For instance, 4 \u00d7 4 = 16 or 4 + 4 = 8 creates intermediate results that are more promising. From 4 \u00d7 4 = 16, pairing with 8 allows multiplication (16 \u00d7 1.5) to reach 24, but since 1.5 isn't available, look for operations that produce 24 directly, such as (8 - 4) \u00d7 3, but this requires creating a 3 from remaining numbers. Alternatively, combining 8 and 3 (obtained via 4 - 1) can help, but that involves multiple steps. The key is to prioritize operations that generate intermediate results easily combined to 24, such as 8 \u00d7 3 or 12 + 12. Avoid operations on leftover numbers that do not lead to multiples or factors of 24. Overall, combining the 4s early to form 8 or 16 simplifies the set, and then using multiplication or addition with 1 or 8 to reach 24 is the most promising route. Systematically explore these combinations while avoiding dead-ends to optimize your path to 24.",
                    "value_summary": "Prioritize operations that efficiently approach 24, avoid impossible or dead-end steps like invalid subtractions, and focus on promising combinations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 2 = 8 (left: 8 1)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 2 = 16 (left: 16 1)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 + 16 = 24 (left: 1) \n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)  \n7 (no operation possible with single number)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)  \n16 (no operation possible with single number)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 - 1 = 7 (left: 8 7)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 * 3 = 24 (left: 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n16 / 2 = 8 (left: 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n4 * 6 = 24 (left: 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.002,
                                0.003,
                                3.0,
                                0.003,
                                3.0,
                                0.003,
                                3.0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 * 3 = 24 (left: 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 + 16 = 24 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 / 1 = 8 (left: 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n16 + 8 = 24 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n16 * 1.5 = 24 (left: 16 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n8 * 3 = 24 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n16 / (8 / 3) = 24 (left: 8 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n8 * 3 = 24 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 + 16 = 24 (left: 16)\n16 - (8 - 8) = 24 (left: 8 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 * 3 = 24 (left: 3)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 efficiently, focus on early combination of the two 4s using multiplication (4\u00d74=16) to create a useful intermediate. After using both 4s, remaining numbers are 1, 8, and 16. Combining 8 and 16 directly (e.g., 16 + 8 = 24) is promising, but since 8+16=24 is invalid (sum exceeds 24), consider alternative operations. Note that (8 - 4) = 4 and (4 + 4) = 8 are less helpful here. Instead, use 8 and 16 with multiplication or division to reach 24: for example, (16 + 8) = 24 is invalid, but (16 + 8) = 24 is correct\u2014so the key is to reach 16 and 8 through earlier steps and combine with 1 if needed. Prioritize combining the 4s early, then use 8 and 16 to reach 24 via addition or multiplication, avoiding reusing numbers and dead-end operations.",
                    "value_summary": "Avoid impossible reductions; favor operations progressing toward 24 efficiently."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n"
                            ],
                            "values": [
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 * 4 = 64 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 / 4 = 4 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 16 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 4 = 4 (left: 16 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 4 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.0,
                                0.003,
                                0.003,
                                41.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n4 * 4 = 16 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n8 + 16 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n8 + 16 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "For the 1, 4, 4, 8 puzzle, prioritize early use of the two 4s by multiplying them to create 16 (4\u00d74=16). This step simplifies the problem and produces a key intermediate. Next, use the 16 and 8 to reach 24\u2014adding them (16+8=24) is the most direct route. Since addition of 16 and 8 yields 24, avoid unnecessary subtraction or division here. After establishing 16 from the 4s, combine with 8 to get 24 without reusing numbers or introducing invalid operations. The remaining 1 can be set aside until needed for final adjustments, but often focusing on the 16 and 8 is sufficient. The core strategy is to consolidate the two 4s quickly, then combine 16 and 8 via addition to reach 24, avoiding dead-ends. This approach minimizes complex operations and leverages the most straightforward path to 24 using the available numbers efficiently.",
                    "value_summary": "Prioritize feasible operations; avoid steps leading to impossibility or dead ends."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 + 8 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                0.0,
                                20.002
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 * 8 = 64 (left: 64)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 16 = 0.5 (left: 0.5)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8 0)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2 0)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n4 * 4 = 16 (left: 8 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n4 + 4 = 8 (left: 8 1 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n16 + 8 = 24 (left: 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n8 + 8 = 16 (left: 4 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n8 * 3 = 24 (left: 4 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n1 + 16 = 17 (left: 17)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n1 * 16 = 16 (left: 16)  \n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n16 - 1 = 15 (left: 15)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n4 * 4 = 16 (left: 8 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n4 + 4 = 8 (left: 8 1 8)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 4, 4, 8, focus on combining the two 4s early via multiplication (4\u00d74=16) to create a strong intermediate. Next, pair this 16 with the 8 by addition (16+8=24), directly reaching the target without unnecessary operations. Be cautious to use each number exactly once; after producing 16 from the 4s, incorporate the 8 without reusing it improperly. The remaining 1 can be reserved for final adjustments if needed, but the core pathway involves multiplying the 4s first, then adding to the 8. Avoid subtracting or dividing unless necessary, as these often complicate progress. Since all numbers are used once, ensuring each step uses only available values maintains validity. This streamlined approach leverages the most straightforward operations to reach 24 efficiently with minimal complexity.",
                    "value_summary": "In the 1,4,4,8 puzzle, prioritize feasible operations that use only available numbers without reuse. After each step, verify that resulting numbers are derived solely from remaining tokens. Moves involving unavailable or reused values are invalid; focus on combining remaining numbers logically to reach 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n12 + 12 = 24 (left: 16 12)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 + 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 + 8 = 16 (left: 16)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 / 1 = 16 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 - 1 = 15 (left: 1 15)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 + 1 = 17 (left: 1 17)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n16 - 6 = 10 (left: 10)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n16 / 6 \u2248 2.6667 (left: 2.6667)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n16 * 6 = 96 (left: 96)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 6 = 24 (left: 16 6)\n16 + 6 = 22 (left: 22)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 / 1 = 16 (left: 1 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 / 1 = 16 (left: 1 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 - 8 = 8 (left: 0 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 / 8 = 2 (left: 0 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 - 4 = 12 (left: 4 0)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 / 4 = 4 (left: 4 0)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 - 2 = 14 (left: 2 0)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 / 2 = 8 (left: 8 0)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 / 1 = 16 (left: 1 16)\n16 - 1 = 15 (left: 15 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 / 1 = 16 (left: 1 16)\n16 / 1 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n16 / 1 = 16 (left: 1 16)\n```\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 - 8 = 8 (left: 0 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 / 8 = 2 (left: 0 2)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 efficiently, prioritize combining the two 4s first via multiplication: 4\u00d74=16. Then, add this result to the 8: 16+8=24, achieving the target directly. Use each number exactly once, ensuring intermediate results are treated as new numbers for subsequent operations. Avoid intermediate steps that reuse or improperly handle previous results; instead, focus on sequential, single-operation steps. The key is to multiply the two 4s early, then add the 8, reserving the 1 for any necessary adjustments, though it isn't needed here.",
                    "value_summary": "In the 1,4,4,8 puzzle, effective moves prioritize combining only remaining, available numbers without reuse or dropping tokens. After each operation, verify that the resulting values are derived solely from current tokens, ensuring no values are reused or fabricated. Moves that involve unavailable numbers, reuse previous results improperly, or omit existing tokens are invalid. For example, after using both 4's to form 16 via 4\u00d74, the remaining numbers are 1, 8, and 16, all of which can be legitimately used in subsequent steps. Valid moves are those that manipulate these current tokens logically toward 24, with careful attention to maintaining the integrity of the number set at each stage. This approach ensures each step logically progresses from the current, valid pool of numbers."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 + 8 = 16 (left: 16)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n8 + 16 = 24 (left: )\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 + 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 + 4 = 20 (left: 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 - 8 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 / 4 = 4 (left: 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 / 8 = 2 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 - 4 = 12 (left: 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 - 8 = 8 (left: 8)\n"
                            ],
                            "values": [
                                60.0,
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n8 * 4 = 32 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n4 * 4 = 16 (left: 8 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n8 + 16 = 24 (left: 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n16 / 4 = 4 (left: 8 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n8 / 4 = 2 (left: 1 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n8 - 4 = 4 (left: 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n4 + 4 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n4 * 4 = 16 (left: 8 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n1 + 3 = 4 (if 3 available, but not here)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 8 = 1 (left: 1 1)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16)\n16 * 1 = 16 (left: 16)\n8 * 4 = 32 (left: 1 16)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 4, 4, 8, prioritize multiplying the two 4s first: 4\u00d74=16, creating a large intermediate. Next, add the 8 to 16: 16+8=24, achieving the target in two straightforward steps. The 1 can be reserved for adjustments if needed but isn't necessary here. Avoid unnecessary or illegal operations, such as dividing or combining numbers out of sequence, which can lead to invalid steps. In past attempts, dividing 8 by 8 to get 1 is valid but doesn't contribute directly to reaching 24 with minimal steps; using multiplication and addition of the key numbers is more efficient. Focus on combining the 4s early, then adding the 8, and only incorporate the 1 for fine-tuning if required. This streamlined approach minimizes complexity and prevents invalid moves.",
                    "value_summary": "In the 1,4,4,8 puzzle, effective moves strictly manipulate the current set of available numbers without reuse or omission. After each operation, verify that resulting values derive solely from the current tokens, ensuring no external or previously used results are introduced improperly. Valid moves combine numbers within the current set\u2014such as using both 4s to form 16\u2014then update the pool accordingly. Moves that attempt to reuse results not present in the current state, involve unavailable numbers, or drop tokens without proper accounting are invalid. Consistently track the remaining numbers after each step, ensuring each move logically progresses toward 24 based solely on the existing, valid tokens."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 4 = 4 (left: 4 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 16 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 + 8 = 16 (left: 16 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 + 4 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 2 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 1 = 16 (left: 16 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 4 = 4 (left: 4 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 4 = 4 (left: 4 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 4 = 4 (left: 4 1 4)\n8 * (4 - 1) = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 / 4 = 2 (left: 2 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 + 4 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 1 = 7 (left: 7 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 / 4 = 2 (left: 2 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 * 1 = 4 (left: 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 / 2 = 4 (left: 4 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 + 1 = 5 (left: 5 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 3 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n4 * 6 = 24 (left: 3 6 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 3 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 - 4 = 4 (left: 3 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n4 + 20 = 24 (left: 3 20 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n4 * 6 = 24 (left: 3 6 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 - 4 = 4 (left: 3 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n8 - 4 = 4 (left: 4 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n4 * 4 = 16 (left: 16 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n8 / 4 = 2 (left: 2 1 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n(4 - 1) * 4 = 12 (left: 12 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n8 - (4 - 1) = 5 (left: 5 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n8 / (4 - 1) = 8 / 3 (left: 8 / 3 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n4 + 1 = 5 (left: 5 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n8 - 4 = 4 (left: 4 1 4)\n4 - 1 = 3 (left: 3 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 3 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n4 * 6 = 24 (left: 3 6 8)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 4, 4, 8 in Game of 24, focus on early multiplication of the two 4s to create a significant intermediate value: 4\u00d74=16. This simplifies combining with other numbers later. Next, consider using the 8 to reach 24 through multiplication or addition, such as 8\u00d73, but since 3 isn't directly available, derive it via (4 - 1). The key is to utilize the 8 and a subtraction involving 4 and 1: 8\u00d7(4 - 1)=24, which uses three numbers (8, 4, 1). The remaining 4 can be unused, but most puzzles require all four numbers to be used exactly once, so plan accordingly. In this case, dividing 8 by 8 to get 1 is valid but doesn't directly contribute to reaching 24 efficiently. Combining the two 4s early reduces complexity, and using subtraction to generate needed factors is optimal. Avoid unnecessary operations like dividing 4 by 4 or 8 by 8 unless it simplifies to the target directly. Overall, prioritize creating 16 from the 4s, then leverage the 8 with subtraction to reach 24, ensuring all four numbers are used if required. This focused approach minimizes steps and adheres to valid move sequences.",
                    "value_summary": "In the 1,4,4,8 puzzle, valid moves must manipulate the current set of numbers solely through permissible operations\u2014addition, subtraction, multiplication, or division\u2014without reusing or introducing external results. Each move should reduce or transform the current tokens, producing new values that directly derive from the existing set. After each operation, verify that all remaining tokens accurately reflect the previous set minus used elements, with any new results replacing their sources correctly. Moves that attempt to combine numbers using invalid operations, reuse results not present in the current state, or drop tokens without proper accounting are invalid. To evaluate moves, confirm that each step maintains the integrity of the current token set, progresses logically toward 24, and adheres strictly to the rule that all intermediate values originate from the current tokens only."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 4 = 2 (left: 2 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 4 = 4 (left: 4 16)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 2 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 - 4 = 4 (left: 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 2 = 8 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 2 = 4 (left: 4 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 7)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 - 7 = 9 (left: 9)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 * 16 = 112 (left: 7)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 / 7 \u2248 2.29 (not useful)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 / 16 \u2248 0.4375 (not useful)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.001
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 2 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 2 8)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n8 / 4 = 2 (left: 8 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n8 / 4 = 2 (left: 2 8)\n8 / 4 = 2 (left: 2 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n8 - 4 = 4 (left: 8 4)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n8 / 4 = 2 (left: 8 2)\n"
                            ]
                        }
                    ],
                    "summary": "To effectively solve 1, 4, 4, 8 in Game of 24, prioritize early multiplication of the two 4s to create 16 (4\u00d74=16), simplifying subsequent calculations. Use the 8 in combination with subtraction involving 1 to reach 24; for example, 8\u00d7(4 - 1)=24, which uses three of the four numbers efficiently. Be cautious with operations like dividing by 8 or 4 unless they directly contribute to reaching 24; unnecessary division can complicate the path. Since all four numbers must be used exactly once, plan operations that incorporate each number without leaving leftovers or invalid moves. If initial steps produce intermediate values like 2 (from 8/4), explore combining these with remaining numbers (e.g., 4 and 1) to reach 24 through multiplication or addition. The key is to leverage the most straightforward combinations\u2014multiplying 4s first, then using the 8 with subtraction\u2014while ensuring all four numbers are used precisely once. This focused approach minimizes unnecessary steps and aligns with valid move sequences toward 24.",
                    "value_summary": "For the 1, 4, 4, 8 puzzle, valid moves must derive new values solely through permitted operations\u2014addition, subtraction, multiplication, or division\u2014using only the current set of tokens. Each move should correctly combine two existing numbers, replacing them with the resulting value, and avoid reusing or introducing external results. After each step, verify that remaining tokens accurately reflect the prior set minus used elements, ensuring no tokens are dropped or duplicated improperly. Moves that attempt invalid operations, reuse results not present in the current set, or break the integrity of token accounting are unpromising. Effective moves progress logically toward 24 while maintaining strict adherence to token integrity and operation rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 1 3)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 1)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 * 3 = 24 (left: 3 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 7 23)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 - 7 = 9 (left: 9 7)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 / 7 \u2248 2.29 (invalid, discard)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 * 16 = 112 (left: 112)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 7 = 14 (invalid, only one 7)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 - 16 = -9 (discard)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 / 16 \u2248 0.4375 (discard)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n8 + 16 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 7 23)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 7 23)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n16 / 8 = 2 (left: 2)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 * 8 = 64 (left: 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n16 / 16 = 1 (left: 1 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n16 - 16 = 0 (left: 0 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 7 23)\n7 + 17 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 efficiently, prioritize combining the two 4s early via multiplication: 4\u00d74=16, leaving 8 and 16. Focus on using the 8 with the remaining 16; the simplest and valid move is addition: 8 + 16=24. This approach aligns with the rule to use each number exactly once and minimizes unnecessary operations. Avoid complex divisions or subtractions that do not directly contribute to reaching 24, as they can lead to invalid or overly complicated steps. After creating 16 from the 4s, combine it with 8 through addition to reach 24 without dropping or reusing numbers improperly. The key is to break down the problem into straightforward, valid steps: multiply the 4s, then add 8 to the result. This ensures all four numbers are used efficiently and correctly to reach the target.",
                    "value_summary": "Effective moves combine remaining tokens via valid operations to approach 24, maintaining token integrity without duplication or invalid results. Moves leading to impossible intermediate values or breaking token accounting are unpromising; progress should steadily approach or reach 24 logically."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 - 8 = 8 (left: 8 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n16 / 8 = 2 (left: 2 8)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 - 8 = 0 (left: 0 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 * 16 = 128 (left: 128)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n16 / 8 = 2 (left: 2 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n16 - 8 = 8 (left: 8)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 * 16 = 112 (left: 7 16)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 / 7 \u2248 2.2857 (not a valid integer, discard)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 23)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 - 7 = 9 (left: 9)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 - 16 = -9 (left: -9)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 / 16 \u2248 0.4375 (discard)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n16 / 7 \u2248 2.2857 (discard)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 23)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 4 4 8",
                            "ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 23)\n"
                            ],
                            "new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)\nAnswer: (4 * 4) + 8 = 24\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 23)\n23 (left: 23)\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 4 = 16 (left: 1 8 16)\n8 / 1 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)\nAnswer: (4 * 4) + 8 = 24\n",
                                "4 * 4 = 16 (left: 1 8 16)\n8 - 1 = 7 (left: 7 16)\n7 + 16 = 23 (left: 23)\n23 (left: 23)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 4, 4, 8 efficiently, first combine the two 4s via multiplication: 4\u00d74=16, using two numbers. Next, add 8 to 16: 16+8=24, completing the target. This approach uses each number exactly once and minimizes unnecessary steps. Avoid creating invalid intermediate numbers like 16 from non-allowed operations; instead, derive 16 directly from the two 4s. Focus on straightforward operations\u2014multiplying the pair of 4s, then adding 8\u2014to reach 24 efficiently. This method ensures a valid, minimal solution aligned with game rules.",
                    "value_summary": "Effective moves combine remaining tokens via valid operations toward 24, avoiding impossible intermediate values. Moves resulting in dead-ends or unreachable targets, like 16/8 or 2/1, are unpromising; progress should remain feasible."
                }
            ],
            "env_info": [
                {
                    "action": "4 - 1 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (4 - 1) * 8 = 24\n8 * 2 = 16 (left: 16 8)  \n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 / 4 = 2 (left: 2 1 4)\n8 + 4 = 12 (left: 12 1 2)\n12 / 1 = 12 (left: 2 12)\n12 / 12 = 1 (left: 1)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 - 4 = 4 (left: 1 4 4)\n1 - 4 = -3 (left: -3 4)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 4 = 16 (left: 8 16)\n8 * 3 = 24 (left: 3)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 24)\nAnswer: 4 * 4 + 8 = 24\n4 * 4 = 16 (left: 8 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 + 8 = 12 (left: 12 1)\n12 - 1 = 11 (left: 12)\n4 + 4 = 8 (left: 8 8 8)\n8 - 4 = 4 (left: 8 4)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 / 4 = 2 (left: 2 1 8)\n8 / 4 = 2 (left: 2 4 8)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 6 = 24 (left: 24 1)\n8 * 3 = 24 (left: 4 24)\n8 / 4 = 2 (left: 2 24)\n4 + 4 = 8 (left: 8 8 1)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 - 4 = 4 (left: 1 4 4)\n16 / 4 = 4 (left: 16)\n\n16 * 1 = 16 (left: 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 + 4 = 8 (left: 8 8)\n8 + 8 = 16 (left: 16)\n16 (no operations applicable)\n16 / 4 = 4 (left: 4 4)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 - 4 = 4 (left: 1 4 4)\n1 + 4 = 5 (left: 5 4)\n4 + 4 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 4 = 16 (left: 1 8 16)\n4 * 4 = 16 (left: 8 16)\n4 * 4 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "16 - 8 = 8 (left: 8 1)  \n8 / 1 = 8 (left: 8)\n8 + 8 = 16 (left: 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 4 = 16 (left: 8 16)\n16 - 8 = 8 (left: 4)\n4 * 4 = 16 (left: 8 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 4 = 16 (left: 8 16)\n16 + 8 = 24 (left: 8)\n4 * 4 = 16 (left: 8 1 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 / 8 = 1 (left: 1 1 16)\n1 - 1 = 0 (left: 0 16)\n16 - 8 = 8 (left: 0 8)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 / 8 = 1 (left: 1 1)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 / 4 = 2 (left: 2 1 4)\n4 - 1 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 3 4 8)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "4 * 4 = 16 (left: 8 16)\n4 + 4 = 8 (left: 8 4)\n8 - 4 = 4 (left: 8 4)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "16 / 8 = 2 (left: 2 1)\n4 * 4 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                },
                {
                    "action": "8 / 1 = 8 (left: 8 16)\n8 + 16 = 24 (left: 24)\nAnswer: (4 * 4) + 8 = 24\n",
                    "history": [
                        "4 * 4 = 16 (left: 1 8 16)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 519403,
                "prompt_tokens": 309957,
                "cost": 0.2387569
            }
        },
        {
            "idx": 912,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 - 4 = 2 (left: 2 6 9)\n",
                                "6 / 2 = 3 (left: 3 6 9)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n",
                                "4 + 3 = 7 (left: 7 6 3)\n",
                                "4 * 3 = 12 (left: 12 6 3)\n",
                                "3 + 3 = 6 (left: 6 6 4)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                60.0,
                                60.0,
                                21.001,
                                60.0,
                                40.001
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n"
                            ],
                            "new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 7 3)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 * 4 = 12 (left: 12 3)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 7 3)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n4 * 3 = 12 (left: 12 3)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 * 3 = 9 (left: 9 4)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 - 3 = 1 (left: 1 3)  \n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 * 4 = 12 (left: 12 3)  \n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 7 3)  \n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 / 3 \u2248 1.33 (discard, not integer)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 * 4 = 12 (left: 12 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 * 4 = 12 (left: 12 3)\n"
                            ],
                            "new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5 4)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 - 6 = -2 (left: -2 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 * 4 = 12 (left: 12 3)\n12 / 3 = 4 (left: 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                21.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n"
                            ],
                            "new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 / 6 = 1 (left: 1 0.6667)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 * 0.6667 \u2248 4.0002 (left: 4.0002 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 - 0.6667 \u2248 5.3333 (left: 5.3333 6)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n0.6667 + 6 \u2248 6.6667 (left: 6.6667 0.6667)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n6 / 6 = 1 (left: 1 2)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n6 - 6 = 0 (left: 0 2)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n6 + 6 = 12 (left: 12 2)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n6 * 6 = 36 (left: 36 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 / 6 = 1 (left: 1 0.6667)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 * 0.6667 \u2248 4.0002 (left: 4.0002 6)\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 * 6 = 36 (left: 4 9 36)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n",
                                "36 / 6 = 6 (left: 4 6)\n",
                                "36 / 9 = 4 (left: 6 6)\n",
                                "6 * 6 = 36 (left: 4 36)\n",
                                "36 / 4 = 9 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 9 12)\n",
                                "9 + 6 = 15 (left: 6 15)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "36 / 6 = 6 (left: 4 6)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n"
                            ],
                            "new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n6 + 6 = 12 (left: 4 12)\n",
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n",
                                "36 / 6 = 6 (left: 4 6)\n8 * 3 = 24 (left: 4 8 3)\n",
                                "36 / 6 = 6 (left: 4 6)\n12 * 2 = 24 (left: 4 2)\n",
                                "36 / 6 = 6 (left: 4 6)\n6 * 4 = 24 (left: 6 4)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 36)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n36 / 6 = 6 (left: 6 36)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n36 - 6 = 30 (left: 6 30)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n36 + 6 = 42 (left: 6 42)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n6 * 6 = 36 (left: 36)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n6 + 6 = 12 (left: 12 36)\n",
                                "9 * 4 = 36 (left: 6 6 36)\n6 - 6 = 0 (left: 0 36)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                1.002,
                                40.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n"
                            ],
                            "new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n9 - 4 = 5 (left: 5 15)\n",
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n15 - 9 = 6 (left: 4 6)\n",
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n15 / 5 = 3 (left: 3 4)\n",
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n9 / 3 = 3 (left: 4 3)\n",
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n4 * 6 = 24 (left: 24)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n6 - 4 = 2 (left: 6 2)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n6 / 2 = 3 (left: 3 4)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n6 + 4 = 10 (left: 10 6)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n6 - 6 = 0 (left: 0 4)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n4 / 4 = 1 (left: 1 6)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n4 * 6 = 24 (left: 24)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n4 * 6 = 24 (left: 24)\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n"
                            ],
                            "values": [
                                0.002,
                                0.0
                            ],
                            "select_new_ys": [
                                "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                                "36 / 6 = 6 (left: 4 6)\n18 / 3 = 6 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9, focus on valid operations that combine two numbers at a time, updating the set accurately. Avoid subtracting or dividing numbers that produce non-usable results unless they lead to intermediate targets conducive to reaching 24. For example, combining 6 and 6 to get 36 or 9 and 4 to get 36 can be useful, then dividing or subtracting to approach 24. Remember each step must use only available numbers, replacing them properly, and plan moves that build toward 24 without invalid intermediate steps.",
                    "value_summary": "In the 24 game with numbers 4, 6, 6, 9, valid moves must strictly use each number once per operation, updating the set correctly by replacing used numbers with their result. Moves that reuse or omit numbers improperly are invalid. Specifically, subtracting 6 from 9 is only valid if both are used exactly once, and the remaining set reflects the remaining numbers plus the new result. Effective moves progress systematically, maintain consistent number usage, and reduce the problem toward 24 without violating game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 - 4 = 2 (left: 2 6 9)\n",
                                "6 / 2 = 3 (left: 3 6 9)\n",
                                "9 - 6 = 3 (left: 3 4 3)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n",
                                "4 + 3 = 7 (left: 7 3)\n",
                                "3 + 3 = 6 (left: 6 7)\n",
                                "6 * 4 = 24 (left: 24)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                40.001,
                                60.0,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n",
                                "6 * 4 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n",
                                "6 * 4 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 * 4 = 12 (left: 3 12)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 * 3 = 12 (left: 3 12)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 - 3 = 1 (left: 3 1)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 - 4 = -1 (left: -1 12)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 / 4 = 0.75 (left: 0.75 12)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 / 3 \u2248 1.33 (left: 1.33 12)\n",
                                "6 * 4 = 24 (left: 24)\nAnswer: 6 * 4 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n"
                            ],
                            "new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n7 - 3 = 4 (left: 4)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n7 * 3 = 21 (left: 21)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n7 / 3 \u2248 2.333 (invalid, non-integer result)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n7 - 3 = 4 (left: 4 7)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n7 / 7 = 1 (left: 1 3)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 * 7 = 21 (left: 21)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n7 - 1 = 6 (left: 1 6)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n7 / 1 = 7 (left: 3 7)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 / 3 = 1 (left: 1 7)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                2.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n"
                            ],
                            "new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 / 5 = 2 (left: 2 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 - 5 = 5 (left: 2 5)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 - 2 = 8 (left: 8 5)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 + 5 = 15 (left: 15 2)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 + 2 = 12 (left: 12 5)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 * 2.4 = 24 (left: 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 + 14 = 24 (left: 14)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 * 2 + 4 = 24 (left: 2 4)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 * (3 - 0.5) = 24 (left: 3 0.5)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 + 14 - 0 = 24 (left: 14 0)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 * 2.4 / 1 = 24 (left: 2.4)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n4 + 3 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 + 14 * 0 = 24 (left: 14 0)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 / 5 = 2 (left: 2 10)\n",
                                "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 - 5 = 5 (left: 2 5)\n"
                            ]
                        }
                    ],
                    "summary": "Use only original numbers to form intermediate targets, such as 24, by combining pairs like 6 and 6 to get 36, then subtract or divide appropriately. Prioritize operations that reduce larger numbers toward 24, avoiding invalid steps that involve non-original totals like 36 unless formed directly from the given numbers.",
                    "value_summary": "Valid moves use each number exactly once, correctly update the set, progress toward 24 without rule violation, and avoid dead ends like remaining impossible states after initial steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 - 6 = 0 (left: 9 0)\n",
                                "6 * 6 = 36 (left: 9 36)\n",
                                "9 + 6 = 15 (left: 15 6)\n",
                                "9 - 6 = 3 (left: 3 6)\n",
                                "9 / 3 = 3 (left: 3 6)\n",
                                "36 / 6 = 6 (left: 36 9)\n",
                                "36 / 9 = 4 (left: 4 6)\n",
                                "6 + 9 = 15 (left: 15 6)\n",
                                "6 - 9 = -3 (left: -3 6)\n",
                                "9 - 6 = 3 (left: 3 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n",
                                "6 - 6 = 0 (left: 9 0)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "36 / 9 = 4 (left: 4 6)\n",
                                "6 - 6 = 0 (left: 9 0)\n"
                            ],
                            "new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n",
                                "36 / 9 = 4 (left: 4 6)\n6 - 6 = 0 (left: 4 0)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 / 6 \u2248 0.666 (left: 0.666)\n",
                                "6 - 6 = 0 (left: 9 0)\n9 - 4 = 5 (left: 5 9)\n",
                                "6 - 6 = 0 (left: 9 0)\n9 / 3 = 3 (left: 3 9)\n",
                                "6 - 6 = 0 (left: 9 0)\n6 + 6 = 12 (left: 12)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 6 = 6 (left: 6)\n",
                                "6 - 6 = 0 (left: 9 0)\n12 / 3 = 4 (left: 4 9)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n",
                                "6 - 6 = 0 (left: 9 0)\n9 * 4 = 36 (left: 36)\n",
                                "6 - 6 = 0 (left: 9 0)\n6 * 4 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n"
                            ],
                            "new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 * 6 = 36 (left: 4 36)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n"
                            ],
                            "new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n6 * 6 = 36 (left: )\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 1 = 36 (left: 6 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 3 = 12 (left: 6 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 6 = 6 (left: 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 2 = 18 (left: 6 2)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 - 12 = 24 (left: 6 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 4 = 9 (left: 6 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n6 * 4 = 24 (left: 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n6 * 4 = 24 (left: 6 6)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n4 - 1 = 3 (left: 3 4)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n4 / 1 = 4 (left: 4)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n1 + 3 = 4 (left: 4)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n3 + 1 = 4 (left: 4)\n",
                                "6 - 6 = 0 (left: 9 0)\n36 / 9 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n2 * 12 = 24 (left: 12 2) *(if 12 and 2 are available in previous steps)*\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 6 = 6 (left: 6)\n",
                                "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 1 = 36 (left: 6 6)\n"
                            ]
                        }
                    ],
                    "summary": "Combine only the original numbers to form intermediate targets, avoiding intermediate totals not present initially. Focus on pairing 6 and 6 to get 36, then use division or subtraction to approach 24. Use 9 and 4 to create 36 or manipulate values directly, ensuring all steps involve only the given numbers. Prioritize operations reducing larger numbers toward 24 without creating invalid intermediate totals.",
                    "value_summary": "For 4, 6, 6, 9, valid moves must combine two numbers using basic operations, updating the set by replacing those two with their result, and progressing toward 24. Moves that reuse nonexistent intermediate values, violate the one-time use rule, or do not reduce the problem toward 24 are unpromising. Avoid dead-end states with no solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 - 6 = 0 (left: 0 4 9)\n",
                                "6 + 6 = 12 (left: 12 4 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n",
                                "4 + 6 = 10 (left: 10 6 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n"
                            ],
                            "values": [
                                0.003,
                                21.001,
                                20.002,
                                22.0,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "4 * 6 = 24 (left: 24 9)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n",
                                "4 * 6 = 24 (left: 24 9)\n6 + 6 = 12 (left: 4 12)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 4 = 5 (left: 6 5)\n",
                                "4 * 6 = 24 (left: 24 9)\n6 * 4 = 24 (left: 9 6)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 + 15 = 24 (left: 6 15)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 - 6 = 0 (left: 0 3 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 / 6 = 1 (left: 1 3 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n12 - 4 = 8 (left: 8 3)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n12 / 4 = 3 (left: 3 3)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 9 = 15 (left: 15 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n9 - 6 = 3 (left: 3 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n9 / 3 = 3 (left: 3 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n6 - 6 = 0 (left: 0 4 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n6 + 6 = 12 (left: 12 4 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 / 3 = 3 (left: 3 4 6)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 + 9 = 13 (left: 13 6 6)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n6 - 6 = 0 (left: 9 4 0)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n6 + 6 = 12 (left: 12 9 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n9 - 4 = 5 (left: 12 5)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n9 / 3 = 3 (left: 12 3 4)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n6 * 4 = 24 (left: 9 6)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n9 + 15 = 24 (not applicable, 15 not available)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n4 * 6 = 24 (left: 9 6)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n4 * 6 = 24 (left: 9 6)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n9 + 15 = 24 (not applicable)\n",
                                "9 / 3 = 3 (left: 3 4 6 6) [Note: 3 is not in original numbers, so discard]\n6 + 6 = 12 (left: 12 3 4)\n9 * (6 - 4) = 18 (not 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                22.0,
                                1.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 / 6 = 1.5 (left: 4 6 1.5)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n6 - 6 = 0 (left: 4 0 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n6 + 6 = 12 (left: 4 12 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n6 * 6 = 36 (left: 4 36 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n4 * 6 = 24 (left: 24 6 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n4 * 6 = 24 (left: 24 6 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 - 4 = 5 (left: 5 6 4)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n6 - 4 = 2 (left: 2 9 4)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 4 6)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n6 - 6 = 0 (left: 0 5)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n6 + 6 = 12 (left: 12 5)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n0 + 9 = 9 (left: 9 4)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n12 + 9 = 21 (left: 21 4)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n12 - 9 = 3 (left: 3 4)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n9 - 4 = 5 (left: 5 12)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n12 / 6 = 2 (left: 2 5 9)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n9 - 4 = 5 (left: 5 6 6)\n4 * 6 = 24 (left: 24 5)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n",
                                "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 / 6 = 1.5 (left: 4 6 1.5)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers (4, 6, 6, 9) at each step, avoiding forming intermediate numbers like 36 outside of direct operations. Focus on pairing the two 6s through addition or subtraction to get 0 or 12, then combine with 9 or 4 to reach 24. For example, subtract 6 from 6 to get 0, then manipulate 9 and 4 to reach 24, ensuring all operations involve only the given numbers directly without creating intermediate totals from combined operations.",
                    "value_summary": "Avoid moves combining 4 and 6 directly; focus on promising operations reducing the set toward 24, avoiding dead-ends."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 12 9 4)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n",
                                "12 * 9 = 108 (left: 108 4)\n",
                                "12 / 4 = 3 (left: 3 9)\n",
                                "9 - 4 = 5 (left: 5 12)\n",
                                "9 / 4 = 2.25 (left: 2.25 12)\n",
                                "0 + 9 = 9 (left: 9 4)\n",
                                "0 + 4 = 4 (left: 9 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 12 9 4)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 12 9 4)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 / 4 = 3 (left: 3 9)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n9 - 8 = 1 (left: 1 12)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n9 / 8 = 1.125 (left: 1.125 12)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 9 = 3 (left: 3 4)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 / 9 \u2248 1.333 (left: 1.333 4)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 / 3 = 3 (left: 0 3 4)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n4 * 3 = 12 (left: 0 12)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n12 / 4 = 3 (left: 0 3)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n0 + 24 = 24 (left: 0)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n"
                            ],
                            "new_ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 - 5 = -5 (left: -5)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n5 - 0 = 5 (left: 0)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n5 * 0 = 0 (left: 0)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n5 / 0 = undefined\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 / 5 = 0\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 - 9 = -1 (left: -1)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 * 9 = 72 (left: 72)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 / 9 \u2248 0.8889 (left: 0.8889)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n9 + 8 = 17 (left: 17)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n9 * 8 = 72 (left: 72)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n9 / 8 = 1.125 (left: 1.125)\n"
                            ],
                            "values": [
                                3.0,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                3.0,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                1.002,
                                3.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n"
                            ],
                            "new_ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n9 - 4 = 5 (left: 6 6 5)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n6 + 6 = 12 (left: 12 9 4)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n12 * 2 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 12 9 4)\n12 - 4 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n17\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n9 - 4 = 5 (left: 6 6 5)\n",
                                "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n6 + 6 = 12 (left: 12 9 4)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 for 24, avoid creating intermediate totals outside the initial numbers. Focus on pairing the two 6's via addition or subtraction: 6 + 6 = 12 or 6 - 6 = 0. Use these results with 9 and 4 to reach 24. For example, subtract 6 from 6 to get 0, then multiply 9 by 4 to reach 36, which is too high\u2014so instead, try combining 12 (from 6+6) with 9 or 4 by addition or multiplication. The key is to manipulate the original numbers directly, avoiding intermediate computations that replace original numbers improperly, and aiming for combinations that produce 24 through valid operations.",
                    "value_summary": "For 4, 6, 6, 9, prioritize combining 4 and 6 cautiously, avoiding direct use that leads to invalid steps. Focus on operations that progress toward 24 without creating illegal states; avoid using combined results prematurely, ensuring each move maintains the set's integrity."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 - 6 = 0 (left: 4 9 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n",
                                "4 * 6 = 24 (left: 9 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n",
                                "9 - 6 = 3 (left: 4 3)\n",
                                "9 - 4 = 5 (left: 6 5)\n",
                                "6 * 4 = 24 (left: 9 24)\n",
                                "6 + 6 = 12 (left: 12 9)\n",
                                "12 * 2 = 24 (left: 9 12)\n",
                                "9 * 2 + 6 = 24 (left: 4 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.002,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "4 * 6 = 24 (left: 9 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n24 / 3 = 8 (left: 8 9)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n24 / 4 = 6 (left: 6 9)\n",
                                "4 * 6 = 24 (left: 9 24)\n24 - 8 = 16 (left: 16 9)\n",
                                "4 * 6 = 24 (left: 9 24)\n16 / 2 = 8 (left: 8 9)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 3 = 6 (left: 6 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n24 / 6 = 4 (left: 4 9)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 * 2 = 18 (left: 18 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n24 - 18 = 6 (left: 6 9)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 + 15 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n6 * 4 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n12 * 2 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n8 * 3 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 * 8 = 24 (left: 8)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 * 8 = 24 (left: 8)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 + 21 = 24 (left: 21)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 * 8 = 24 (left: 8)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 + 20 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 * 6 = 24 (left: 6)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n6 * 4 = 24 (left: 4)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n9 - (-15) = 24 (left: -15)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n12 * 2 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n3 * 8 = 24 (left: 8)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 + 20 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 + 20 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 + 20 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n"
                            ],
                            "values": [
                                0.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 + 20 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                                "4 * 6 = 24 (left: 9 24)\n9 / 3 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 for 24, prioritize combining the two 6's via addition or subtraction to create 12 or 0. Use these results with 4 and 9 to reach 24 through multiplication or addition. Avoid steps that leave remaining numbers impossible to combine into 24\u2014such as ending with 0, 9, and 4\u2014since they can't produce 24. Focus on direct, valid combinations that lead progressively toward 24 without invalid intermediate steps.",
                    "value_summary": "Prioritize safe, valid combinations progressing toward 24; avoid premature or invalid operations that block solutions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 - 6 = 0 (left: 4 0 9)\n",
                                "6 + 6 = 12 (left: 4 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n",
                                "4 * 6 = 24 (left: 9 24)\n",
                                "4 + 6 = 10 (left: 10 6 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                1.002,
                                40.001
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n"
                            ],
                            "new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 - 4 = 2 (left: 2 3 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 3 = 2 (left: 2 4 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n4 + 9 = 13 (left: 13 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 4 = 5 (left: 5 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 - 5 = 1 (left: 1 4 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 / 3 = 3 (left: 3 4 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n4 * 6 = 24 (left: 24)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n4 * 6 / 1 = 24 (left: 24)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n6 - 6 = 0 (left: 0 4 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n6 + 6 = 12 (left: 4 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n9 - 4 = 5 (left: 5 12)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n4 + 9 = 13 (left: 6 6 13)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n6 / 6 = 1 (left: 1 4 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n4 * 6 = 24 (left: 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n6 - 6 = 0 (left: 0 4 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n4 * 6 = 24 (left: 9)\n",
                                "9 - 4 = 5 (left: 5 6 6)\n9 - 4 = 5 (left: 5 6 6)\n"
                            ],
                            "values": [
                                60.0,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                60.0,
                                20.002,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n"
                            ],
                            "new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n6 - 6 = 0 (left: 4 9 0)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 + 9 = 13 (left: 6 6 13)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n6 + 6 = 12 (left: 4 12)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n6 - 6 = 0 (left: 4 9 0)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n6 - 6 = 0 (left: 0 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n6 + 6 = 12 (left: 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n9 + 4 = 13 (left: 13 6 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n6 * 2 = 12 (left: 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n6 + 6 = 12 (left: 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n9 - 6 = 3 (left: 3 4 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n4 * 6 = 24 (left: 24 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n9 / 3 = 3 (left: 3 4 6)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                40.001,
                                60.0,
                                60.0,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n"
                            ],
                            "new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 - 6 = 0 (left: 4 0 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 + 6 = 12 (left: 4 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n9 - 4 = 5 (left: 6 6 5)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n9 + 4 = 13 (left: 6 6 13)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 * 2 = 12 (left: 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 + 4 = 10 (left: 6 10 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 - 4 = 2 (left: 6 2 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 / 2 = 3 (left: 3 4 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n9 + 15 = 24 (left: 24)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n6 + 6 = 12 (left: 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n12 * 2 = 24 (left: 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n9 * 2 = 18 (left: 6 6 18)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n6 * 2 = 12 (left: 9 12)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n9 + 15 = 24 (left: 6 6 24)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n6 + 6 = 12 (left: 12 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n4 * 6 = 24 (left: 9 24)\n12 * 2 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 - 6 = 0 (left: 4 0 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 + 6 = 12 (left: 4 12 9)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining the two 6's early via addition or subtraction to form 12 or 0, then use these results with 4 and 9 through multiplication or addition to reach 24. Avoid steps that produce intermediate results not derivable from remaining original numbers. Ensure all operations and remaining numbers consistently reflect the original set (4, 6, 6, 9).",
                    "value_summary": "Avoid invalid or blocking operations; focus on safe progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n",
                                "6 * 4 = 24 (left: 6 9)\n",
                                "6 + 9 = 15 (left: 4 15)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n",
                                "6 - 6 = 0 (left: 4 9 0)\n",
                                "12 * 2 = 24 (left: 4 9)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 12 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 4 3 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 2)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 - 6 = 0 (left: 4 9 0)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n4 * 6 = 24 (left: 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n4 * 6 = 24 (left: 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n4 + 9 = 13 (left: 6 13)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n9 - 4 = 5 (left: 6 5)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 * 4 = 24 (left: 9)\n",
                                "9 - 6 = 3 (left: 4 3 6)\n6 + 4 = 10 (left: 9 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                21.001,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n12 * 2 = 24 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 - 6 = 3 (left: 4 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 9 = 15 (left: 4 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n4 * 6 = 24 (left: 9 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n4 + 9 = 13 (left: 6 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 + 6 = 15 (left: 4 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n6 * 4 = 24 (left: 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n12 * 2 = 24 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n6 + 4 = 10 (left: 9 10)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n9 * 2.666... = 24 (not valid with basic ops)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n6 * 4 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n4 * 6 = 24 (left: 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n9 + 15 = 24 (not possible with current numbers)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n6 * 4 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 6 9 12)\n4 * 6 = 24 (left: 9 6)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                20.002,
                                60.0,
                                41.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 - 6 = 3 (left: 4 3 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 - 6 = 3 (left: 4 3 6)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 12 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n9 * 2.666... = 24 (left: 4 6.666...)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 - 6 = 3 (left: 4 3 6)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 - 6 = 3 (left: 4 3 6)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n9 - 6 = 3 (left: 4 3 6)\n12 * 2 = 24 (left: 4 9 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 4 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 efficiently, prioritize combining the two 6s early via addition or subtraction to create useful intermediates like 12 or 0. For example, 6 + 6 = 12 or 6 - 6 = 0. Use these results with 4 and 9 through multiplication or addition to target 24. Avoid operations that produce intermediate results not conducive to reaching 24, such as dividing by leftover numbers or creating unreachable totals. Since subtracting 9 - 6 yields 3 (left: 4, 3, 6), which cannot lead to 24, focus on combining 6 + 6 = 12 and then multiplying by 2 or adding 4 to 12 to reach 24. Discard sequences that can't produce 24 from the remaining numbers.",
                    "value_summary": "Prioritize safe, achievable, and non-blocking operations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 6 = 1 (left: 4 9 1)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 13 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9 6 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n6 - 6 = 0 (left: 5 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n6 + 6 = 12 (left: 5 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n6 * 6 = 36 (left: 5 36)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n6 / 6 = 1 (left: 5 1)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 + 6 = 11 (left: 11 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 - 6 = -1 (left: -1 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 30 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 / 6 \u2248 0.833 (left: 0.833 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n6 - 6 = 0 (left: 3 4 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n6 + 6 = 12 (left: 3 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 + 6 = 10 (left: 3 10 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n3 + 6 = 9 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n6 * 4 = 24 (left: 3 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                60.0,
                                60.0,
                                21.001,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 30 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 30 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 30 6)\n30 - 6 = 24 (left: 30)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n6 - 6 = 0 (left: 9 4 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n6 / 6 = 1 (left: 9 4 1)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n4 * 6 = 24 (left: 9 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n9 - 6 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n9 / 3 = 3 (left: 4 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n4 * 6 = 24 (left: 9 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 30 6)\n30 - 6 = 24 (left: 30)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6 6)\n4 * 6 = 24 (left: 3 24)\n6 - 6 = 0 (left: 9 4 0)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 efficiently, prioritize early combination of the two 6s\u2014either via addition (6 + 6 = 12) or subtraction (6 - 6 = 0)\u2014to generate versatile intermediates like 12 or 0. Using these, aim to reach 24 by multiplying or adding with remaining numbers. For example, after obtaining 12, multiplying by 2 (via 4 or 6) or combining with 9 to reach 24 is strategic. Avoid operations that produce unreachable totals or discard useful numbers prematurely. When considering combining 4 and 9, note that 4 \u00d7 9 = 36 is legal if both are available; while it doesn't produce 24 directly, it can serve as an intermediate for further operations. Focus on maintaining flexibility by not prematurely eliminating numbers. Combining the two 6s early creates pathways to 12, which, when multiplied by 2 or combined with other numbers, can lead to 24. Always verify that each step uses only current numbers and adheres to game rules, ensuring legality. This targeted approach\u2014leveraging early combination of 6s, strategic multiplication, and cautious use of intermediates\u2014maximizes the chances of efficiently reaching 24.",
                    "value_summary": "Avoid blocked, impossible, or non-progressive move sequences."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 2 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 12 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n6 + 6 = 12 (left: 4 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n6 + 6 = 12 (left: 4 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 * 2 = 18 (left: 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 + 6 = 15 (left: 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 - 6 = 3 (left: 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 / 3 = 3 (left: 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 + 4 = 13 (left: 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 - 4 = 5 (left: 5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n6 + 6 = 12 (left: 4 12)\n6 + 6 = 12 (left: 4 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 * 2 = 18 (left: 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 + 6 = 15 (left: 15)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 4, 6, 6, 9, focus on early combination of the two 6s to create flexible intermediates\u2014either via addition (6 + 6 = 12) or subtraction (6 - 6 = 0)\u2014which open pathways to 24 through multiplication or further operations. For instance, combining 6 + 6 to get 12 allows multiplying by 2 (using 4 or 6) to reach 24. Alternatively, subtracting gives 0, which can be used with 9 or 4 to generate useful totals. When involving 9, note that 9 - 6 = 3 and 9 - 4 = 5 are promising intermediates; these can be multiplied or added with remaining numbers to approach 24. Avoid operations that produce totals too large or too small to reach 24 efficiently. For example, multiplying 4 and 9 yields 36, which can be manipulated with division to reach 24, but only if intermediate steps are valid and legal. Use the initial step of combining the two 6s to create a 12, then think about multiplying 12 by 2 (via 4 or 6) for a direct route to 24. Always verify that each operation uses only current numbers without reusing or dropping numbers prematurely, ensuring legality. By prioritizing early pairing of the 6s, leveraging their sum or difference, and then applying strategic multiplication or addition, the puzzle becomes more manageable and solvable within minimal steps.",
                    "value_summary": "Prioritize moves that use all current numbers without dropping or repeating unused values; avoid steps resulting in invalid or impossible configurations. Valid progress depends on legal combinations, ensuring each move transforms the set toward 24 without violating rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 2 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 - 4 = 8 (left: 8 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 4 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 * 2 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n12 / 0 = undefined\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n12 / 1 = 12 (if 1 available)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n4 + 9 = 13 (left: 13 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n4 * 6 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 9 = 15 (left: 15 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n6 - 6 = 0 (left: 0 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n12 / 6 = 2 (left: 2 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n12 / 12 = 1 (left: 1 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 2 = 12 (left: 9 12)\n9 - 0 = 9 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n12 + 9 = 21 (left: 12 21)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n12 - 9 = 3 (left: 3 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n12 * 2 = 24 (left: 2 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n9 + 15 = 24 (left: 12 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n9 * 2 + 6 = 24 (left: 6 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n9 * 2 + 6 = 24 (left: 6 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n9 * 3 - 3 = 24 (left: 3 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n6 - 6 = 0 (left: 3 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n6 + 6 = 12 (left: 3 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n3 * 6 = 18 (left: 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n3 + 6 = 9 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n3 - 6 = -3 (left: -3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 6)\n3 / 6 = 0.5 (left: 0.5)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n12 + 9 = 21 (left: 12 21)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n12 - 9 = 3 (left: 3 12)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 efficiently, prioritize early pairing of the two 6s by combining them via addition (6 + 6 = 12) or subtraction (6 - 6 = 0). Using 6 + 6 = 12 creates a flexible intermediate to multiply by 2 (via 4 or 6) for 24 directly. Alternatively, subtracting yields 0, which can be combined with 9 or 4 to produce useful totals (e.g., 9 - 0 = 9). When involving 9, note that 9 - 6 = 3 and 9 - 4 = 5; these can be multiplied or added to remaining numbers to approach 24. Avoid steps that produce totals too distant from 24 or involve illegal operations (e.g., dividing by zero). Recognize that combining 6s early to create 12 simplifies subsequent multiplication. From the resulting intermediates, focus on multiplying or adding to reach 24 efficiently, ensuring each operation uses available numbers without reuse or invalid steps. This targeted approach reduces complexity and guides toward a solution.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, prioritize moves that utilize all current numbers without dropping or reusing unused values, ensuring each step remains legal. Avoid steps that produce invalid configurations, such as subtracting identical numbers to create zero unless it leads toward 24. After each move, verify whether the remaining numbers can mathematically reach 24 through valid operations. Recognize that some configurations, like 4, 9, 0 after using both 6s, limit progress; thus, focus on moves that preserve options for achieving 24. Valid steps maintain proper number usage, supporting continued, feasible solutions toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 9 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 3 = 6 (left: 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n12 * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n6 - 6 = 0 (left: 0 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 / 4 = 3 (left: 3 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 - 9 = 0 (left: 0 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n6 / 2 = 3 (left: 3 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n6 * 4 = 24 (left: 6 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n12 * 2 = 24 (left: 6 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n12 + 12 = 24 (left: 6 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n(using 6 + 6 = 12, then 12 * 2 = 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n(using 6 + 6 = 12, then 12 * 2 = 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n6 - 6 = 0 (left: 0 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n12 / 2 = 6 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n9 - 6 = 3 (left: 3 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n12 - 9 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n9 + 6 = 15 (left: 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n6 * 2 = 12 (left: 12 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n6 * 4 = 24 (left: 6 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n12 * 2 = 24 (left: 6 6 9)\n"
                            ]
                        }
                    ],
                    "summary": "For 4, 6, 6, 9, prioritize pairing the two 6s early, either by addition (6 + 6 = 12) or subtraction (6 - 6 = 0). Using 6 + 6 = 12 simplifies subsequent steps, especially for multiplying by 2 or 4 to reach 24. Avoid invalid operations like reusing numbers improperly or combining non-existent intermediate totals. After creating 12, explore multiplying it by 2 (using 4 or remaining 6) to reach 24 efficiently. Additionally, consider subtracting 9 from 12 (or 12 from 9) to generate 3 or 5, then combine these with other numbers to reach 24. Focus on operations that directly or indirectly lead to 24, minimizing unnecessary steps.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, effective evaluation prioritizes moves that use all current numbers legally without reuse or invalid operations. Moves combining 6 + 6 = 12 are valid, but subsequent steps must involve the remaining numbers (e.g., 9 and 12) to progress toward 24. Avoid steps that produce impossible configurations or skip necessary intermediate steps, such as directly jumping to 24 without valid intermediate operations. After each move, verify that the remaining numbers can mathematically reach 24 through valid, permissible operations\u2014addition, subtraction, multiplication, or division. Moves that leave impossible or inconsistent configurations, like 9 and 12 without a clear path to 24, are unpromising. Consistent, stepwise validation ensures viable solutions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 4 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 + 20 = 24 (left: 20 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n9 - 6 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 / 6 = 1 (left: 4 1)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n4 * 6 = 24 (left: 9 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n9 / 3 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n4 + 9 = 13 (left: 6 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n9 - 4 = 5 (left: 6 5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n12 * 2 = 24 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n12 * 2 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n(6 + 6) * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n9 / 9 = 1 (left: 1 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n24 / 1 = 24 (left: )\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 4 9 6)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 4, 6, 6, 9 for 24, focus on pairing the two 6s early, as 6 + 6 = 12 simplifies subsequent operations. Use this 12 as a central pivot. Next, consider multiplying 12 by 2\u2014achieved by combining the remaining 4 and 9 to create a 2 (via 4 / 2, but 2 isn't directly available), or by forming 2 through other means, though in this case, direct division isn't straightforward. Alternatively, note that 4 + 6 = 10 and 9 - 6 = 3, which can be combined with other results to reach 24, but these paths tend to be more convoluted. A more direct approach is: after obtaining 12 from 6 + 6, multiply it by 2\u2014if you can get 2 from 4 / 2, but since 2 isn't in the set, focus instead on multiplying 12 by 2 indirectly. Recognize that 12 \u00d7 2 = 24 is the goal, so seek to produce 2 from the remaining numbers\u2014by dividing 4 by 2 if possible, but 2 isn't in the initial set. Instead, consider combining 4 and 9: 4 + 9 = 13 or 9 - 4 = 5, which don't directly help. Therefore, the best strategy is to focus on pairing 6 + 6 = 12, then multiply 12 by 2 (which can be obtained as 4 / 2 if 2 were available). Since it's not, another route is to use 9 - 4 = 5, then combine with 6 to reach 24 via multiplication. Overall, prioritize creating 12 from 6 + 6, then find a way to double it or combine with other results to reach 24, minimizing unnecessary operations and ensuring each step uses available numbers properly.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, effective evaluation hinges on legal, valid operations that use all current numbers without reuse or omission. Moves should only combine available numbers to produce intermediate results that remain within the set of feasible steps toward 24. Combining numbers like 6 + 6 = 12 is promising, but subsequent moves must incorporate remaining numbers (e.g., 9) logically, avoiding shortcuts or invalid jumps directly to 24. Each step must preserve the integrity of the current set, ensuring remaining numbers can still mathematically reach 24 through permissible operations. Moves that create impossible configurations\u2014such as introducing external values not present or dropping numbers without valid operations\u2014are unpromising. Consistent, stepwise validation ensures the process remains logical and directed toward a successful solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 3 = 12 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 2 = 6 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 + 6 = 10 (left: 9 10)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n12 * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n6 * 4 = 24 (left: 9 4)  \n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n4 / 2 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n9 / 3 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n6 / 3 = 2 (left: 9 2)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n6 * 4 = 24 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n9 - 6 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n4 / 2 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n4 + 2 = 6 (left: 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n9 / 3 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n6 / 3 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n9 / 3 = 3 (left: 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n6 * 4 = 24 (left: 9 6 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n12 / 6 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n4 * 3 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n9 - 6 = 3 (left: 3 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n12 / 4 = 3 (left: 9 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 9 12)\n4 * 3 = 12 (left: 9 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n6 + 6 = 12 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n6 * 4 = 24 (left: 9 4)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 for 24, prioritize combining the two 6s early with addition: 6 + 6 = 12. This simplifies the problem by creating a key intermediate. Next, aim to produce 2 by dividing one of the remaining numbers, ideally 4 / 2, but since 2 isn't directly available, consider alternative pairings. Recognize that forming 12 from 6 + 6 allows multiplying by 2 to reach 24; thus, focus on generating 2 from the remaining numbers\u2014preferably by dividing 4 by 2 if possible. Since 2 isn't initially present, look for ways to create it: for example, if you can manipulate 9 and 4 to yield 1 or 2 via subtraction or division. Always ensure each operation uses only the current set of numbers without reusing or dropping them arbitrarily. Ultimately, the key step is forming 12 from the pair of 6s and then creating a 2 to multiply with 12, leading directly to 24.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, evaluating moves requires ensuring operations are legal, valid, and maintain the potential to reach 24. Moves combining available numbers must produce intermediate results within feasible bounds, avoiding shortcuts that skip necessary calculations. Combining two numbers should leave remaining numbers capable of reaching 24 through legitimate operations. Moves that produce invalid results, reuse numbers improperly, or eliminate necessary components prematurely are unpromising. Specifically, forming intermediate values like 12 from 6 + 6 is promising, but subsequent steps must incorporate remaining numbers (such as 4 or 9) logically. An illegal move, such as an operation not supported by the current set or skipping necessary steps, renders the path invalid. Overall, each move must preserve the logical structure toward 24, ensuring all intermediate results and remaining numbers stay consistent with valid game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 3 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 3 = 4 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 3 = 6 (left: 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n```\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n9 - 4 = 5 (left: 6 5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n9 - 6 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 / 2 = 2 (left: 3 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 / 3 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n9 - 2 = 7 (left: 7)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n9 - 7 = 2 (left: 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n4 * 3 = 12 (left: 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n4 / 2 = 2 (left: 6 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n9 - 4 = 5 (left: 5 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n9 - 6 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n9 / 3 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 12)\n4 / 2 = 2 (left: 6 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 2 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n9 - 5 = 4 (left: 4 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 3 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n6 / 3 = 2 (left: 2 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n6 - 2 = 4 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n9 / 3 = 3 (left: 4 3 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n9 - 3 = 6 (left: 6 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n12 / 4 = 3 (left: 3 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n12 / 3 = 4 (left: 4 6 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n6 / 3 = 2 (left: 2 12 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n4 * 3 = 12 (left: 6 9 12)\n6 - 4 = 2 (left: 2 12 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n4 / 2 = 2 (left: 2 6 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 for 24, focus on combining the two 6s early via addition: 6 + 6 = 12. This creates a useful intermediate to reach 24 by multiplying by 2, so aim to generate 2 from the remaining numbers. To do this effectively, consider dividing 4 by 2 or manipulating 9 and 4 to produce 1 or 2, such as using 9 - 4 = 5 and then dividing by 5, but since 5 isn't helpful here, prioritize operations that yield 2 directly. Avoid invalid steps like dividing or combining numbers in ways that reuse or omit elements improperly. For example, from the initial set, the best approach is to first create 12 from the two 6s, then find a way to get 2\u2014either from dividing 4 by 2 or manipulating 9 and 4\u2014to multiply with 12 and reach 24. Always ensure operations involve only the current numbers without reusing or dropping any, and check that all intermediate steps are valid with the original set.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, an effective evaluation model emphasizes legality, logical progression, and preservation of potential to reach 24. Moves combining numbers must be supported by valid operations, avoid reuse errors, and produce intermediate results that keep all remaining numbers within feasible bounds. Combining 6 + 6 to form 12 is promising, but subsequent steps must incorporate other numbers (like 4 or 9) logically without skipping necessary calculations. Moves that attempt invalid operations, reuse numbers improperly, or produce results outside manageable ranges are unpromising. Each step should maintain a clear path toward 24, ensuring that intermediate results and remaining numbers stay consistent with game rules. Essentially, progress hinges on valid, strategic combinations that preserve the puzzle\u2019s logical structure toward reaching 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 5 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 6 = 2 (left: 2 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 3 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 9 = 15 (left: 15 4 12)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n6 + 6 = 12 (left: 12 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n6 * 2 = 12 (not applicable, since 2 isn't available)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 / 6 = 2 (left: 2 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n9 - 4 = 5 (left: 5 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n9 / 3 = 3 (not applicable, 3 not in set)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n9 - 6 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n4 * 6 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n9 / 3 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 6 = 3 (left: 3 4 12)\n4 * 3 = 12 (left: 6 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n6 - 6 = 0 (left: 4 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n4 + 6 = 10 (left: 10 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n4 - 6 = -2 (left: -2 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n6 + 6 = 12 (left: 12 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n6 - 6 = 0 (left: 0 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n4 * 9 = 36 (left: 36 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n4 + 9 = 13 (left: 6 6 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n9 - 4 = 5 (left: 5 6 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n4 / 2 = 2 (left: 2 6 12)\n9 / 3. = 3 (left: 3 4 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n6 - 6 = 0 (left: 4 0)\n"
                            ]
                        }
                    ],
                    "summary": "To effectively solve 4, 6, 6, 9 for 24, focus on creating key intermediate values using the original numbers without introducing invalid operations or extraneous numbers. Prioritize combining the two 6s early by adding: 6 + 6 = 12. This simplifies the problem to manipulating 12 with the remaining 4 and 9. Next, seek to generate a 2, a common factor needed to reach 24 via multiplication. Since dividing 4 by 2 is ideal, aim to produce 2 directly: 4 \u00f7 2 = 2, but since 2 isn't among the original numbers, look for alternative pathways. Consider manipulating 9 and 4 to generate 1 or 2 through subtraction or division: 9 - 4 = 5 (not helpful), or 9 - 6 = 3, but that doesn't yield 2. Alternatively, see if combining 9 and 6 can produce 3, then dividing 6 by 3 yields 2, but that requires using 6 and 9 in a way that doesn't involve reusing numbers improperly. Remember to use each number exactly once and only valid operations. For example, one valid approach is: (6 + 6) * 2 = 24, but since 2 isn't in the original set, this isn't permitted unless you generate 2 from the existing numbers. Overall, focus on pairing the 6s first, then manipulating 4 and 9 to produce 2 or 1, facilitating multiplication to reach 24, ensuring each step strictly uses the provided numbers once.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, effective evaluation hinges on move legality, accurate use of initial numbers, and logical progress toward 24. Moves must involve only the original numbers, with operations that produce valid intermediate results within feasible bounds. Combining numbers should preserve potential to reach 24 without invalid reuse or impossible calculations. Any step that introduces non-existent numbers or violates game rules is unpromising. Progress depends on strategic, valid operations that maintain a clear, rule-compliant pathway toward the target."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 * 6 = 54 (left: 4 54)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 / 6 \u2248 1.5 (left: 4 1.5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n6 + 4 = 10 (left: 9 10)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n6 - 4 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n4 + 9 = 13 (left: 6 13)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n4 - 9 = -5 (left: 6 -5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n4 * 9 = 36 (left: 6 36)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n6 * 4 = 24 (left: 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n6 * 15 = 90 (left: 4 90)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n4 * 6 = 24 (left: 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n15 - 6 = 9 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n15 / 3 = 5 (left: 4 5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n4 * 6 = 24 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n6 * 4 = 24 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n6 * 4 = 24 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 - 6 = 3 (left: 4 3)\n4 * 6 = 24 (left: 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n6 * 4 = 24 (left: 6 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n6 * 15 = 90 (left: 4 90)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 6, 6, 9 for 24, prioritize pairing the two 6s early: (6 + 6) = 12 or (6 \u00d7 6) = 36. Using the first, combine 12 with remaining numbers to reach 24, for example, 12 \u00d7 2, but 2 isn't directly available; so, aim to generate 2 by dividing 4 by 2 (but 2 isn't in the set). Alternatively, use the second 6 to create a multiple: 6 \u00d7 4 = 24 directly, which is valid and consumes 4 and one 6, leaving 6 and 9. Since 6 \u00d7 4 = 24 uses only 4 and 6, the remaining 6 and 9 can be disregarded. The key is to recognize that 6 \u00d7 4 = 24 is the simplest, valid solution. Focus on immediate pairings to generate 24 efficiently.",
                    "value_summary": "In the 4, 6, 6, 9 puzzle, effective move evaluation prioritizes strict adherence to the initial number set and valid operations. Moves are promising when they use only available numbers without reuse or introducing invalid values, progressing logically toward 24. Valid steps involve combining two numbers with permissible operations, then updating the remaining set accordingly. Moves that employ numbers not present in the previous step, produce inconsistent results, or violate game rules are unpromising. For example, using a number outside the current set or generating intermediate results that cannot be derived from the original numbers indicates a flawed step. Consistently verifying that each operation maintains a feasible pathway toward 24 ensures strategic, rule-compliant progress. Ultimately, promising moves preserve the integrity of the initial set and guide the solution through valid, logical steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 + 12 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 * 2.666... = 24 (not valid as 2.666... is not an integer)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 15 = 24 (not valid, 15 not in remaining)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 15 = 24 (not valid)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 * 2.666... = not valid\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 6 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n6 + 6 = 12 (left: 12 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n12 * 2 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n36 / 3 = 12 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n9 * (6 / 6) = 9 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n6 + 6 = 12 (left: 12 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n6 - 6 = 0 (left: 0 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n6 * 6 = 36 (left: 36 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9 6)\n6 * 4 = 24 (left: 9)\n6 / 6 = 1 (left: 1 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n6 + 6 = 12 (left: 12 9)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 4, 6, 6, 9 for 24, prioritize pairing the two 6s early, as they offer straightforward options: (6 + 6) = 12 or (6 \u00d7 6) = 36. The simplest immediate solution is recognizing that 6 \u00d7 4 = 24, which directly produces 24 using one 6 and the 4, leaving the remaining 6 and 9 unused. This provides a quick, valid path without complex steps. Alternatively, after using 6 \u00d7 4 = 24, attempting to incorporate 9 can be explored, but it typically complicates the process without necessity. It\u2019s crucial to ensure each operation uses only available numbers and to avoid reusing numbers once they've been combined. Focus on creating 24 with minimal steps\u2014either by multiplying 6 and 4 or combining the two 6s to form 12 and then using division or addition/subtraction with 9 to reach 24. In summary, the key is to identify immediate pairings that generate 24 efficiently, prioritize operations involving 6 and 4, and verify each step\u2019s legality based on remaining numbers.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, effective move evaluation hinges on strict adherence to available numbers and valid operations that progress toward 24. Moves are promising when they combine two numbers using permissible operations without reusing or introducing values outside the current set. After each step, verify that the remaining numbers accurately reflect the original set minus the used ones; for example, combining 6 and 4 into 24 leaves only 9, which remains unused. Moves that utilize nonexistent numbers, produce invalid intermediate results, or alter the number set improperly are unpromising. Consistently tracking the remaining numbers ensures logical, rule-compliant progress. Ultimately, promising steps preserve the integrity of the initial set and systematically steer toward 24 through valid, strategic operations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 - 4 = 2 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 * 9 = 36 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 + 9 = 13 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 / 2 = 3 (left: 4 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 / 3 = 3 (left: 4 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n4 + 3 = 7 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 3)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n6 + 4 = 10 (left: 9 10)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n6 - 4 = 2 (left: 9 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n4 + 6 = 10 (left: 9 10)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n4 - 6 = -2 (left: 9 -2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n4 * 6 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n9 * 4 = 36 (left: 9 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n9 + 4 = 13 (left: 13 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n9 - 4 = 5 (left: 5 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n6 * 4 = 24 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n```\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 4 = 10 (left: 9)\n6 * 4 = 24 (left: 9)\n9 (no operation possible with a single number)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n6 * 4 = 24 (left: 9)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on immediate, straightforward pairings involving 6 and 4, such as 6\u00d74=24, which solves the puzzle directly. Avoid reusing or re-combining numbers after they've been used; each step must use only remaining numbers. Prioritize operations that produce 24 quickly\u2014multiplying 6 and 4 or combining the two 6s to make 12 and then adjusting with 9 via division or addition. Minimize complex steps, verify each operation's legality, and ensure no number is reused improperly. This targeted approach efficiently leads to the solution.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, promising moves strictly involve combining available numbers using valid operations without inventing or introducing numbers outside the current set. Each step must accurately reflect the remaining numbers after combining two values, ensuring no illegitimate creation of intermediate results (e.g., forming 36 from nowhere). Moves that reuse used numbers, generate invalid intermediates, or rely on non-existent values are unpromising. Effective strategies track the evolving set precisely, preserving the initial numbers\u2019 integrity, and systematically progress toward 24 by valid, rule-compliant combinations. Validity hinges on legitimacy of each operation and faithful update of remaining numbers."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 / 4 = 3 (left: 3 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n12 - 9 = 3 (left: 3 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 6 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n24 / 6 = 4 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n36 / 6 = 6 (left: 9)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 9 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 3 = 6 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 * 2 = 24 (left: 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 - 6 = 6 (left: 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 / 6 = 2 (left: 2)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n6 * 4 = 24 (left: 4)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n6 + 6 = 12 (left: 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n6 - 6 = 0 (left: 0)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n9 + 6 = 15 (left: 15)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n9 / 3 = 3 (left: 3)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n12 - 5 = 7 (left: 7 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n12 / 5 = 2.4 (left: 2.4 5)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n5 - 12 = -7 (left: -7 12)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 - 4 = 5 (left: 12 5)\n5 / 12 \u2248 0.4167 (left: 0.4167 12)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 - 6 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 6 6 9",
                            "ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 - 6 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 / 6 = 1 (left: 1 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 + 6 = 12 (left: 12 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 * 6 = 36 (left: 36 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 - 6 = 0 (left: 0 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 - 6 = 6 (left: 6)\n6 * 4 = 24 (left: 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 / 6 = 1 (left: 1 18)\n",
                                "6 + 6 = 12 (left: 4 9 12)\n9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 + 6 = 12 (left: 12 18)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 4, 6, 6, 9, prioritize straightforward pairings that directly produce 24, notably 6\u00d74=24, which completes the puzzle immediately. After using 6 and 4, remain mindful that each operation must involve only unused numbers\u2014do not reuse or re-combine numbers already used unless explicitly restoring them. When combining the two 6s, consider 6+6=12 or 6\u00d76=36, then adjust with 9 through addition, subtraction, multiplication, or division to reach 24. Avoid complex multi-step operations that reuse intermediate results improperly. Always verify each step's legality: ensure each operation uses current remaining numbers, and do not drop or reuse numbers outside the current operation. Applying these targeted, conservative steps ensures quick, valid solutions without unnecessary complexity.",
                    "value_summary": "For the 4, 6, 6, 9 puzzle, promising moves involve combining two numbers using valid operations without creating or assuming values outside the current set. Each step must accurately reflect the remaining numbers after the operation, maintaining the integrity of initial values. Moves that reuse used numbers, generate invalid intermediates, or introduce new values violate rules and are unpromising. Effective strategies systematically reduce the set toward 24 through legitimate operations, ensuring each step respects the current remaining numbers. Valid moves progress logically, while invalid moves attempt to reuse or generate unavailable values, hindering solution development."
                }
            ],
            "env_info": [
                {
                    "action": "9 - 6 = 3 (left: 3 4 3)\n3 + 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 / 6 = 1 (left: 1 0.6667)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "36 / 6 = 6 (left: 4 6)\n9 + 15 = 24 (left: 4 9 15)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "9 / 3 = 3 (left: 3 4 3)\n3 + 4 = 7 (left: 3 7)\n3 + 7 = 10 (left: 10)\n10 / 5 = 2 (left: 2 10)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "36 / 9 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (6 * 6) / 9 = 4\n36 / 6 = 6 (left: 6)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n4 * 6 = 24 (left: 24 9)\n9 - 6 = 3 (left: 4 6 3)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 - 6 = 0 (left: 0 9 4)\n9 - 4 = 5 (left: 0 5)\n0 + 5 = 5 (left: 5)\n9 - 4 = 5 (left: 6 6 5)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "4 * 6 = 24 (left: 9 24)\n9 - 5 = 4 (left: 4 24)\n4 + 20 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "9 - 6 = 3 (left: 4 3 6)\n9 - 6 = 3 (left: 4 3 3)\n9 / 3 = 3 (left: 4 3 6)\n6 - 6 = 0 (left: 4 0 9)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 + 6 = 12 (left: 4 9 12)\n3 * 8 = 24 (left: 4 8 3)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "9 - 4 = 5 (left: 5 6 6)\n5 * 6 = 30 (left: 30 6)\n30 - 6 = 24 (left: 30)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 - 6 = 0 (left: 4 9 0)\n4 * 6 = 24 (left: 9)\n9 * 2 = 18 (left: 18)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 + 6 = 12 (left: 9 12)\n6 + 6 = 12 (left: 9 12)\n12 + 9 = 21 (left: 12 21)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "12 * 2 = 24 (left: 9)\n9 * 2.666... = 24 (left: 6 8 24)\n6 * 4 = 24 (left: 6 9 4)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "12 / 6 = 2 (left: 4 9 6)\n6 * 4 = 24 (left: 9 24)\n\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "9 / 3 = 3 (left: 3 4 6)\n4 / 2 = 2 (left: 2 6 9)\n6 + 6 = 12 (left: 9 12)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 / 3 = 2 (left: 2 12)\n6 + 6 = 12 (left: 4 9 12)\n6 + 6 = 12 (left: 4 9 12)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 * 4 = 24 (left: 6 12)\n12 - 9 = 3 (left: 3 4 6)\n6 + 6 = 12 (left: 4 12)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 * 4 = 24 (left: 9)\n9 + 6 = 15 (left: 4 6 15)\n6 * 4 = 24 (left: 6 15)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "36 / 6 = 6 (left: 4 9 6)\n6 * 4 = 24 (left: 9)\n6 * 4 = 24 (left: 6 9)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "6 * 4 = 24 (left: 9)\n9 (no operations possible with only one number)\n6 * 4 = 24 (left: 9)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                },
                {
                    "action": "9 + 3 = 12 (left: 12)\n12 + 6 = 18 (left: 6 18)\n6 / 6 = 1 (left: 1 18)\n",
                    "history": [
                        "6 + 6 = 12 (left: 4 9 12)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 947264,
                "prompt_tokens": 543991,
                "cost": 0.4333047
            }
        },
        {
            "idx": 911,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 8 = 5 (left: 1 5 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "13 / 1 = 13 (left: 13 8 2)\n",
                                "8 + 13 = 21 (left: 21 2)\n",
                                "8 - 13 = -5 (left: -5 2)\n",
                                "8 * 13 = 104 (left: 104 2)\n",
                                "13 - 2 = 11 (left: 11 8)\n",
                                "13 + 2 = 15 (left: 15 8)\n",
                                "8 + 2 = 10 (left: 10 13)\n",
                                "8 - 2 = 6 (left: 6 13)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 - 8 = 4 (left: 4 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 2 = 6 (left: 6 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 2 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 - 4 = 8 (left: 8 4)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 4 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 4 = 2 (left: 12 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n1 + 5 = 6 (left: 6 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n1 * 5 = 5 (left: 5 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n5 - 1 = 4 (left: 4 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n2 + 1 = 3 (left: 3 5)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n2 * 1 = 2 (left: 2 5)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n5 / 5 = 1 (left: 1 2)\n",
                                "13 - 8 = 5 (left: 1 5 2)\n5 - 2 = 3 (left: 1 3)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 4 = 2 (left: 12 2)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 4 = 2 (left: 12 2)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n8 / 3 \u2248 2.666... (discard, non-integer)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 4 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 4 = 2 (left: 12 2)\n12 - 2 = 10 (left: 10)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 4 = 2 (left: 12 2)\n12 + 2 = 14 (left: 14)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * 8 = 24\n"
                            ],
                            "values": [
                                0,
                                0.001
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * 8 = 24\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n",
                                "8 / 2 = 4 (left: 12 4)  \n",
                                "12 + 4 = 16 (left: 16)  \n",
                                "16 + 8 = 24 (left: )\n"
                            ],
                            "values": [
                                20.002,
                                60.0,
                                1.002,
                                0.0
                            ],
                            "select_new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 / 2 = 4 (left: 12 4)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n"
                            ],
                            "new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n12 - 4 = 8 (left: 8 12)\n",
                                "8 / 2 = 4 (left: 12 4)  \n12 / 4 = 3 (left: 3 12)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 * 3 = 12 (left: 12 3)\n",
                                "8 / 2 = 4 (left: 12 4)  \n3 * 4 = 12 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 - 8 = 4 (left: 4 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n",
                                "13 - 1 = 12 (left: 12 8)  \n8 / 4 = 2 (left: 2 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n8 - 4 = 4 (left: 4 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 - 8 = 4 (left: 4 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n"
                            ],
                            "values": [
                                1.002,
                                0.003,
                                60.0,
                                20.002,
                                20.002,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 / 4 = 4 (left: 16 4)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 - 4 = 12 (left: 16 12)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 - 16 = -12 (left: 4 16)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 + 16 = 20 (left: 4 20)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 3)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n8 - 4 = 4 (left: 3 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 / 4 = 3 (left: 3 8)\n8 / 4 = 2 (left: 3 2)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                21.001,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 + 16 = 20 (left: 4 20)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 + 16 = 20 (left: 4 20)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n"
                            ],
                            "new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 + 16 = 20 (left: 4 20)\n20 / 5 = 4 (left: 4 4)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n20 - 16 = 4 (left: 4)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n20 / 5 = 4 (left: 4)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n16 + 8 = 24 (left: 8 13)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n13 + 11 = 24 (left: 8 11)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n8 * 3 = 24 (left: 3 13)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n13 - 8 = 5 (left: 5 1)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n8 / 2 = 4 (left: 13 4)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 + 16 = 20 (left: 4 20)\n20 / 5 = 4 (left: 4 4)\n",
                                "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n16 + 4 = 20 (left: 16 20)\n20 - 16 = 4 (left: 4)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 2, 8, 13 in 24, focus only on using the original numbers at each step without creating new intermediate values. Avoid subtracting or combining numbers in a way that produces results not in the initial set, as this invalidates the move. Prioritize operations that combine the larger numbers early, such as 8\u00d72=16, and then use 13 and 1 to reach 24, for example, (13 - 1) + 8 = 20; then, find a way to reach 4 with remaining numbers, like dividing 8 by 2.",
                    "value_summary": "Avoid moves leading to impossible or reduced, non-promising intermediate states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n",
                                "8 + 12 = 20 (left: 20)  \n",
                                "20 + 4 = 24 (left: 4)  \n"
                            ],
                            "values": [
                                1.002,
                                3.0,
                                1.002
                            ],
                            "select_new_ys": [
                                "8 + 12 = 20 (left: 20)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 + 12 = 20 (left: 20)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n"
                            ],
                            "new_ys": [
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n",
                                "8 + 12 = 20 (left: 20)  \n12 + 12 = 24 (left: 12 12)\n",
                                "8 + 12 = 20 (left: 20)  \n15 + 9 = 24 (left: 15 9)\n",
                                "8 + 12 = 20 (left: 20)  \n18 + 6 = 24 (left: 18 6)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n",
                                "13 - 1 = 12 (left: 12 8)  \n13 + 11 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8)  \n13 * 2 = 26 (left: 26)\n",
                                "13 - 1 = 12 (left: 12 8)  \n(remaining numbers depend on previous steps)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                3.0,
                                41.0,
                                1.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n"
                            ],
                            "new_ys": [
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n20 + 4 = 24 (left: )\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n20 + 13 = 33 (left: 13)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n20 - 4 = 16 (left: 13 16)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n13 + 11 = 24 (left: 11)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n20 + 8 = 28 (left: 8 13)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n13 + 8 = 21 (left: 8 21)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n20 + 1 = 21 (left: 1 13)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n13 + 1 = 14 (left: 8 14)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n8 + 16 = 24 (left: 16)\n",
                                "8 + 12 = 20 (left: 20)  \n20 + 4 = 24 (left: 20 4)\n13 + 11 = 24 (left: 11)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 - 1 = 12 (left: 12 8)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 1 = 14 (left: 14 8)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 13 = 21 (left: 21 1)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 13 - 1 = 20 (left: 20)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 13 = 21 (left: 21 1)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 8 = 21 (left: 21 1)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 - 1 = 12 (left: 12 8)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 - 1 = 19 (left: 19)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 11 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                2.001,
                                0.003,
                                0.003,
                                0.003,
                                3.0,
                                0.003,
                                22.0
                            ],
                            "select_new_ys": [
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 11 = 24 (left: 24)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 11 = 24 (left: 24)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n"
                            ],
                            "new_ys": [
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 11 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n20 + 4 = 24 (left: 20 4)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n20 + 1 = 21 (left: 21 13)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n13 + 11 = 24 (left: 13 11)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n13 + 10 = 23 (left: 23 1)\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n8 + 16 = 24 (left: 8 16)\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 11 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n",
                                "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n8 + 12 = 20 (left: 20)\n20 + 4 = 24 (left: 20 4)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining the larger numbers early with valid operations, avoiding any step deemed invalid\u2014such as dividing 8 by 2 if it conflicts with game rules or context. Use 13 and 1 to approach 24, for example, (13 - 1) + 8 = 20, then find a way to reach 4 with remaining numbers without invalid operations. Prioritize operations that stay within the initial set and produce intermediate results aligned with permissible moves. Recognize that dividing 8 by 2 is invalid here; instead, explore alternative combinations like 8 + 13 - 1 = 20, then add remaining values to reach 24.",
                    "value_summary": "Avoid moves leading to impossible or zero sums."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n",
                                "12 + 10 = 22 (left: 22 1 8)  \n",
                                "22 + 2 = 24 (left: 1 8)  \n",
                                "12 + 10 + 2 = 24 (left: 1 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 * 2 = 24 (left: 2)\n",
                                "13 - 1 = 12 (left: 12 8)  \n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n8 + 2 = 10 (left: 10)\n",
                                "13 - 1 = 12 (left: 12 8)  \n10 + 12 = 22 (left: 22)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n13 + 11 = 24 (left: 11)\n",
                                "13 - 1 = 12 (left: 12 8)  \n8 * 3 = 24 (left: 3)\n",
                                "8 + 2 = 10 (left: 10 13)  \n13 - 1 = 12 (left: 12)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n8 + 2 = 10 (left: 10)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n12 + 10 = 22 (left: )  \n",
                                "8 + 2 = 10 (left: 10 13)  \n22 + 2 = 24 (left: )  \n",
                                "8 + 2 = 10 (left: 10 13)  \n22 + 1 = 23 (left: 1)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n10 + 12 = 22 (left: )  \n",
                                "8 + 2 = 10 (left: 10 13)  \n12 + 1 = 13 (left: 13)  \n",
                                "8 + 2 = 10 (left: 10 13)  \n8 + 2 + 13 = 23 (left: 8 2 13)\n"
                            ],
                            "values": [
                                3.0,
                                0.003,
                                3.0,
                                1.002,
                                0.003,
                                20.002,
                                1.002,
                                0.003,
                                2.001,
                                1.002,
                                0.0,
                                0.0,
                                0.003,
                                0.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n12 + 10 = 22 (left: 13 2)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 + 2 = 15 (left: 8 15)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n15 + 8 = 23 (left: 13)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 + 1 = 14 (left: 8 14)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 14 = 22 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 + 1 = 14 (left: 8 14)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n14 + 8 = 22 (left: 13)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 + 11 = 24 (left: 1)\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n20 + 4 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n20 * 1.2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n20 + 4 (using 4 from previous steps) = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n20 + 4 (if 4 is obtained from other operations) = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8)  \n12 + 8 = 20 (left: 20)\n20 + 4 (via intermediate steps) = 24 (left: )\n"
                            ],
                            "values": [
                                40.001,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                21.001,
                                0.003,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n8 / 2 = 4 (left: 8 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n12 - 8 = 4 (left: 4 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n8 - 4 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n12 / 4 = 3 (left: 3 8)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n8 / 4 = 2 (left: 2 12)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n12 - 4 = 8 (left: 8 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n13 - 1 = 12 (left: 12 8 2)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n8 + 2 = 10 (left: 12 10)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n12 + 10 = 22 (left: 22)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n22 + 2 = 24 (left: 24)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n22 + 1 = 23 (left: 23)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n22 + 1 = 23 (left: 23)  \n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n8 + 2 = 10 (left: 13 12 10)\n12 + 12 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n8 / 2 = 4 (left: 8 4)\n",
                                "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n12 - 8 = 4 (left: 4 12)\n"
                            ]
                        }
                    ],
                    "summary": "Use 13 and 1 to create 12 (13 - 1 = 12). Then, combine 8 and 2 to get 10 (8 + 2 = 10). Finally, add 12 and 10 to reach 22, then add 2 or 1 from remaining numbers to adjust to 24. Avoid invalid operations; focus on valid combinations within the set.",
                    "value_summary": "Avoid impossible or zero-sum intermediate steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "12 + 8 = 20 (left: 20 2)\n",
                                "20 + 2 = 22 (left: 22)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                3.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "20 + 2 = 22 (left: 22)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "20 + 2 = 22 (left: 22)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 + 2 = 10 (left: 13 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 + 2 = 10 (left: 13 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n",
                                "20 + 2 = 22 (left: 22)\n13 - 1 = 12 (left: 12 22)\n",
                                "20 + 2 = 22 (left: 22)\n22 - 12 = 10 (left: 10)\n",
                                "20 + 2 = 22 (left: 22)\n8 + 2 = 10 (left: 10)\n",
                                "20 + 2 = 22 (left: 22)\n8 + 2 = 10 (left: 10)\n",
                                "20 + 2 = 22 (left: 22)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                3.0,
                                2.001,
                                3.0,
                                3.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n8 + 2 = 10 (left: 13 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 - 1 = 12 (left: 12 8)\n8 + 2 = 10 (left: 13 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 * 2 = 16 (left: 16 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n"
                            ],
                            "values": [
                                3.0,
                                0.003,
                                2.001,
                                0.003,
                                20.002,
                                60.0,
                                41.0,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n13 - 1 = 12 (left: 12 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n8 + 2 = 10 (left: 10 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n8 + 2 = 10 (left: 10 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n8 + 2 = 10 (left: 10 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 16 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n12 + 12 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n13 - 1 = 12 (left: 12 8 2)\n13 + 11 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n13 - 1 = 12 (left: 12 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n8 + 2 = 10 (left: 10 13 1)\n"
                            ]
                        }
                    ],
                    "summary": "Given the invalidity of operations involving 13 and 1 directly, focus instead on combining remaining numbers. Use 8 and 2 to get 10 (8 + 2). Then, combine 13 and 1 indirectly by creating intermediate totals\u2014e.g., subtract 1 from 13 to get 12, then add 12 and 10 to reach 22. From there, add 2 or 1 (if available) to reach 24, or explore other combinations avoiding direct operations between 13 and 1. Prioritize operations that produce intermediate totals within the set, avoiding invalid moves involving 13 and 1 directly.",
                    "value_summary": "Avoid impossible or zero-sum steps."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n",
                                "8 * 2 = 16 (left: 13 16)\n",
                                "8 + 2 = 10 (left: 13 10)\n",
                                "13 - 8 = 5 (left: 5 1 2)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 8 = 20 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 3 = 24 (left: 13 1 3)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 * 1 = 16 (left: 13 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 8 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 3 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 13 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n13 - 1 = 12 (left: 12 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n8 + 2 = 10 (left: 10 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n16 + 8 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n10 + 13 = 23 (left: 23)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n16 + 13 = 29 (left: 29)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n12 + 12 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 + 11 = 24 (left: 12 1 11)\n8 * 3 = 24 (left: 13 3)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n8 + 2 = 10 (left: 13 10)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n16 + 8 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n16 + 8 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                1.002,
                                0.003,
                                2.001,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n8 * 2 = 16 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n8 + 2 = 10 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n16 + 8 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n10 + 14 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n8 * 2 = 16 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n8 + 2 = 10 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n16 + 13 = 29 (left: 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n16 + 1 = 17 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n10 + 13 = 23 (left: 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n13 + 1 = 14 (left: 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n8 + 13 = 21 (left: 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n8 + 1 = 9 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n13 - 1 = 12 (left: 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n13 + 11 = 24 (left: 8)\n8 * 3 = 24 (if 3 is available via previous operations)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n8 * 2 = 16 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n8 + 2 = 10 (left: 13 1)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 8 and 2 to reach 10 (8 + 2). Avoid direct operations involving 13 and 1, as subtracting 1 from 13 yields 12, which cannot lead to 24 based on previous attempts. Instead, explore multiplying 8 and 2 to get 16, then consider adding or subtracting remaining numbers\u2014such as 13 or 1\u2014to approach 24 indirectly. Prioritize operations that produce intermediate totals closer to 24, like 16, 8, or 12, and combine these with remaining numbers strategically. Avoid steps that involve subtracting 1 from 13, as this path has been proven unproductive.",
                    "value_summary": "Avoid impossible or zero-sum reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 * 2 = 16 (left: 1 13 16)\n",
                                "8 + 8 = 16 (left: 1 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n",
                                "16 + 8 = 24 (left: 1 8 24)\n",
                                "16 + 8 = 24 (left: 1 8 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n8 * 2 = 16 (left: 16 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n8 + 16 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n16 + 8 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n8 * 3 = 24 (left: 13, 2, 3)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n8 + 8 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 + 11 = 24 (left: 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n16 + 8 = 24 (left: 13 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 + 11 = 24 (left: 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n16 + 8 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                41.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 + 11 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 + 11 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n8 + 8 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n13 + 8 = 21 (left: 8 21)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n13 + 11 = 24 (left: 8 11 11)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n8 * 3 = 24 (left: 13 3)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n13 + 11 = 24 (left: 8 11 11)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 + 11 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n13 + 11 = 24 (left: )\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 + 16 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n2 * 12 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 * 3 = 24 (left: 13 2)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n(Considering only the valid options based on previous insights)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 + 16 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n13 + 11 = 24 (invalid, no 11 available)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n16 + 8 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n16 + 8 = 24 (left: 13)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 * 3 = 24 (no 3 available)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n13 + 11 = 24 (no 11 available)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n16 - 8 = 8 (left: 13 8)\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 + 16 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n13 + 11 = 24 (left: )\n",
                                "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n8 * 2 = 16 (left: 13 16)\n"
                            ]
                        }
                    ],
                    "summary": "Given the invalidity of subtracting 1 from 13 (which yields 12, an unproductive path), focus on combining 8 and 2 directly. Multiplying 8 by 2 results in 16, a promising intermediate. Then, adding 8 or 13 to 16 may approach 24, but direct options are limited. Alternatively, consider multiplying 12 (from 13-1, which is invalid) or 8+8, but these are invalid in this context. The key insight is to avoid the initial subtraction and prioritize multiplying 8 and 2 to produce 16, then explore addition or subtraction with remaining numbers to reach 24.",
                    "value_summary": "Avoid impossible or zero-sum reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 * 2 = 16 (left: 13 1 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n",
                                "16 + 8 = 24 (left: 12)\n",
                                "12 + 12 = 24 (left: )\n",
                                "16 + 8 = 24 (left: 13 1)\n",
                                "13 + 11 = 24 (left: 1)\n",
                                "8 * 3 = 24 (left: 13 1)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                3.0,
                                0.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n",
                                "16 + 8 = 24 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n",
                                "16 + 8 = 24 (left: 12)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n8 * 2 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n12 + 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n12 + 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 16)\n13 - 1 = 12 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n13 - 1 = 12 (left: 12 16)\n",
                                "16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "16 + 8 = 24 (left: 12)\n8 * 2 = 16 (left: 13 16)\n",
                                "16 + 8 = 24 (left: 12)\n16 + 8 = 24 (left: 13)\n",
                                "16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                0.003,
                                3.0,
                                0.0,
                                3.0,
                                3.0,
                                0.0,
                                0.003,
                                0.003,
                                3.0,
                                0.003,
                                0.003,
                                3.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                0.0,
                                3.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n8 * 2 = 16 (left: 13 1 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n16 + 8 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n16 + 8 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n8 * 2 = 16 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n16 + 8 = 24 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n12 + 12 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n8 * 2 = 16 (left: 13 1 16)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 8 and 2 to produce 16 via multiplication (8\u00d72=16). Then, add 8 to 16 to reach 24 (16+8=24). Use the remaining 13 and 1 to adjust as needed\u2014subtract 1 from 13 to get 12, then add or subtract to reach 24 if possible. Avoid invalid operations like subtracting from 13 to get 12 directly if it\u2019s not helping; instead, prioritize multiplications and additions involving 8 and 2, and use 1 and 13 cautiously to fine-tune totals toward 24.",
                    "value_summary": "Avoid moves leading to impossible or zero-sum intermediate results."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 * 2 = 16 (left: 1 13 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "8 + 8 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 * 3 = 24 (left: 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n2 + 22 = 24 (left: 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n13 + 11 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 + 2 = 10 (left: 12 10)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 + 12 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8 1)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 8 = 1 (left: 12 2 1)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 8 = 0 (left: 12 2 0)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                22.0
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 2 = 16 (left: 1 13 16)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n12 * 2 = 24 (left: 8 13 12)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n12 * 2 = 24 (left: 8 13 12)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n8 * 3 = 24 (left: 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n12 * 2 = 24 (left: 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n(13 - 1) * 2 = 24 (left: 12)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n(13 - 1) * 2 = 24 (left: 12)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n(13 - 1) * 2 = 24 (left: 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n8 * 3 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n8 * 3 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n13 - 1 = 12 (left: 12 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n24 - 12 = 12 (left: 13 12)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n12 * 2 = 24 (left: 13 2)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n13 + 11 = 24 (left: 11 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n13 + 11 = 24 (left: 11 24)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n12 * 2 = 24 (left: 13 2)\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n8 * 3 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0.002
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n8 * 3 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n",
                                "13 + 11 = 24 (left: 8 2 24)\n8 - 2 = 6 (left: 6 24)\n8 * 3 = 24 (left: 13 1 24)\n13 - 1 = 12 (left: 12 24)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 2, 8, 13 in the 24 game, prioritize combining 8 and 2 via multiplication: 8\u00d72=16. This yields a strong base toward 24. Next, add 8 to 16: 16+8=24, achieving the target immediately. Use 1 and 13 cautiously; for example, subtract 1 from 13: 13\u20131=12, but ensure remaining numbers are updated correctly\u2014after using 13 and 1, the remaining set is 12, 8, 2, which can be combined further. Avoid invalid steps like mismatched updates\u2014after each operation, remove the used numbers and replace them with the result. To fine-tune totals, consider dividing if necessary, but multiplication and addition should be your primary tools. For example, if you reach 12 (via 13\u20131), then combine 12 and 12 (if available) to reach 24, or double 12. Keep operations legal and update remaining numbers accurately. Focus on building toward 24 through strategic pairing of 8 and 2, then adjusting with 1 and 13 only when it simplifies reaching 24.",
                    "value_summary": "Prioritize moves that produce valid intermediate results from remaining numbers; avoid operations leading to impossible, zero, or duplicated values. Ensure each step uses only available numbers, maintains logical consistency, and progresses toward 24 without invalid or illegal operations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "8 * 3 = 24 (left: 24 13)\n",
                                "2 * 12 = 24 (left: 24 13)\n",
                                "8 + 16 = 24 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 11 24)\n",
                                "1 + 13 = 14 (left: 14 2 8)\n",
                                "14 + 10 = 24 (left: 10 8 13)\n",
                                "8 * 3 = 24 (left: 24 1 2)\n",
                                "2 * 12 = 24 (left: 24 13)\n"
                            ],
                            "values": [
                                40.001,
                                60.0,
                                60.0,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                40.001,
                                40.001
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n",
                                "2 * 12 = 24 (left: 24 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 * 3 = 24 (left: 24 13)\n",
                                "2 * 12 = 24 (left: 24 13)\n"
                            ],
                            "new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n24 - 13 = 11 (left: 11)\n",
                                "8 * 3 = 24 (left: 24 13)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 24 13)\n13 / 1 = 13 (left: 13)\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\n",
                                "2 * 12 = 24 (left: 24 13)\n24 - 13 = 11 (left: 11)\n",
                                "2 * 12 = 24 (left: 24 13)\n24 / 13 \u2248 1.846 (discard, not integer)\n",
                                "2 * 12 = 24 (left: 24 13)\n13 - 24 = -11 (discard, negative)\n",
                                "2 * 12 = 24 (left: 24 13)\n13 / 24 \u2248 0.541 (discard, not integer)\n",
                                "2 * 12 = 24 (left: 24 13)\n13 + 24 = 37 (not leading directly to 24)\n",
                                "2 * 12 = 24 (left: 24 13)\n13 * 24 = 312 (discard, too large)\n",
                                "2 * 12 = 24 (left: 24 13)\n13 - 1 = 12 (left: 12)\n",
                                "2 * 12 = 24 (left: 24 13)\n24 - 12 = 12 (left: 12)\n",
                                "2 * 12 = 24 (left: 24 13)\n24 / 13 \u2248 1.846 (discard)\n",
                                "2 * 12 = 24 (left: 24 13)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n"
                            ],
                            "new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n8 * 3 = 24 (left: 8)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n13 - 1 = 12 (left: 13 1)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n12 * 2 = 24 (left: 13 1 2)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n13 - 1 = 12 (left: 13 1)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n12 * 2 = 24 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n1 + 13 = 14 (left: 14)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n14 + 10 = 24 (left: 10 14)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n10 * 2.4 = 24 (left: 2.4)\n",
                                "8 * 3 = 24 (left: 24 13)\n13 + 11 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n8 * 3 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n12 * 2 = 24 (left: 13 1 2)\n",
                                "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n14 + 10 = 24 (left: 10 14)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 8 and 2 via multiplication: 8\u00d72=16, bringing you closer to 24. Then, add 8 to 16: 16+8=24, achieving 24 immediately. Use 1 and 13 mainly for adjusting totals\u2014subtract 1 from 13: 13\u20131=12\u2014then combine remaining numbers to reach 24, for example by doubling 12 (12\u00d72=24). Ensure all operations involve only the original numbers, accurately updating remaining values after each step. Prioritize multiplication and addition for quick solutions.",
                    "value_summary": "Prioritize valid, unique intermediate results; avoid impossible, zero, or duplicated outcomes; ensure logical progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 * 2 = 16 (left: 1 13 16)\n",
                                "8 + 2 = 10 (left: 1 10 13)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "8 + 13 = 21 (left: 1 21)\n",
                                "8 - 1 = 7 (left: 7 13)\n",
                                "13 / 1 = 13 (left: 8 13)\n",
                                "8 * 2 = 16 (left: 1 13 16)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                20.002,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 2 = 10 (left: 1 10 13)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 + 2 = 10 (left: 1 10 13)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n"
                            ],
                            "new_ys": [
                                "8 + 2 = 10 (left: 1 10 13)\n13 - 1 = 12 (left: 12 10)  \n",
                                "8 + 2 = 10 (left: 1 10 13)\n12 * 2 = 24 (left: 10)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 13 16)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 2 = 10 (left: 1 10 13)\n13 - 1 = 12 (left: 12 10)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 + 2 = 10 (left: 1 10 13)\n13 - 1 = 12 (left: 12 10)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n"
                            ],
                            "new_ys": [
                                "8 + 2 = 10 (left: 1 10 13)\n13 - 1 = 12 (left: 12 10)  \n13 - 1 = 12 (left: 12)  \n",
                                "8 + 2 = 10 (left: 1 10 13)\n13 - 1 = 12 (left: 12 10)  \n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n8 * 2 = 16 (left: 13 16)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 - 1 = 12 (left: 12 8 2 1)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n12 + 8 = 20 (left: 20 13 1)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n22 + 2 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.0,
                                0.003,
                                21.001,
                                0.003,
                                60.0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n13 - 1 = 12 (left: 8 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n8 * 2 = 16 (left: 13 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n8 + 8 = 16 (left: 13 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n12 * 2 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n13 - 1 = 12 (left: 12 2 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n12 * 2 = 24 (left: 8 13 1)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n8 * 2 = 16 (left: 13 1 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n8 + 8 = 16 (left: 13 2 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n8 + 2 = 10 (left: 13 8 10)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n13 / 13 = 1 (left: 1 2 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n1 + 8 = 9 (left: 9 13 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n14 + 8 = 22 (left: 22 13 2)  \n1 * 2 = 2 (left: 13 2 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n13 - 1 = 12 (left: 8 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n8 * 2 = 16 (left: 13 16)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers: 1, 2, 8, 13. Prioritize combining 8 and 2 via multiplication (8\u00d72=16), then add 8 to reach 24 (16+8=24). Use 13 and 1 to adjust totals\u2014subtract 1 from 13 (13\u20131=12), then double 12 (12\u00d72=24). Avoid introducing non-original numbers; focus on valid operations to reach 24 efficiently.",
                    "value_summary": "Avoid impossible or duplicate intermediate results; prioritize valid progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n",
                                "12 * 8 = 96 (left: 96)\n",
                                "8 * 3 (if 3 were available) or other steps are invalid here, so only the first steps are valid for now.\n"
                            ],
                            "values": [
                                40.001,
                                60.0,
                                0.003,
                                0.001
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8 24)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 8 = 4 (left: 4 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 / 8 = 1 (left: 1 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 - 8 = 0 (left: 0 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n2 * 12 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n2 * 12 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n2 * 12 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 2 = 16 (left: 1 16)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n12 * 2 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n12 + 12 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n12 * 2 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 3 = 24 (left: 8 3)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n2 * 12 = 24 (left: 24)\nAnswer: 2 * 12 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.001
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 3 = 24 (left: 8 3)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 3 = 24 (left: 8 3)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n6 + 4 = 10 (left: 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n6 - 4 = 2 (left: 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n6 * 4 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n4 + 6 = 10 (left: 10)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n4 - 6 = -2 (left: -2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n4 * 6 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 3 = 24 (left: 8 3)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 3 = 24 (left: 8 3)\n12 = 13 - 1 (left: 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n8 * 3 = 24 (left: 8 3)\n24 = 12 * 2 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                60.0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n6 + 4 = 10 (left: 10)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 8 and 2 via multiplication (8\u00d72=16) to approach 24 efficiently. Avoid steps involving 13\u20131, as subtracting 1 from 13 yields 12, which, when combined with 8 and 2, does not directly lead to 24. Instead, after obtaining 12, look for operations that directly produce 24, such as multiplying 12 by 2. Combining 12 and 2 through multiplication (12\u00d72=24) is the most straightforward and reliable route. Do not rely on summing 12+8+2, as it results in 22, which cannot be adjusted to 24 with remaining numbers. Prioritize operations that produce 24 immediately, especially multiplication involving 12 and 2.",
                    "value_summary": "Exclude impossible or duplicate intermediate results."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "12 * 2 = 24 (left: 8 24)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n"
                            ],
                            "values": [
                                20.002,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8 24)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n8 / 8 = 1 (left: 24 1)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n8 - 8 = 0 (left: 24 0)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n",
                                "12 * 2 = 24 (left: 8 24)\n12 * 2 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n13 - 1 = 12 (left: 12 2)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n13 / 1 = 13 (left: 2 13)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n2 * 12 = 24 (left: 24)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n8 * 3 = 24 (if 3 is available; otherwise, not applicable)\n",
                                "8 * 3 = 24 (left: 13 1 2)\n```\n"
                            ],
                            "values": [
                                40.001,
                                60.0,
                                0.003,
                                1.002,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 2 = 6 (left: 6 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n12 - 2 = 10 (left: 10)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n8 + 8 = 16 (left: 16)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n8 + 8 = 16 (left: 16)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n8 * 3 = 24 (left: 3)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                2.001,
                                3.0,
                                0.003,
                                0.003,
                                2.001
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 2 = 4 (left: 4 5)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n5 - 1 = 4 (left: 4 8)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 - 4 = 4 (left: 4 5)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 2 = 4 (left: 4 5)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 12 = 2 (left: 12 2)\n12 / 2 = 6 (left: 6)\n6 (no operations possible with a single number)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 2 = 4 (left: 4 5)\n",
                                "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n5 - 1 = 4 (left: 4 8)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize combining 8\u00d72=16, then use 12 from 13\u20131 to reach 24 via 12\u00d72. Avoid relying on 13\u20131=12 if remaining numbers cannot produce 24; from 12, 2, and 8, multiplication won't yield 24. Focus on operations directly involving 12 and 2, or 8\u00d73, if possible, to efficiently reach 24.",
                    "value_summary": "Avoid impossible intermediate result combinations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 1 = 7 (left: 2 7 13)\n",
                                "8 / 2 = 4 (left: 4 13)\n",
                                "13 - 1 = 12 (left: 2 12)\n",
                                "13 - 2 = 11 (left: 8 11)\n",
                                "8 * 3 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 12)\n",
                                "8 * 3 = 24 (left: 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 12)\n",
                                "8 * 3 = 24 (left: 13)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 12)\n8 * 3 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 12)\n2 * 12 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 12)\n(8 - 1) * 3 = 21 (not directly leading to 24, skip)\n",
                                "13 - 1 = 12 (left: 2 12)\n13 + 11 = 24 (not possible with current numbers)\n",
                                "13 - 1 = 12 (left: 2 12)\n8 * 3 = 24 (left: 13)\n",
                                "13 - 1 = 12 (left: 2 12)\n2 * 12 = 24 (left: 13)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                60.0,
                                40.001,
                                20.002,
                                0.003,
                                0.002,
                                41.0,
                                20.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n8 * 3 = 24 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n8 + 16 = 24 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(8 - 1) * 3 = 21 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(13 - 1) * 2 = 24 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(8 - 1) * 2 = 14 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(13 - 1) * 1 = 12 (left: 8 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(13 - 1) + 12 = 24 (left: 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 + 11 = 24 (left: 1 8)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(8 / 2) * 3 = 12 (left: 13)\n"
                            ],
                            "values": [
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(13 - 1) * 2 = 24 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(13 - 1) * 2 = 24 (left: 12)\n"
                            ],
                            "new_ys": [
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n8 * 3 = 24 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n8 * 3 = 24 (left: 13 2)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n2 * 12 = 24 (left: 13)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n(13 - 1) * 2 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n8 * 3 = 24 (left: 13 2)\n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 1, 2, 8, and 13, avoid using non-existent values like 12; all operations must involve only the original numbers. Focus on combining 8 and 2 to get 16, then multiply by 1 or 2 to reach 24, or use 13\u20131=12 if it leads directly to 24. Since 13\u20131=12 is valid, but 12\u00d72=24 is invalid if 12 wasn't initially available, instead, try (8\u20131)=7, then multiply or add to reach 24. Prioritize operations that directly produce 24 without intermediate invalid steps.",
                    "value_summary": "In the 24 game with numbers 1, 2, 8, 13, valid moves involve combining existing numbers through permitted operations without introducing or inventing new values. Moves leading to intermediate results not derivable from the initial set are invalid. Consequently, moves that produce unavailable intermediate numbers or reuse non-existent values are \"impossible.\" Focus on combining current numbers logically, avoiding impossible intermediate results, to systematically approach 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 * 2 = 16 (left: 1 13 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n",
                                "16 + 8 = 24 (left: 1 13 2)\n",
                                "12 * 2 = 24 (left: 13 8 2)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                20.002,
                                20.002,
                                0.002
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 + 8 = 20 (left: 20 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n8 * 2 = 16 (left: 13 16)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n12 * 2 = 24 (left: 8 2)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n8 * 3 = 24 (left: 13 2)\n"
                            ],
                            "values": [
                                20.002,
                                20.002,
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 12)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12 8 1)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n12 + 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n16 + 8 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n13 - 1 = 12 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n12 * 2 = 24 (left: 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n8 * 3 = 24 (left: 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n13 - 1 = 12 (left: 12 16)\n"
                            ],
                            "values": [
                                20.002,
                                20.002,
                                20.002,
                                0.0,
                                0.0,
                                1.002,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 12)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 12)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n16 - 12 = 4 (left: 4 16)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n16 / 2 = 8 (left: 8 12)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n8 * 3 = 24 (left: 12 3)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n8 + 16 = 24 (left: 24)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n12 * 2 = 24 (left: 2 24)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 12)\n12 + 12 = 24 (left: 12)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 8 12)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n16 + 8 = 24 (left: 12)\n8 * 3 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n16 - 12 = 4 (left: 4 16)\n",
                                "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n16 / 2 = 8 (left: 8 12)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 2, 8, 13, focus on combining 8 and 2 to reach 16 (8\u00d72), then add 8 to reach 24 (16+8). Alternatively, subtract 1 from 13 to get 12, then multiply by 2 (12\u00d72=24). Avoid introducing numbers outside the initial set; do not create or assume values like 3. Prioritize direct operations: (8\u00d72)=16, then add 8; or (13\u20131)=12, then multiply by 2. These strategies ensure valid, straightforward pathways to 24.",
                    "value_summary": "Valid moves combine current numbers via permitted operations, producing only intermediate results derivable from initial values; impossible moves generate unavailable intermediate numbers, making them invalid and unpromising toward reaching 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 * 2 = 16 (left: 1 13 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n",
                                "8 * 3 = 24 (left: 13 16 3)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                20.001
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 16)\n8 * 2 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n13 - 1 = 12 (left: 8 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n8 * 3 = 24 (left: 13 24)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n8 + 8 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n13 - 1 = 12 (left: 8 12)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n8 * 2 = 16 (left: 13 16)\n",
                                "13 - 1 = 12 (left: 12 8 16)\n8 + 8 = 16 (left: 12 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n8 * 2 = 16 (left: 13 16)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n16 + 8 = 24 (left: 13)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n2 * 8 = 16 (left: 13 16)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 8 = 21 (left: 2 21)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n14 + 8 = 22 (left: 14 2 22)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                20.002
                            ],
                            "select_new_ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n"
                            ],
                            "new_ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n8 - 2 = 6 (left: 12 6)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n8 / 2 = 4 (left: 12 4)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n8 * 2 = 16 (left: 12 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n13 - 1 = 12 (left: 12 8)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n13 - 1 = 12 (left: 12 8)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n8 - 1 = 7 (left: 12 7)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n8 / 1 = 8 (left: 12 8)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n13 - 8 = 5 (left: 12 5)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 - 1 = 12 (left: 12 2 8)  \n13 / 8 \u2248 1.625 (discard, non-integer)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n8 * 2 = 16 (left: 14 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 - 8 = 6 (left: 2 6)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n8 / 2 = 4 (left: 14 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 - 8 = 6 (left: 2 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 - 8 = 6 (left: 2 6)\n"
                            ],
                            "new_ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n8 * 2 = 16 (left: 1 13 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n13 - 1 = 12 (left: 12 8)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n12 * 2 = 24 (left: 8)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 - 8 = 6 (left: 2 6)\n8 - 2 = 6 (left: 1 6 13)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 - 8 = 6 (left: 2 6)\n8 / 2 = 4 (left: 4 13)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 - 8 = 6 (left: 2 6)\n13 - 1 = 12 (left: 2 4 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n8 * 2 = 16 (left: 1 13 16)\n",
                                "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n13 - 1 = 12 (left: 12 8)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 2, 8, 13, focus on valid operations using only these numbers. Prioritize combining 8 and 2 via multiplication: (8\u00d72)=16, then add 8 to reach 24 (16+8). Alternatively, subtract 1 from 13 to get 12, then multiply by 2 (12\u00d72=24). Avoid creating or using intermediate values like 12 unless directly derived from the initial set. Use straightforward operations\u2014multiplication and addition\u2014without introducing external numbers, to efficiently reach 24.",
                    "value_summary": "In the 24 game with 1, 2, 8, 13, promising moves derive from valid operations combining remaining numbers to approach 24, ensuring all intermediate results are obtainable from initial values. Illegal moves\u2014using non-existent or previously used numbers, or invalid operations\u2014produce impossible states. Focus on generating intermediate results grounded in the original set to reliably progress toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "8 * 2 = 16 (left: 16 13)\n",
                                "8 + 16 = 24 (left: 13)\n",
                                "8 * 3 = 24 (left: 13, 3) [if 3 is available, but not in current set]\n",
                                "12 * 2 = 24 (left: 8, 13) [not directly possible without intermediate steps]\n",
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "12 * 2 = 24 (left: 8 2)\n",
                                "8 * 3 = 24 (if 3 is available)\n",
                                "<No further steps guaranteed to lead to 24 from current set>\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n12 - 8 = 4 (left: 4 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 2 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 - 8 = 4 (left: 4 2)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n12 / 2 = 6 (left: 6 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 / 2 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 - 1 = 11 (left: 11 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n6 * 2 = 12 (left: 12 1)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n6 + 2 = 8 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 - 6 = 6 (left: 6 1)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n6 * 2 = 12 (left: 12 1)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\nAnswer: (13 - 1) + (13 - 1) = 24\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n12 - 1 = 11 (left: 6 11)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n12 / 2 = 6 (left: 6 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n6 * 2 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n8 * 2 = 16 (left: 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n8 + 8 = 16 (left: 16)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n8 - 2 = 6 (left: 6)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n16 / 2 = 8 (left: 8)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n8 / 2 = 4 (left: 4)\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n8 + 8 = 16 (left: 16)\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\nAnswer: (13 - 1) + (13 - 1) = 24\n",
                                "13 - 1 = 12 (left: 12 8 2)\n8 - 2 = 6 (left: 12 6)\n12 / 1 = 12 (left: 12 6)\n12 - 1 = 11 (left: 6 11)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize combining 8 and 2 via multiplication (8\u00d72=16), then add 8 for 24; alternatively, subtract 1 from 13 to get 12, then multiply by 2. Use straightforward operations, avoid unnecessary steps.",
                    "value_summary": "In the 24 game with 1, 2, 8, 13, promising moves combine remaining numbers using valid operations to approach 24, ensuring all intermediate results are derivable from the initial set. Illegal moves\u2014such as using non-existent numbers or invalid operations\u2014lead to dead ends. Since initial attempts are invalid, focus on generating intermediate results strictly from the original numbers, prioritizing operations that maintain the integrity of the initial set and facilitate progress toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n",
                                "8 * 2 = 16 (left: 13 16)\n",
                                "8 + 2 = 10 (left: 13 10)\n",
                                "13 - 8 = 5 (left: 2 5)\n",
                                "2 * 8 = 16 (left: 13 16)\n",
                                "13 - 2 = 11 (left: 8 11)\n",
                                "8 + 13 = 21 (left: 2 21)\n",
                                "13 + 8 = 21 (left: 2 21)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n",
                                "8 * 2 = 16 (left: 13 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n",
                                "8 * 2 = 16 (left: 13 16)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 16)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n8 + 2 = 10 (left: 12 10)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 * 2 = 24 (left: 8)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n",
                                "8 * 2 = 16 (left: 13 16)\n13 - 1 = 12 (left: 12 16)\n",
                                "8 * 2 = 16 (left: 13 16)\n16 - 8 = 8 (left: 8 13)\n",
                                "8 * 2 = 16 (left: 13 16)\n8 + 8 = 16 (left: 13 16)\n",
                                "8 * 2 = 16 (left: 13 16)\n8 * 2 = 16 (left: 13 16)\n",
                                "8 * 2 = 16 (left: 13 16)\n8 + 2 = 10 (left: 10 13)\n",
                                "8 * 2 = 16 (left: 13 16)\n8 - 2 = 6 (left: 6 13)\n",
                                "8 * 2 = 16 (left: 13 16)\n13 - 1 = 12 (left: 12 16)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n12 + 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n12 + 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 + 11 = 24 (left: 11)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n8 * 3 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n8 + 16 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n16 + 8 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n24 / 1 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n2 * 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n2 * 8 * 1.5 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n12 + 12 = 24 (left: 8)\n\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                20.002,
                                0.0,
                                20.002,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                20.002
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 + 11 = 24 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 + 11 = 24 (left: 11)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n8 * 3 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n8 + 16 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n2 * 12 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n24 / 1 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 + 11 = 24 (left: 11)\n11 (no operation possible to reach 24 directly with only 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n12 * 2 = 24 (left: )\n",
                                "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize multiplying 8\u00d72=16 and adding 8 to reach 24; alternatively, subtract 1 from 13 to get 12, then multiply by 2. Focus on straightforward operations combining 8 and 2 first, and consider simple subtraction from 13 when it leads toward 24.",
                    "value_summary": "Prioritize moves combining remaining numbers with valid operations to approach 24, ensuring results derive from initial numbers; avoid dead ends, and focus on progress toward target."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 8 = 5 (left: 1 2 5)\n",
                                "8 - 1 = 7 (left: 2 7 13)\n",
                                "13 - 2 = 11 (left: 8 11)\n",
                                "2 + 13 = 15 (left: 8 15)\n",
                                "8 * 2 = 16 (left: 13 16)\n",
                                "13 + 11 = 24 (left: 2 8 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 + 11 = 24 (left: 2 8 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 + 11 = 24 (left: 2 8 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n"
                            ],
                            "new_ys": [
                                "13 + 11 = 24 (left: 2 8 24)\n8 * 3 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n8 * 3 = 24 (left: 13 3)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n8 + 16 = 24 (left: 13 16)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n2 * 12 = 24 (left: 13 12)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n8 * 3 = 24 (left: 13 3)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n"
                            ],
                            "new_ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n11 + 13 = 24 (left: 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n2 * 12 = 24 (left: 2 12)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n8 * 3 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n2 * 12 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n8 + 16 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n13 + 11 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 - 13 = 0 (left: 8 0)\n---\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n11 + 13 = 24 (left: 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n11 + 13 = 24 (left: 24)\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n"
                            ],
                            "new_ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n11 + 13 = 24 (left: 24)\nAnswer: 2 * 12 = 24\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: )\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                60.0
                            ],
                            "select_new_ys": [
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n\n",
                                "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n11 + 13 = 24 (left: 24)\nAnswer: 2 * 12 = 24\n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 1, 2, 8, and 13, focus on direct multiplications and simple additions involving 8 and 2, as these are most promising. Avoid operations based on subtracting 1 from 13, since that step is deemed impossible to lead to 24. Instead, utilize the viable combination: multiply 2 by 12, which comes from adding 1 and 11 if possible, or directly if the context permits. The key is to recognize that 2 \u00d7 12 equals 24, making this the most straightforward solution when 12 is accessible from the remaining numbers. Since previous attempts show that subtracting 1 from 13 to get 12 is invalid, prioritize operations on 8 and 2 to reach 24 directly, such as 8 \u00d7 3 (if 3 can be derived) or 2 \u00d7 12 when 12 is available. Discard strategies relying on the impossible subtraction step.",
                    "value_summary": "Prioritize moves reducing numbers towards 24; avoid dead-end combinations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "12 * 2 = 24 (left: 8)\n",
                                "8 * 3 = 24 (left: )\n",
                                "---\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "12 * 2 = 24 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n",
                                "12 * 2 = 24 (left: 8)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 8 = 4 (left: 4 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 / 2 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 - 2 = 6 (left: 12 6)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 4 = 8 (left: 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n",
                                "12 * 2 = 24 (left: 8)\n6 * 4 = 24 (left: 6 4)\n",
                                "12 * 2 = 24 (left: 8)\n12 * 2 = 24 (left: 12 2)\n",
                                "12 * 2 = 24 (left: 8)\n```\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 - 2 = 6 (left: 6 8)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 - 3 = 5 (left: 5)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 / 2 = 4 (left: 4)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: 24)\n",
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n2 * 12 = 24 (if 12 is available through prior steps)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: 24)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n"
                            ],
                            "new_ys": [
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 * 3 = 24 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 * 3 = 24 (left: 8)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 8 and 2 to reach 16 (8\u00d72), then use simple addition with 13 and 1. For example, 8\u00d72=16, then 16+8=24\u2014however, since 8 is used twice, ensure each number is used once. Alternatively, consider 13\u22121=12, then multiply 12\u00d72=24, but subtracting 1 from 13 is invalid if the rules prevent modifying original numbers. The key is to derive 12 or 3 using only the original numbers through valid operations, then multiply or add to reach 24. Avoid steps that involve creating or subtracting numbers not in the initial set.",
                    "value_summary": "In the 24 game with 1, 2, 8, 13, prioritize moves that reduce the set toward 24 without involving invalid operations. Valid progress involves combining numbers to approach 24, while avoiding steps that misuse unavailable numbers or produce dead-end states, ensuring a clear path to solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 8 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n"
                            ],
                            "values": [
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 / 2 = 4 (left: 12 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n8 - 2 = 6 (left: 12 6)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 8 = 4 (left: 4 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 8 = 1.5 (left: 1.5 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n8 * 2 = 16 (left: 13 1 16)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n13 - 1 = 12 (left: 12 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 * 2 = 24 (left: 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n13 - 1 = 12 (left: 12, 8)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n8 * 3 (if 3 available) -- Not applicable directly\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n6 + 8 = 14 (left: 14)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n6 * 8 = 48 (left: 48)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n8 - 6 = 2 (left: 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n8 / 6 \u2248 1.33 (left: 1.33)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 / 2 = 6 (left: 6 8)\n\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                21.001,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 8 13",
                            "ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n"
                            ],
                            "new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n8 / 2 = 4 (left: 12 12 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n12 - 12 = 0 (left: 8 0)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n8 * 3 = 24 (left: 12 3)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n8 * 2 = 16 (left: 13 1 16)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n12 * 2 = 24 (left: 8 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n8 + 13 = 21 (left: 1 2 21)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n8 * 2 = 16 (left: 13 1 16)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n13 - 1 = 12 (left: 12 8 2)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n12 + 12 = 24 (left: 8 13 1)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n8 * 3 = 24 (left: 13 1 3)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n(Only valid steps without introducing new numbers)\n13 - 1 = 12 (left: 12 8 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n8 / 2 = 4 (left: 12 12 4)\n",
                                "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n12 - 12 = 0 (left: 8 0)\n"
                            ]
                        }
                    ],
                    "summary": "Use 8 and 2 to reach 16 via multiplication (8\u00d72). Then, combine 13 and 1 to create 12 (13\u22121). Finally, multiply 12\u00d72=24 or add/subtract to reach 24, ensuring all numbers are used once. Focus on forming 12 or 3 from original numbers without modifying or creating new values.",
                    "value_summary": "Prioritize valid combinations reducing toward 24; avoid impossible or dead-end steps, especially involving 8 in this set."
                }
            ],
            "env_info": [
                {
                    "action": "13 - 1 = 12 (left: 12 8 2)\n12 / 4 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * 8 = 24\n",
                    "history": []
                },
                {
                    "action": "8 / 2 = 4 (left: 12 4)  \n4 + 12 = 16 (left: 16 4)\n4 + 16 = 20 (left: 4 20)\n20 / 5 = 4 (left: 4 4)\n",
                    "history": []
                },
                {
                    "action": "8 + 12 = 20 (left: 20)  \n13 + 11 = 24 (left: 13 11)\n13 + 11 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 8)  \n20 + 4 = 24 (left: 4)\n13 - 1 = 12 (left: 8 2 12)\n8 / 2 = 4 (left: 8 4)\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 2 8)\n13 + 11 = 24 (left: 8 11)\n8 + 2 = 10 (left: 10 13 1)\n13 - 1 = 12 (left: 12 10)\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 2 8 12)\n8 * 2 = 16 (left: 12 13)\n10 + 13 = 23 (left: 8)\n8 * 2 = 16 (left: 13 1)\n",
                    "history": []
                },
                {
                    "action": "13 + 11 = 24 (left: 1 11 24)\n13 - 1 = 12 (left: 12 24)\n16 + 8 = 24 (left: 13 24)\n13 + 11 = 24 (left: )\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 8 16)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                    "history": []
                },
                {
                    "action": "13 + 11 = 24 (left: 8 2 24)\n8 / 2 = 4 (left: 4 24)\n8 * 3 = 24 (left: 24)\nAnswer: 13 + 11 = 24\n",
                    "history": []
                },
                {
                    "action": "8 * 3 = 24 (left: 24 13)\n12 * 2 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n12 * 2 = 24 (left: 13 1 2)\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 8 12)  \n13 + 1 = 14 (left: 14 8 2)  \n13 - 1 = 12 (left: 8 12)\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 2 8)\n12 / 12 = 1 (left: 1 2 8)\n6 * 4 = 24 (left: 6 4)\n\n",
                    "history": []
                },
                {
                    "action": "12 * 2 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 2 = 4 (left: 4 5)\n",
                    "history": []
                },
                {
                    "action": "8 * 3 = 24 (left: 13)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n13 - 1 = 12 (left: 12)\n",
                    "history": []
                },
                {
                    "action": "12 * 2 = 24 (left: 8 13 2)\n13 - 1 = 12 (left: 12 8 2)\n8 * 2 = 16 (left: 12 16)\n16 - 12 = 4 (left: 4 16)\n",
                    "history": []
                },
                {
                    "action": "(Note: Since the original numbers are 1, 2, 8, 13, these steps are based on the initial set and aim toward the goal of 24.)\n13 + 1 = 14 (left: 14 2 8)  \n14 + 8 = 22 (left: 2 22)\n8 * 2 = 16 (left: 1 13 16)\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 8 2)\n13 - 1 = 12 (left: 12)\n12 + 12 = 24 (left: 24)\nAnswer: (13 - 1) + (13 - 1) = 24\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 2 8 12)\n16 + 8 = 24 (left: 12)\n13 - 1 = 12 (left: 12)\n12 * 2 = 24 (left: )\n",
                    "history": []
                },
                {
                    "action": "2 * 12 = 24 (left: 8 13 24)\n13 + 11 = 24 (left: 11 24)\n8 * 3 = 24 (left: 8 3)\n\n",
                    "history": []
                },
                {
                    "action": "12 * 2 = 24 (left: 8)\n8 * 3 = 24 (left: 8 3)\n8 * 3 = 24 (left: 24)\nAnswer: 8 * 3 = 24\n",
                    "history": []
                },
                {
                    "action": "13 - 1 = 12 (left: 12 2 8)\n12 - 2 = 10 (left: 10 8)\n12 + 12 = 24 (left: 8, 12, 12)\n8 / 2 = 4 (left: 12 12 4)\n",
                    "history": []
                }
            ],
            "usage_so_far": {
                "completion_tokens": 1328676,
                "prompt_tokens": 739003,
                "cost": 0.6053707
            }
        },
        {
            "idx": 910,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 5 7 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 5 = 9 (left: 7 9 9)\n",
                                "4 * 5 = 20 (left: 7 9 20)\n",
                                "7 + 9 = 16 (left: 4 16)\n",
                                "7 * 9 = 63 (left: 4 63)\n",
                                "9 - 7 = 2 (left: 4 2)\n",
                                "9 / 7 \u2248 1.2857 (discard)\n",
                                "4 + 7 = 11 (left: 9 11)\n",
                                "4 * 7 = 28 (left: 9 28)\n",
                                "5 + 7 = 12 (left: 4 12)\n",
                                "5 * 7 = 35 (left: 4 35)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 5 7 9",
                            "ys": [
                                "7 + 9 = 16 (left: 4 16)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n"
                            ],
                            "new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n",
                                "7 + 9 = 16 (left: 4 16)\n16 / 4 = 4 (left: 4 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n16 - 4 = 12 (left: 12 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 + 4 = 8 (left: 8 4)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n7 + 9 = 16 (left: 9 16)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n9 + 9 = 18 (left: 7 18)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n7 * 9 = 63 (left: 9 63)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n9 * 9 = 81 (left: 7 81)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n9 - 7 = 2 (left: 2 9)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n7 - 9 = -2 (left: -2 9)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n9 / 7 \u2248 1.2857 (left: 1.2857 9)\n",
                                "4 + 5 = 9 (left: 7 9 9)\n7 / 9 \u2248 0.7778 (left: 0.7778 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n",
                                "7 + 9 = 16 (left: 4 16)\n16 / 4 = 4 (left: 4 4)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 5 7 9",
                            "ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n",
                                "7 + 9 = 16 (left: 4 16)\n16 / 4 = 4 (left: 4 4)\n"
                            ],
                            "new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 4 = 4 (left: 1 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 2 = 8 (left: 1 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 1 = 16 (left: 8 1)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 1 = 15 (left: 15 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n16 / 4 = 4 (left: 4 4)\n4 / 4 = 1 (left: 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 4 = 4 (left: 1 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 5 7 9",
                            "ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 4 = 4 (left: 1 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 4 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n8 + 1 = 9 (left: 9 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n8 / 1 = 8 (left: 8 1)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n1 + 8 = 9 (left: 9 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n1 - 8 = -7 (left: -7 8)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n1 * 8 = 8 (left: 8 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 4 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)\n",
                                "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 - 8 = 8 (left: 1 8)\n8 - 1 = 7 (left: 7 8)\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 5 7 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 2 4 5)\n",
                                "7 - 5 = 2 (left: 2 4 9)\n",
                                "9 / 3 = 3 (left: 3 4 7)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n",
                                "5 + 4 = 9 (left: 9 7)\n",
                                "4 * 5 = 20 (left: 20 7)\n",
                                "20 / 5 = 4 (left: 4 7)\n",
                                "7 - 4 = 3 (left: 3 9)\n",
                                "9 - 3 = 6 (left: 6 4)\n",
                                "6 * 4 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n",
                                "9 - 3 = 6 (left: 6 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 5 7 9",
                            "ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n",
                                "9 - 3 = 6 (left: 6 4)\n"
                            ],
                            "new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n3 + 9 = 12 (left: 5 12)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n9 + 3 = 12 (left: 5 12)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 + 9 = 14 (left: 3 14)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n9 - 5 = 4 (left: 3 4)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 - 3 = 2 (left: 9 2)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n9 / 3 = 3 (left: 5 3)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n3 * 3 = 9 (left: 5 9)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 4 = 20 (left: 3 20)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n20 - 9 = 11 (left: 3 11)\n",
                                "9 - 3 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n",
                                "9 - 3 = 6 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5 4)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 - 6 = -2 (left: -2 6)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002
                            ],
                            "select_new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 5 7 9",
                            "ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n"
                            ],
                            "new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 + 15 = 24 (left: 24)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n15 + 9 = 24 (left: 24)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 * 15 = 135 (left: 135)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n15 * 9 = 135 (left: 135)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 / 0.6667 \u2248 9 (left: 9)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n6 * 0.6667 \u2248 4 (left: 4)\n",
                                "9 - 3 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667 6)\n0.6667 * 6 \u2248 4 (left: 4)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                1.002
                            ],
                            "select_new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 + 15 = 24 (left: 24)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n15 + 9 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 5 7 9",
                            "ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 + 15 = 24 (left: 24)\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n15 + 9 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: 9 + 5 * (7 - 4) = 24\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: 5 * (7 - 4) + 9 = 24\n"
                            ],
                            "values": [
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: 9 + 5 * (7 - 4) = 24\n",
                                "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n15 + 9 = 24 (left: 24)\nAnswer: 5 * (7 - 4) + 9 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 4, 5, 7, 9 for 24, ensure each move combines current numbers legally\u2014do not reuse or skip numbers improperly. Focus on valid operations (addition, subtraction, multiplication, division) that use all available numbers step-by-step, maintaining the original set until combined. Avoid invalid steps like adding only some numbers or creating intermediate totals without proper operation. Prioritize pairing numbers to reach 24 directly or via intermediate valid calculations, ensuring each step adheres to game rules.",
                    "value_summary": "In 24, valid moves combine or eliminate existing numbers without creating new ones directly. For 4 5 7 9, avoid steps that produce intermediate sums or products not derived from the current set. Each move must respect the original or combined elements, ensuring legality and meaningful progression toward 24."
                }
            ],
            "env_info": [
                {
                    "action": "7 + 9 = 16 (left: 4 16)\n4 / 4 = 1 (left: 1 16)\n16 / 4 = 4 (left: 1 4)\n4 / 1 = 4 (left: 4)\n",
                    "history": [
                        "Answer: 9 + 5 * (7 - 4) = 24"
                    ]
                },
                {
                    "action": "7 - 4 = 3 (left: 3 5 9)\n5 * 3 = 15 (left: 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: 9 + 5 * (7 - 4) = 24\n",
                    "history": [
                        "Answer: 9 + 5 * (7 - 4) = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 1370243,
                "prompt_tokens": 755472,
                "cost": 0.6236444
            }
        },
        {
            "idx": 909,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 3 7 12",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 + 3 = 6 (left: 6 7 12)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n",
                                "12 / 3 = 4 (left: 4 7 9)\n",
                                "12 - 3 = 9 (left: 9 7 9)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 3 7 12",
                            "ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n"
                            ],
                            "new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n6 + 12 = 18 (left: 7 18)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n12 / 6 = 2 (left: 2 7)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n12 - 7 = 5 (left: 5 6)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n6 * 2 = 12 (left: 12 7)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 / 1 = 7 (left: 12 7)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 3 7 12",
                            "ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n"
                            ],
                            "new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n12 / 3 = 4 (left: 4 12)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n12 - 8 = 4 (left: 4 8)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 / 2 = 4 (left: 4 2)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n12 * 2 = 24 (left: 24)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 + 4 = 12 (left: 12 8)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 * 3 = 24 (left: 24)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n1 + 12 = 13 (left: 13)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n12 - 1 = 11 (left: 11)\n",
                                "3 + 3 = 6 (left: 6 7 12)\n7 - 6 = 1 (left: 1 12)\n12 / 1 = 12 (left: 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                41.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 * 3 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "3 3 7 12",
                            "ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 * 3 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 3 - 7) * 12 = 24\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 * 3 = 24 (left: 24)\nAnswer: 3 * 8 = 24\n"
                            ],
                            "values": [
                                60.0,
                                0.001
                            ],
                            "select_new_ys": [
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 3 - 7) * 12 = 24\n",
                                "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n8 * 3 = 24 (left: 24)\nAnswer: 3 * 8 = 24\n"
                            ]
                        }
                    ]
                }
            ],
            "env_info": [
                {
                    "action": "3 * 3 = 9 (left: 9 7 12)\n9 - 7 = 2 (left: 2 12)\n2 * 12 = 24 (left: 24)\nAnswer: (3 * 3 - 7) * 12 = 24\n",
                    "history": [
                        "Answer: (3 * 3 - 7) * 12 = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 1386453,
                "prompt_tokens": 760806,
                "cost": 0.6306618
            }
        },
        {
            "idx": 908,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 + 5 = 8 (left: 1 8 9)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n",
                                "9 - 3 = 6 (left: 1 6 8)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n",
                                "1 + 3 = 4 (left: 4 5 9)\n",
                                "1 * 3 = 3 (left: 3 5 9)\n",
                                "5 - 1 = 4 (left: 4 3 9)\n",
                                "5 / 1 = 5 (left: 5 3 9)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "3 * 5 = 15 (left: 1 15 9)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "3 * 5 = 15 (left: 1 15 9)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n"
                            ],
                            "new_ys": [
                                "3 * 5 = 15 (left: 1 15 9)\n15 - 9 = 6 (left: 1 6)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n15 / 3 = 5 (left: 1 5)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n9 - 1 = 8 (left: 8 15)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n9 / 3 = 3 (left: 3 15)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 * 15 = 15 (left: 15)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n15 / 3 = 5 (left: 5 15)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n3 + 8 = 11 (left: 1 11)  \n",
                                "9 / 3 = 3 (left: 1 3 8)\n8 - 3 = 5 (left: 1 5)  \n",
                                "9 / 3 = 3 (left: 1 3 8)\n8 / 3 \u2248 2.666... (not an integer, discard)  \n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 + 8 = 9 (left: 1 9)  \n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 * 8 = 8 (left: 1 8)  \n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 / 8 = 0.125 (not an integer, discard)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.003,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 3 5 9",
                            "ys": [
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n"
                            ],
                            "new_ys": [
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n9 + 15 = 24 (left: )\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n15 / 9 = 5/3 (left: 5/3)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n9 / 15 = 3/5 (left: 3/5)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n8 - 3 = 5 (left: -7 5)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n8 / 4 = 2 (left: -7 2)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n8 + 8 = 16 (left: -7 16)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 + 8 = 11 (left: -7 11)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n8 - 8 = 0 (left: -7 0)\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 3 5 9",
                            "ys": [
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n-7 + 24 = 17 (left: -7 17)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n-7 * 24 = -168 (left: -168)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n24 - (-7) = 31 (left: 31)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n24 / (-7) \u2248 -3.43 (left: -3.43)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n-7 / 24 \u2248 -0.29 (left: -0.29)\n",
                                "3 * 5 = 15 (left: 1 15 9)\n1 + 8 = 9 (left: 9 15)\n15 - 9 = 6 (left: 6)\n6\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n-7 + 24 = 17 (left: -7 17)\n",
                                "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n-7 * 24 = -168 (left: -168)\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 1 5)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "5 * 3 = 15 (left: 1 4 15)\n",
                                "9 / 3 = 3 (left: 1 5 3)\n",
                                "5 + 3 = 8 (left: 1 8)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n",
                                "8 / 4 = 2 (left: 1 2 4)\n",
                                "4 * 6 = 24 (left: 1 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 - 1 = 8 (left: 3 5 8)\n",
                                "3 * 8 = 24 (left: 1 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "9 - 1 = 8 (left: 3 5 8)\n",
                                "3 * 8 = 24 (left: 1 5)\n"
                            ],
                            "new_ys": [
                                "9 - 1 = 8 (left: 3 5 8)\n3 + 5 = 8 (left: 8 8)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n8 / 8 = 1 (left: 3 1)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n3 * 8 = 24 (left: 24)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n3 * 5 = 15 (left: 15 8)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n8 - 3 = 5 (left: 5 5)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n5 + 3 = 8 (left: 8 8)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n15 - 8 = 7 (left: 7 8)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n8 / 8 = 1 (left: 3 1)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n3 + 8 = 11 (left: 11 8)\n",
                                "9 - 1 = 8 (left: 3 5 8)\n11 - 8 = 3 (left: 3 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 + 1 = 4 (left: 4 5)\n",
                                "3 * 8 = 24 (left: 1 5)\n5 - 1 = 4 (left: 4 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n5 / 1 = 5 (left: 3 5)\n",
                                "3 * 8 = 24 (left: 1 5)\n5 - 3 = 2 (left: 2 1)\n",
                                "3 * 8 = 24 (left: 1 5)\n5 / 1 = 5 (left: 3 5)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "9 - 1 = 8 (left: 3 5 8)\n3 * 8 = 24 (left: 24)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 3 5 9",
                            "ys": [
                                "9 - 1 = 8 (left: 3 5 8)\n3 * 8 = 24 (left: 24)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n"
                            ],
                            "new_ys": [
                                "9 - 1 = 8 (left: 3 5 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (9 - 1) = 24\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n8 * 3 = 24 (left: 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n12 * 2 = 24 (left: 2)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n16 - (-8) = 24 (left: -8)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n24 / 1 = 24 (left: 1)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n24 - 0 = 24 (left: 0)\n"
                            ],
                            "values": [
                                0.001,
                                0.003,
                                40.001,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 3 5 9",
                            "ys": [
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n"
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n9 / 3 = 3 (left: 1 5 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n5 * 3 = 15 (left: 1 15)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n15 + 9 = 24 (left: 1)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n15 - 1 = 14 (left: 14)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n5 * 3 = 15 (left: 1 15)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n15 + 9 = 24 (left: 1)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n3 * 8 = 24 (left: 1 8)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n8 / 4 = 2 (left: 2 3 5 9)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n6 * 4 = 24 (left: 6 4)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n9 / 3 = 3 (left: 1 5 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n5 * 3 = 15 (left: 1 15)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n15 - 1 = 14 (left: 14)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n14 + 10 = 24 (left: 24)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n5 + 9 = 14 (left: 1 14)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n5 * 3 = 15 (left: 1 15)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n15 + 9 = 24 (left: 1)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n3 * 8 = 24 (left: 8)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n8 * 3 = 24 (left: 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n6 * 4 = 24 (left: 4)\n5 * 4.8 = 24 (if 4.8 were available, but not in integers)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n9 / 3 = 3 (left: 1 5 3)\n",
                                "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n5 * 3 = 15 (left: 1 15)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 in the 24 game, prioritize combining large and small numbers to reach intermediate targets efficiently. A promising approach is to use division early, such as (9 / 3) = 3, leaving 1, 5, and 3. This move is legal and simplifies the problem. Next, consider multiplying 5 and 3 to get 15, then add 1 to reach 16, which is close but not ideal; alternatively, look for combinations that directly yield 24. For example, after obtaining 3, multiplying it by 8 (from 5 + 3, if possible) or other operations may help. Focus on pairing 5 and 9 to get 45, then dividing by 3 or 5 can produce 9 or 15, moving closer to 24. The key is to use division and multiplication to generate intermediate targets near 24, then combine remaining numbers carefully.",
                    "value_summary": "In the 24 game with initial numbers 1, 3, 5, 9, moves are promising if they involve valid, legal operations\u2014using each number exactly once per step, with no reuse or dropping of unused numbers. A move is considered **sure** when it adheres to these rules and progresses logically toward the target. Conversely, a move is **impossible** if it involves using numbers not present in the current set, reusing numbers already used, or dropping numbers without proper operation, leading to inconsistent or invalid states. Effective steps reduce the problem systematically, maintaining accurate tracking of remaining numbers. For 1, 3, 5, 9, promising moves combine these numbers via valid operations, preserving legality. Unpromising moves violate rules, introduce invalid states, or discard numbers improperly, thus hindering progress toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n",
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "4 * 6 = 24 (left: 1 6) *Note: no 6 available, discard this step*\n",
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "4 * 6 = 24 (left: 1 6) *Note: no 6 available, discard this step*\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n",
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "4 * 6 = 24 (left: 1 6) *Note: no 6 available, discard this step*\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n"
                            ],
                            "new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n3 * 8 = 24 (left: 1 4)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n",
                                "9 - 5 = 4 (left: 1 3 4)\n8 / 2 = 4 (left: 1 3 4)  \n",
                                "9 - 5 = 4 (left: 1 3 4)\n3 * 8 = 24 (left: 1 4)  \n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n8 - 1 = 7 (left: 7 8)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n8 / 1 = 8 (left: 8 8)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n8 - 8 = 0 (left: 0 1 8)\n",
                                "3 * 8 = 24 (left: 1 8) *Note: no 8 available, discard this step*\n8 / 8 = 1 (left: 1 8)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                21.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 3 5 9",
                            "ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n"
                            ],
                            "new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n3 * 8 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n3 * 8 = 24 (left: 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 3 5 9",
                            "ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n3 * 8 = 24 (left: 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n3 * 8 = 24 (left: 1)\n1 (no operations possible with a single number)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n3 * 8 = 24 (left: 1 8)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n8 / 8 = 1 (left: 3 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n9 - 5 = 4 (left: 4 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n4 * 3 = 12 (left: 12 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n12 * 2 = 24 (left: 1 2 3 4)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n15 - 3 = 12 (left: 12 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n12 * 2 = 24 (left: 1 2 12)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n6 * 4 = 24 (left: 1 3 4)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n9 - 5 = 4 (left: 4 1)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n4 * 6 = 24 (left: 1 6 4)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n3 * 8 = 24 (left: 1)\n1 (no operations possible with a single number)\n",
                                "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)  \n3 * 8 = 24 (left: 1)\n3 * 8 = 24 (left: 1 8)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 3, 5, 9 in the 24 game, focus on forming intermediate targets through valid operations\u2014multiplication and division\u2014by pairing the largest and smallest numbers. Avoid using numbers outside the original set or combining numbers in ways that drop digits improperly. Instead, leverage the following refined strategies:\n\n1. Use subtraction to generate manageable intermediate values, such as (9 - 5) = 4, which can then be multiplied by another number to reach 24.\n2. Combine 3 and 5 via multiplication (3 * 5 = 15) and then add or subtract remaining numbers to approach 24, e.g., 15 + 9 = 24\u2014if the sequence allows.\n3. Use division early when it simplifies larger numbers\u2014e.g., (9 / 3) = 3\u2014to create equivalent smaller numbers for straightforward operations.\n4. Prioritize pairing numbers to produce factors or multiples of 24, such as aiming for 8, 12, 6, or 4, which can be combined to reach 24.\n5. Remember that subtracting or dividing to get 1 or 2 can facilitate multiplication to reach 24, e.g., if you can generate 8, then multiply by 3 to get 24.\n6. Avoid invalid operations\u2014combinations involving non-original numbers or combining numbers in a way that drops digits prematurely.\n7. Systematically test pairings: for example, (9 - 5) = 4, then multiply by 3 to get 12, then multiply by 2 (which can be obtained from other operations) to reach 24.\n\nBy focusing on these targeted pairings and intermediate targets, and strictly adhering to valid operations, you'll streamline your path to solutions with 1, 3, 5, 9.",
                    "value_summary": "For the 1, 3, 5, 9 puzzle, promising moves are those that use each number exactly once with valid operations to combine into intermediate results, progressing logically toward 24. Moves are **impossible** if they involve using non-existent numbers, reusing numbers, or dropping numbers without proper operations, leading to invalid states. Effective steps reduce the set correctly while maintaining legal calculations. In this specific set, avoiding invalid operations like using numbers not present (e.g., 8) is crucial. Valid moves preserve legality and systematically approach the target; invalid moves hinder progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 * 5 = 15 (left: 1 9 15)\n",
                                "9 - 1 = 8 (left: 3 8 5)\n",
                                "3 + 5 = 8 (left: 1 8 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n",
                                "5 + 9 = 14 (left: 1 3 14)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n",
                                "15 - 9 = 6 (left: 1 6 3 5)\n",
                                "15 / 3 = 5 (left: 1 5 9)\n",
                                "9 - 1 = 8 (left: 3 8 5)\n",
                                "8 * 3 = 24 (left: 5 1 8 3)\n"
                            ],
                            "values": [
                                41.0,
                                40.001,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                60.0,
                                41.0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n15 + 9 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 3 = 9 (left: 9 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n5 - 3 = 2 (left: 2 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n9 - 5 = 4 (left: 4 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n9 / 3 = 3 (left: 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n9 / 3 = 3 (left: 3 5)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n9 - 1 = 8 (left: 8 15)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n15 - 9 = 6 (left: 6 1)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n15 - 6 = 9 (left: 9 1)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n3 * 5 = 15 (left: 1 15)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n3 + 5 = 8 (left: 1 8)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n9 / 3 = 3 (left: 1 3)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n5 - 1 = 4 (left: 9 4)\n",
                                "3 * 5 = 15 (left: 1 9 15)\n15 - 1 = 14 (left: 14 9)\n"
                            ],
                            "values": [
                                60.0,
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 3 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 3 = 3 (left: 3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 + 15 = 18 (left: 18 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n1 * 8 = 8 (left: 8 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n4 * 2 = 8 (left: 8 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n8 + 9 = 17 (left: 17)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n8 * 3 = 24 (left: 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n9 - 8 = 1 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n9 / 3 = 3 (left: 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 + 5 = 8 (left: 8 9)\n8 + 16 = 24 (left: 16)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 - 6 = 3 (left: 3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 / 3 = 3 (left: 3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n24 + 9 = 33 (left: 24 33)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n24 - 9 = 15 (left: 24 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n24 * 9 = 216 (left: 24 216)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n24 / 9 = 8/3 (left: 8/3 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n9 - 24 = -15 (left: 9 -15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n9 + 24 = 33 (left: 9 33)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n9 * 24 = 216 (left: 9 216)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 8 = 24 (left: 24 9)\n9 / 24 = 3/8 (left: 3/8 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 efficiently, focus on producing key intermediate targets like 8, 12, or 24 through valid pairings. Avoid steps like 9 - 5 = 4, which cannot lead to 24, as confirmed by previous attempts. Instead, leverage the multiplication of 3 and 5 to get 15, then add 9 to reach 24 directly: (3 * 5) + 9 = 24. Alternatively, divide 9 by 3 to get 3, then multiply by 8\u2014created by multiplying 1 and 8 (which can be formed from 4 and 2)\u2014but since 1, 3, 5, 9 only, focus on direct combinations. Use subtraction to generate manageable numbers only if they assist in reaching 24; otherwise, avoid steps like subtracting to get 4 from 9 and 5, which don't lead to 24. Prioritize combining 3 and 5 first, then integrating 1 and 9 to reach 24 efficiently.",
                    "value_summary": "Promising moves combine remaining numbers with valid operations, reduce the set logically, and progress toward 24; impossible moves involve invalid operations, reuse, or dropping numbers without proper calculation, blocking solution pathways."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: -6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 3/5 (left: 3/5)\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                0.003,
                                0.003,
                                0.0,
                                0.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 + 18 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 + 18 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 / 0.25 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3)\n5 / 3 = 1.6667 (left: 1.6667)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n6 + 18 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "For 1, 3, 5, 9, prioritize combining 3 and 5 early via multiplication: `(3 * 5) = 15`, leaving 1 and 9 untouched. Use `1 * 9 = 9` to retain the 9 for later operations. From these, aim to reach 24 by combining 15 and 9 directly: `(15 + 9) = 24`. Avoid reusing numbers or steps that discard or reuse digits improperly (e.g., re-multiplying 3 after using it). Focus on forming intermediate targets like 15 and 9 without unnecessary subtraction unless it simplifies reaching 24. Since 1 and 9 can be combined with addition or multiplication to reach 24, the key is to use `(3 * 5)` to create 15, then add 9. This approach minimizes complexity and avoids illegal moves, leading efficiently to the solution.",
                    "value_summary": "In the 24 game with numbers 1, 3, 5, 9, promising moves involve combining remaining numbers with valid operations that logically progress toward 24, ensuring no reuse or invalid calculations. Moves that reuse used numbers, omit necessary operations, or drop numbers without proper calculation are unpromising or impossible. Effective steps reduce the set meaningfully while maintaining the potential to reach 24. For this puzzle, combining 1 and 9 early (e.g., 1\u00d79) can be promising, while attempting to reuse numbers or perform invalid operations (like reusing 3 or 5 after they've been used) is unpromising."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 15 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 1.666... (left: 15 1.666...)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                40.0,
                                60.0,
                                0.003,
                                20.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n15 * 9 = 135 (left: 1 3 5 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n3 * 5 = 15 (left: 1 3 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n9 + 15 = 24 (left: 1 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n3 * 1 = 3 (left: 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n3 * 9 = 27 (left: 1 27)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n1 * 27 = 27 (left: 3 27)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n3 * 9 = 27 (left: 1 3 9 27)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 24)\nAnswer: 9 + (3 * 5) = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                40.001
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 24)\nAnswer: 9 + (3 * 5) = 24\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 24 -6)\n15 * 9 = 135 (left: 1 3 5 135)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently reach 24 with 1, 3, 5, 9, focus on forming key intermediates like 15 by multiplying 3 and 5: `(3 * 5) = 15`. Then, combine this with 9 via addition: `(15 + 9) = 24`. Avoid creating invalid expressions such as subtracting or adding non-existent combinations like `15 - 9` directly from the original set. Instead, use 1 as a multiplier if needed, e.g., `1 * 24 = 24`, but it's unnecessary here. Prioritize combining 3 and 5 first, then add 9 to reach 24, ensuring all steps derive directly from the original numbers without reusing or invalid operations.",
                    "value_summary": "In the 24 game with 1, 3, 5, 9, promising moves reduce the set toward 24 by combining numbers with valid operations, avoiding reuse or invalid calculations. Early promising steps include combining 1 and 9 (e.g., 1\u00d79). Moves that lead to remaining numbers like 6 (from 15-9) often signal dead ends if subsequent options cannot reach 24. Effective moves systematically narrow possibilities, while unpromising moves leave no viable path to 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n6 - 1 = 5 (left: 5 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n6 + 1 = 7 (left: 7 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n6 * 1 = 6 (left: 6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n6 / 1 = 6 (left: 6 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n6 - 1 = 5 (left: 5 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n6 + 1 = 7 (left: 7 6)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 for 24, first combine 3 and 5 to make 15 (3*5). Then add 9 to reach 24: (15 + 9) = 24. Use 1 only if necessary for multiplication or to adjust. Avoid using intermediate totals like 15 directly; focus on operations involving original numbers only, ensuring all steps derive from the set {1, 3, 5, 9}.",
                    "value_summary": "Valid moves combine original numbers using addition, subtraction, multiplication, or division, progressing toward 24. Invalid operations reuse or generate non-original numbers. Promising steps systematically narrow options without invalid or impossible calculations, avoiding dead ends and maintaining the original set integrity."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 3 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 3 = 3 (left: 3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 3 = 3 (left: 3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 6 = 3 (left: 3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n15 - 9 = 6 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n9 * 15 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n15 / 9 = 5/3 (left: 5/3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n9 / 15 = 3/5 (left: 3/5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n3 + 9 = 12 (left: 12)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n9 - 3 = 6 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n3 * 9 = 27 (left: 27)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n9 / 3 = 3 (left: 3)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 6 = 9 (left: 9 15)\n15 - 9 = 6 (left: 24)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 for 24, focus on combining 3 and 5 to make 15 (3\u00d75). Then, multiply 9 by 1 if needed, or use addition/subtraction to reach 24. A proven approach is: (3\u00d75) + (9 - 1) = 15 + 8 = 23, close but not exact. Alternatively, (5 - 1) \u00d7 (3 + 1) = 4\u00d74=16, not helpful here. A more direct solution is: (9 \u00d7 3) - (5 + 1) = 27 - 6 = 21, close but not 24. The key is to combine 3 and 5 for 15, then add or multiply with 9 and 1 to reach 24, avoiding unnecessary intermediate totals. Remember to only combine original numbers, and ensure each step reduces remaining numbers appropriately. Focus on operations involving 3, 5, 9, and 1 to reach 24 efficiently.",
                    "value_summary": "In the 1,3,5,9 puzzle, promising moves produce valid intermediate results by combining original numbers with +, \u2013, \u00d7, \u00f7, reducing options without invalid or leftover values. Illegal steps, such as reusing results improperly or creating extraneous numbers, lead to dead ends. Focus on systematic, rule-abiding progress toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 5/3 = 45/3 - 5/3 = 40/3 (left: 40/3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\nAnswer: 3 * 5 + 9 = 24\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n15 / 3 = 5 (left: 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n15 - 3 = 12 (left: 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n15 + 3 = 18 (left: 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n15 * 3 = 45 (left: 5)\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\nAnswer: 3 * 5 + 9 = 24\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3 15)\n15 / 3 = 5 (left: 5)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 for 24, focus on combining 3 and 5 to form 15 via multiplication (3\u00d75=15). Next, aim to use 9 and 1 to reach 9 or 8, which can then be combined with 15. A key insight is to avoid creating intermediate sums like 15 - 6, which are invalid without the original numbers. Instead, consider operations such as (9 - 1) = 8 or (9 + 1) = 10, then combine with 15 through addition or subtraction. For example, (15 + 9 + 1) exceeds 24, so focus on multiplying and subtracting to reach 24 directly, like (3\u00d75) + (9 - 1) = 15 + 8 = 23, close but not exact. The best strategy involves pairing 3 and 5 for 15, then manipulating 9 and 1 with addition or subtraction to reach 24, ensuring each step uses only original numbers and valid operations.",
                    "value_summary": "In the 1,3,5,9 puzzle, promising moves produce valid intermediate results by combining original numbers with +, \u2013, \u00d7, \u00f7, without reusing or generating extraneous values. Moves that attempt to create numbers outside the initial set or rely on invalid operations\u2014such as combining numbers to produce non-existent intermediates\u2014are unpromising and lead to dead ends. Effective steps systematically reduce options while adhering strictly to the original numbers, ensuring progress toward 24 without violating game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 15 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 1.666... (discard, non-integer)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (discard, non-integer)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 6 = 9 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 / 3 = 5 (left: 5 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n3 * 5 = 15 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 + 15 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 * (15 / 3) = 45 (left: 45)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n(15 - 9) * 3 = 18 (left: 18 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n(15 - 9) + 9 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n(15 - 9) * 2 = 12 (left: 12 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\nAnswer: 15 + 9 = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\nAnswer: 15 + 9 = 24\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 15)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 for 24, prioritize forming 15 by multiplying 3\u00d75. Use 9 and 1 with addition or subtraction to create a target sum or difference\u2014e.g., (9 - 1) = 8 or (9 + 1) = 10. Combine these results with 15 through addition or subtraction to reach 24, such as (15 + 8 + 1) = 24, ensuring all steps use only original numbers and valid operations. Avoid intermediate results involving non-original numbers.",
                    "value_summary": "In the 1,3,5,9 puzzle, promising moves combine original numbers with +, \u2013, \u00d7, \u00f7 to produce valid intermediates, avoiding forming new numbers outside the initial set. Moves that rely on concatenation or creating non-original values are unpromising and violate rules. Effective steps progress logically toward 24 within permitted operations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 15 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 15 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 \u2248 1.666... (invalid)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (invalid)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                60.0,
                                20.002,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 9 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 9 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 + 15 = 24 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n6 * 4 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 * (15 / 5) = 27 (left: 9 15 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n(9 + 15) - 0 = 24 (left: 0 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 9 15)\n9 + 15 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 + 15 = 24 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 24)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 for 24, focus on combining 3 and 5 to make 15 (3\u00d75). Use 9 and 1 with addition/subtraction to create intermediate totals like 8 or 10. Avoid using non-original numbers; only combine the four given. Experiment with adding or subtracting these intermediates to reach 24, ensuring each step uses only the original numbers and valid operations. Prioritize forming 15 early, then adjust with remaining numbers.",
                    "value_summary": "Promising moves combine original numbers with basic operations to approach 24 without creating new or outside values, progressing logically; unpromising moves rely on concatenation or invalid value formation."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 15 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 15 5/3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 3/5 (left: 9 3/5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 24)\n"
                            ],
                            "values": [
                                20.002,
                                1.002,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\nAnswer: 3 * 5 = 15; 15 + 9 = 24\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 6 = 9 (left: 9 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 / 3 = 5 (left: 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n3 * 5 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 - 5 = 4 (left: 4 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 / 3 = 3 (left: 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n3 + 1 = 4 (left: 4 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n4 + 20 = 24 (not possible with current numbers)\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 24)\nAnswer: 3 * 5 = 15; 15 + 9 = 24\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 1)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 3, 5, 9 for 24, prioritize forming 15 early by multiplying 3\u00d75, then use 9 and 1 with addition or subtraction to create intermediate totals like 8 or 10. Avoid using any numbers not derived from the original set; do not introduce or assume values like 15 unless explicitly formed from given numbers. Focus on combining the original four numbers directly, experimenting with addition, subtraction, multiplication, or division, to reach 24 efficiently. Eliminate invalid steps that rely on non-original or undefined intermediate results.",
                    "value_summary": "For 1, 3, 5, 9, promising moves involve combining initial numbers with basic operations to approach 24 without creating or relying on external or invalid values. Moves that generate new, unintended, or non-existent values (e.g., concatenation or using numbers outside the original set) are unpromising and should be avoided. Valid steps progress logically toward 24 using only current, valid values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 9 = 45 (left: 1 3 45)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 + 9 = 12 (left: 1 5 12)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 - 1 = 4 (left: 3 4 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 5 = 4 (left: 1 4 3)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                20.002
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n9 - 1 = 8 (left: 3 8 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n15 - 9 = 6 (left: 3 6 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n15 - 6 = 9 (left: 3 8 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n3 + 9 = 12 (left: 12 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n12 + 8 = 20 (left: 20 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n20 - 5 = 15 (left: 15 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n15 - 3 = 12 (left: 12 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n12 + 12 = 24 (left: 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n9 - 5 = 4 (left: 4 1 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n9 - 1 = 8 (left: 3 5 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n5 * 3 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n3 + 1 = 4 (left: 4 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 * 5 = 15 (left: 9 15)\n3 - 1 = 2 (left: 2 5 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 1 = 8 (left: 3 5 8)\n9 - 1 = 8 (left: 3 8 15)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers 1, 3, 5, 9 to form intermediate results, avoiding any non-integer or non-original values like 15. Prioritize multiplying 3\u00d75=15, then combine 9 and 1 with addition or subtraction to reach 24 (e.g., 15 + 9). Focus on direct operations between the given numbers, ensuring all intermediate steps derive solely from 1, 3, 5, and 9.",
                    "value_summary": "For 1, 3, 5, 9, promising moves combine current numbers using basic operations to progress toward 24, ensuring all intermediate values originate solely from original numbers. Moves generating or relying on values outside the initial set\u2014such as concatenations, sums not directly formed from original numbers, or invalid steps\u2014are unpromising. Valid steps logically approach 24 without external or unintended values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 + 9 = 14 (left: 14 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 5 = 4 (left: 4 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 3 = 3 (left: 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 5 = 10 (left: 10 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 - 3 = 6 (left: 5 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 / 3 = 3 (left: 5 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n5 + 9 = 14 (left: 14 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n5 - 9 = -4 (left: -4 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 5 = 10 (left: 9 10)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n3 + 6 = 9 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n6 / 3 = 2 (left: 2 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n6 * 4 = 24 (left: 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n15 + 9 = 24 (left: 1 3 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n9 + 15 = 24 (left: 1 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n1 + 3 = 4 (left: 4 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n4 * 6 = 24 (left: 5 9 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 3, 5, 9, focus on combining these numbers through valid operations without reusing or dropping numbers improperly. Prioritize forming intermediate targets like 15 via 3\u00d75, then use addition or subtraction with 9 and 1 to reach 24; for example, 15 + 9 = 24. Avoid steps that involve creating non-integer or non-original values, such as combining numbers to produce 15 directly unless justified within rules. After initial operations, ensure all remaining numbers are used exactly once in subsequent steps. Recognize that splitting or reconstructing numbers outside permitted operations leads to invalid steps\u2014stick to direct addition, subtraction, multiplication, or division between the original numbers. This disciplined approach maximizes the chance of accurately reaching 24.",
                    "value_summary": "In the 24 game with numbers 1, 3, 5, 9, promising moves involve combining current numbers using basic operations to progress toward 24, ensuring all intermediate values originate solely from the original set. Valid steps must rely only on remaining numbers after each move, avoiding reuse or creation of external values. Moves that generate or depend on concatenations, sums outside the initial set, or reuse numbers improperly are unpromising. Consistently, steps that logically reduce the problem toward 24 without introducing invalid or extraneous values are considered promising, guiding efficient solution paths."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 1 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 5 = 4 (left: 15 4)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 5 = 14 (left: 1 14)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n3 + 1 = 4 (left: 4 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 - 1 = 4 (left: 4 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 + 1 = 6 (left: 6 15)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1 5)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 / 3 = 5 (left: 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 - 15 = -6 (left: -6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 + 15 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n3 + 5 = 8 (left: 8 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n9 / 3 = 3 (left: 15 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1 5)\n3 * 5 = 15 (left: 1 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1 5)\n15 + 9 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 + 9 = 24 (left: 1)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 24 with the numbers 1, 3, 5, and 9, focus on systematically combining pairs of numbers using basic operations, ensuring each number is used exactly once per step. Prioritize forming intermediate targets like 15 by multiplying 3 and 5, since 3\u00d75=15, which is close to a key component in reaching 24. After establishing 15, look for ways to incorporate 9 and 1 through addition or subtraction\u2014adding 15 and 9 yields 24 directly. Avoid combining numbers in ways that produce non-integer or invalid intermediate results; stick to straightforward operations of addition, subtraction, multiplication, and division between the original numbers. When combining, always verify that the new number is derived from the current set of remaining numbers, and do not reuse or drop numbers improperly. Keep the sequence logical and stepwise, preserving available numbers until they are combined into the target 24. This disciplined, step-by-step approach minimizes errors and enhances the likelihood of successfully reaching 24 with these four specific numbers.",
                    "value_summary": "In the 24 game with numbers 1, 3, 5, 9, promising moves are those that combine current values using valid operations while ensuring all intermediate results derive solely from the original set, avoiding external or concatenated values. Moves that directly reduce the problem toward 24\u2014such as multiplications or additions that approach 24\u2014are favorable, provided they use available numbers without reuse or invalid concatenation. Each step\u2019s legality depends on using only remaining numbers and newly generated values from prior operations. Unpromising steps involve reusing numbers improperly, creating disallowed concatenations, or producing intermediate values not justified by prior moves. Effective evaluation emphasizes logical progress toward 24, with each intermediate value traceable to initial numbers, ensuring the path remains feasible and within the game\u2019s rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n"
                            ],
                            "values": [
                                0.0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n9 * 3 = 27 (left: 1 27)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n9 + 15 = 24 (left: 1 24)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n15 - 3 = 12 (left: 1 12)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n9 + 15 = 24 (left: 1 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n15 + 9 = 24 (left: 1)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 3, 5, and 9, start by combining 3 and 5 to make 15 (3\u00d75=15). From the remaining numbers 15 and 9, adding them yields 24 (15+9=24), achieving the target directly. Ensure each step uses only remaining numbers, avoiding reusing or dropping numbers improperly. Do not attempt to combine 1 with others unless it facilitates reaching 24; it often remains unused if it doesn't contribute directly. Focus on forming intermediate totals like 15 through multiplication, then combine with the leftover number (9) via addition. This disciplined approach\u2014multiplying to get close to or reach key totals, then adding\u2014maximizes efficiency and minimizes errors for this specific set.",
                    "value_summary": "In the 24 game with numbers 1, 3, 5, 9, promising moves are those that combine remaining values using valid operations\u2014addition, subtraction, multiplication, or division\u2014while strictly using only the current set of numbers without reuse or concatenation. Moves should logically progress toward 24, ideally producing intermediate results closer to the target without invalidly reusing numbers or creating disallowed values. Illegal moves occur when operations involve numbers no longer available, reuse of numbers, or produce results not justified by previous steps. Effective evaluation emphasizes a clear, traceable path from initial numbers to 24, ensuring each step maintains rule compliance and logical progression toward the goal."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 = 5/3 (left: 5/3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: -6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 3/5 (left: 3/5)\n"
                            ],
                            "values": [
                                0.0,
                                20.002,
                                60.0,
                                0.003,
                                0.0,
                                0.002,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n9 + 15 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n5 * 3 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n9 + 15 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n15 * 9 = 135 (left: 1 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n15 + 9 = 24 (left: 1 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n15 + 9 = 24 (left: 1 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n1 + 3 = 4 (left: 4 5 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n4 + 5 + 9 = 18 (not leading directly to 24, so ignore)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 15 = 135 (left: 135)\n1 + 3 + 5 + 9 = 18 (not directly 24, ignore)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n15 + 9 = 24 (left: 1)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 3, 5, and 9, prioritize forming key intermediate totals through valid operations. Begin by multiplying 3 and 5 to create 15 (3\u00d75=15), ensuring all steps use only remaining numbers. Use 15 and 9 to reach 24 via addition (15+9=24); this leverages the larger numbers efficiently. Avoid combining 1 with others unless it directly contributes to reaching 24, as it often remains unused. Confirm each intermediate result is derived from the original numbers without reusing or misusing values. Focus on multiplying to reach significant totals like 15, then add leftover numbers to finalize 24, minimizing errors and streamlining the solution process.",
                    "value_summary": "For the 24 game with initial numbers 1, 3, 5, 9, promising moves are those that combine available numbers using valid operations\u2014addition, subtraction, multiplication, or division\u2014while maintaining a clear, rule-compliant progression toward 24. Moves are promising when they produce intermediate results closer to the target without reusing numbers or creating invalid values. Illegal moves occur when operations involve numbers not currently available, reuse previous results improperly, or produce results outside the permissible set. Each step should be traceable, building logically toward 24, with no assumptions of unearned values. Evaluating moves involves verifying that each operation uses only remaining numbers, produces justified intermediate results, and maintains the integrity of the sequence. Effective moves facilitate a clear, rule-abiding path to 24, while invalid steps break the logical progression."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 * 1 = 9 (left: 9 15)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 9 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 9 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n9 + 15 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n15 * 1 = 15 (left: 9 15 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n3 * 5 = 15 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n3 + 5 = 8 (left: 9 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n9 + 15 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n9 * 3 = 27 (left: 27 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n15 - 9 = 6 (left: 6 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n6 + 15 = 21 (left: 21 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n3 + 5 = 8 (left: 9 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 9 15)\n9 + 15 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                60.0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 1 = 15 (left: 9 15)\n9 + 15 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 24 with 1, 3, 5, and 9, focus on creating key intermediate totals, especially 15, by multiplying 3 and 5 (3\u00d75=15). This leverages larger numbers early and simplifies subsequent steps. After forming 15, combine it with 9 via addition (15+9=24) to reach the target. Avoid involving 1 unless it directly facilitates intermediate totals; since 1 rarely contributes to reaching 24 in this set, it\u2019s best left unused unless necessary. When combining numbers, always perform operations on confirmed, original-derived values\u2014never skip intermediate steps or combine non-validated pairs. The most straightforward route is: multiply 3 and 5 to get 15, then add 9 to reach 24. This minimizes complexity and errors. Refrain from multiplying 15 directly by 9 without prior steps, as that results in invalid or impossible calculations within the rules. Prioritize forming 15 and then adding 9, avoiding unnecessary or invalid operations involving 1.",
                    "value_summary": "Promising moves combine remaining numbers using valid operations to produce intermediate results closer to 24, maintaining a clear logical progression without reuse or invalid values. Moves leading to results like 135 are impossible; effective steps reduce complexity toward 24, while invalid moves break the logical chain, hindering solution progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: )\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 9 \u2248 1.6667 (left: 1.6667)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: -6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n9 * 5 = 45 (left: 1 3 45)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n15 + 9 = 24 (left: 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n15 * 1 = 15 (left: 9 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n15 + 9 = 24 (left: 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n15 + 3 = 18 (left: 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n15 + 5 = 20 (left: 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n3 * 5 = 15 (left: 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n9 + 15 = 24 (left: 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n3 + 5 = 8 (left: 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n9 * 3 = 27 (left: 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n5 * 3 = 15 (left: 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6)\n9 + 15 = 24 (left: 3)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n9 * 5 = 45 (left: 1 3 45)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 15 = 0.6 (left: 0.6)\n3 * 5 = 15 (left: 1 9 15)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 3, 5, and 9, prioritize forming intermediate totals that simplify reaching 24. The most effective approach is to multiply 3 and 5 to get 15 (3\u00d75=15), leveraging the larger numbers early. Next, add 9 to 15 (15+9=24), directly reaching the target. Avoid involving 1 unless it facilitates creating key totals; in this set, 1 is generally unnecessary because it doesn't contribute efficiently to reaching 24. When combining numbers, always perform operations on original or validated intermediate results, ensuring no reuse of the same number more than once per step. Do not attempt to multiply 15 by 9 directly, as that overshoots or complicates the goal; instead, stick to the straightforward path: generate 15, then add 9. Refrain from combining 1 into calculations unless it explicitly aids in forming an intermediate total, which is unnecessary here. Focus on clean, direct operations that build towards 24 with minimal steps and complexity.",
                    "value_summary": "For the 1, 3, 5, 9 puzzle, promising moves produce intermediate results closer to 24 using valid operations, ensuring no reuse or dropping of original numbers. Moves that create new values not present in the initial set\u2014like directly forming 15 from 5+10 or 15*1\u2014are invalid. Effective steps maintain a clear logical progression without violating the rules, reducing complexity toward 24. Conversely, moves that involve using numbers outside the initial set, reuse numbers improperly, or drop remaining numbers break the logical chain, rendering the step invalid. Focus on combining only the original numbers with valid operations to generate intermediate results; any move involving external or non-allowed values is unpromising."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n9 + 15 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 9 = 135 (left: 135)\n9 + 15 = 24 (left: 1)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently reach 24 with 1, 3, 5, and 9, focus on forming key intermediate totals that lead directly to 24. Prioritize multiplying 3 and 5 to obtain 15 (3\u00d75=15), then add 9 to reach 24 (15+9=24). This straightforward path minimizes complexity and steps. Avoid involving 1 unless it simplifies operations, as it doesn't contribute efficiently here. Do not attempt to combine 1 with other numbers unless necessary, because it adds unnecessary complication. Refrain from combining numbers that don't produce useful intermediate totals\u2014specifically, avoid invalid operations like dividing 9 by a non-derived 15. Keep operations simple, direct, and based on using the larger numbers first to build toward 24. This approach ensures a minimal, reliable solution pathway for this specific set.",
                    "value_summary": "Promising moves combine original numbers using valid operations to produce intermediate results closer to 24 without reusing or dropping numbers. Moves involving external values, invalid reuse, or breaking logical progression are unpromising; focus on direct, rule-compliant combinations toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 - 9 = 6 (left: 15 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 * 2 = 30 (left: 30 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 + 15 = 24 (left: 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 3 9)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 / 3 = 3 (left: 15 3)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 / 5 = 3 (left: 15 3)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 3 5 9",
                            "ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n"
                            ],
                            "new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 + 9 = 24 (left: 1 3 5)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 / 3 = 5 (left: 5 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n5 * 3 = 15 (left: 5 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n5 + 1 = 6 (left: 3 6)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n5 - 1 = 4 (left: 3 4)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n9 / 3 = 3 (left: 15 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n3 * 8 = 24 (left: 15 8)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n5 * 3 = 15 (left: 15 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n3 + 1 = 4 (left: 15 4)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n15 * 1 = 15 (left: 15)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n15 + 9 = 24 (left: 15)\n15 + 9 = 24 (left: 3)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 1)\n",
                                "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n9 - 15 = -6 (left: 9 15)\n15 + 9 = 24 (left: 1 3 5)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 3, 5, and 9, focus on forming effective intermediate totals that can lead directly to 24. The most promising initial step is multiplying 5 and 3 to get 15, as this combines two larger numbers efficiently. From there, multiplying 15 by 9 yields 135, which is too large and cannot be manipulated to reach 24 directly. The key insight is that once you have 15 and 9, combining them overshoots the target, and the remaining number 1 cannot help bridge the gap. Therefore, avoid multiplications involving 9 after creating 15, as they lead away from 24. Instead, consider alternative operations, such as adding or subtracting smaller numbers, or dividing, but only if they produce intermediate totals closer to 24. Overall, prioritize combining 5 and 3 for 15, then explore operations with remaining numbers\u2014recognizing that multiplying 15 by 9 exceeds 24 and doesn't help. This targeted approach minimizes extraneous steps and helps identify dead ends early.",
                    "value_summary": "Prioritize direct, valid combinations toward 24; avoid external values, reuse, or breaking rules. Focus on intermediate results closer to 24 to ensure promising progress."
                }
            ],
            "env_info": [
                {
                    "action": "9 / 3 = 3 (left: 1 3 8)\n1 - 8 = -7 (left: -7 3 8)  \n3 * 8 = 24 (left: -7 24)\n-7 + 24 = 17 (left: -7 17)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: 1 5)\n3 * 8 = 24 (left: 8, result: 24)\n48 / 2 = 24 (left: 48)\n9 / 3 = 3 (left: 1 5 3)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "9 - 5 = 4 (left: 1 3 4)\n4 * 6 = 24 (left: 1 3 8)\n3 * 8 = 24 (left: 1)\n1 (no operations possible with a single number)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "1 * 9 = 9 (left: 3 5 9)\n3 * 5 = 15 (left: 15 9)\n5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 - 9 = 6 (left: 6)\n6 * 4 = 24 (left: )\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "9 + 15 = 24 (left: 24)\nAnswer: 9 + (3 * 5) = 24\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 - 9 = 6 (left: 6 1)\n6 - 1 = 5 (left: 5 6)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 - 6 = 9 (left: 9 15)\n9 + 15 = 24 (left: )\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 + 9 = 24 (left: 24)\nAnswer: 3 * 5 + 9 = 24\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 + 9 = 24 (left: 24)\nAnswer: 15 + 9 = 24\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "9 - 15 = -6 (left: 9 15)\n9 + 15 = 24 (left: 9 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 + 9 = 24 (left: 24)\nAnswer: 3 * 5 = 15; 15 + 9 = 24\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "9 - 1 = 8 (left: 3 5 8)\n3 * 5 = 15 (left: 1 9 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "5 * 3 = 15 (left: 15 9)\n15 - 9 = 6 (left: 6 1)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 + 9 = 24 (left: )\n3 * 5 = 15 (left: 1 9 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 * 1 = 15 (left: 9 15)\n\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "9 / 15 = 0.6 (left: 0.6)\n9 * 5 = 45 (left: 1 3 45)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "15 * 9 = 135 (left: 135)\n3 * 5 = 15 (left: 1 9 15)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                },
                {
                    "action": "9 - 15 = -6 (left: 9 15)\n15 - 9 = 6 (left: 6 1)\n",
                    "history": [
                        "1 * 9 = 9 (left: 3 5 9)",
                        "3 * 5 = 15 (left: 15 9)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 1649100,
                "prompt_tokens": 923265,
                "cost": 0.7519665
            }
        },
        {
            "idx": 907,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 + 6 = 9 (left: 9 9 2)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n",
                                "9 - 6 = 3 (left: 3 3 2)\n",
                                "9 / 3 = 3 (left: 3 3 2)\n",
                                "3 + 3 = 6 (left: 6 2)\n",
                                "6 * 2 = 12 (left: 12)\n",
                                "12 * 2 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "3 + 6 = 9 (left: 9 9 2)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "3 + 6 = 9 (left: 9 9 2)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n"
                            ],
                            "new_ys": [
                                "3 + 6 = 9 (left: 9 9 2)\n9 - 9 = 0 (left: 0 2)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n9 + 9 = 18 (left: 2 18)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n9 * 9 = 81 (left: 81 2)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n9 / 9 = 1 (left: 1 2)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n2 + 9 = 11 (left: 11)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n2 - 9 = -7 (left: -7)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n2 * 9 = 18 (left: 18)\n",
                                "3 + 6 = 9 (left: 9 9 2)\n2 / 9 \u2248 0.222 (left: 0.222)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n9 - 5 = 4 (left: 4 9)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n9 / 3 = 3 (left: 3 9)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n8 - 4 = 4 (left: 4 8)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n6 * 4 = 24 (left: 24)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n12 * 2 = 24 (left: 12)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n48 / 2 = 24 (left: 48)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n36 / 1.5 = 24 (left: 36 1.5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n6 * 4 = 24 (left: 24)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n6 * 4 = 24 (left: 24)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n"
                            ],
                            "new_ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n6 * 4 = 24 (left: 24)\nAnswer: (6 / 3) * (9 - 3) = 24\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n7 + 17 = 24 (left: )\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 - 7 = 10 (left: 10)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n7 * 17 = 119 (left: 119)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 / 7 \u2248 2.43 (not useful for reaching 24)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n"
                            ],
                            "values": [
                                0.002,
                                0.0,
                                0.003,
                                0.003,
                                0.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 - 7 = 10 (left: 10)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 - 7 = 10 (left: 10)\n"
                            ],
                            "new_ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n7 + 17 = 24 (left: 24)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n17 - 7 = 10 (left: 10)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n7 * 17 = 119 (left: 119)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n17 / 7 \u2248 2.43 (discard, not an integer result)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 - 7 = 10 (left: 10)\n10 + 14 = 24 (left: )\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 - 7 = 10 (left: 10)\n10 * 2.4 = 24 (left: )\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n17 - 7 = 10 (left: 10)\n(Note: Since only the number 10 is provided and no other numbers are given, no further steps are possible.)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n7 + 17 = 24 (left: 24)\n",
                                "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n17 - 7 = 10 (left: 10)\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 3 9)\n",
                                "9 - 3 = 6 (left: 6 6)\n",
                                "8 + 16 = 24 (left: 2 2)\n",
                                "6 * 4 = 24 (left: 3 8)\n",
                                "3 * 8 = 24 (left: 6)\n",
                                "9 - 6 = 3 (left: 3 2)\n",
                                "2 * 12 = 24 (left: 3 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n",
                                "6 * 4 = 24 (left: 3 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 * 4 = 24 (left: 3 8)\n",
                                "6 * 4 = 24 (left: 3 9)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 * 4 = 24 (left: 3 8)\n\n",
                                "6 * 4 = 24 (left: 3 9)\n3 + 9 = 12 (left: 12)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 9 = 27 (left: 27)\n",
                                "6 * 4 = 24 (left: 3 9)\n9 - 3 = 6 (left: 6)\n"
                            ],
                            "values": [
                                0.0,
                                60.0,
                                0.003,
                                1.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 9 = 27 (left: 27)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 9 = 27 (left: 27)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n3 + 8 = 11 (left: 11 3)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n8 - 3 = 5 (left: 5 8)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n8 / 3 \u2248 2.666 (invalid, not integer)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n3 * 8 = 24 (left: 24)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 9 = 27 (left: 27)\n27 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                60.0,
                                0.0
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n\n",
                                "6 * 4 = 24 (left: 3 8)\n\n3 * 8 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n\n",
                                "6 * 4 = 24 (left: 3 8)\n\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n\n3 + 8 = 11 (left: 11 3)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n\n8 - 3 = 5 (left: 5 8)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n\n8 / 3 \u2248 2.666... (not an integer, discard)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n\n3 * 8 = 24 (left: 24)\n",
                                "6 * 4 = 24 (left: 3 8)\n\n\n\n",
                                "6 * 4 = 24 (left: 3 8)\n\n3 * 8 = 24 (left: 24)\nAnswer: 6 * 4 = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 3 8)\n\n\n\n",
                                "6 * 4 = 24 (left: 3 8)\n\n3 * 8 = 24 (left: 24)\nAnswer: 6 * 4 = 24\n"
                            ]
                        }
                    ],
                    "summary": "Use each number exactly once, combining them through valid operations without reusing or dropping numbers improperly. Focus on straightforward combinations like multiplying or adding to reach 24, rather than dividing unless it results in a clear, legal step. Avoid steps that reuse or ignore the original set; for example, dividing 6 by 3 is valid if both numbers are available and used simultaneously. Prioritize operations that reduce the set systematically toward 24, ensuring all steps are legal and consistent.",
                    "value_summary": "In evaluating moves for the 24 game with numbers 2, 3, 6, 9, the key is to assess the legality and strategic value of each operation. Legally, an operation is promising if it combines two numbers using permitted operations (addition, subtraction, multiplication, division) without reusing numbers or violating rules. For promising moves, the resulting number should simplify the remaining set toward 24, ideally reducing complexity or creating favorable pathways. Moves that produce intermediate results aligning closely with factors of 24 or enabling straightforward subsequent steps are high-value; for example, dividing 6 by 3 to get 2 or multiplying 3 by 6 to approach 24. Conversely, unpromising steps are those that produce results far from 24 or do not effectively reduce the problem's complexity, such as unnecessary operations that do not bring the total closer to 24. Ultimately, promising moves maintain legality, reduce the problem size, and steer the trajectory toward a solution efficiently, while unpromising moves stray from these principles."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 3 9)\n",
                                "3 * 8 = 24 (left: 6 9)\n",
                                "9 * (3 - 1) = 24 (left: 6 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 3 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "3 * 8 = 24 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 3 9)\n"
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n6 * 4 = 24 (left: 9)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 = 24 (left: 6 9)\n",
                                "3 * 8 = 24 (left: 6 9)\n6 * 4 (where 4 = 2 * 2) (left: 9 2 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 8 = 24 (left: 9)\n",
                                "6 * 4 = 24 (left: 3 9)\n6 * 4 = 24 (left: 9)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 8 = 24 (left: 9)\n",
                                "6 * 4 = 24 (left: 3 9)\n9 * 2.666... = 24 (not valid as 2.666...)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 8 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 8 = 24 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 8 = 24 (left: 9)\n"
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n3 * 8 = 24 (left: 3 8)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n4 * 6 = 24 (left: 4 6)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 4 = 24 (left: 6 4)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n2 * 12 = 24 (left: 2 12)\n",
                                "6 * 4 = 24 (left: 3 9)\n3 * 8 = 24 (left: 9)\n6 * 4 = 24 (left: 9, 2, 3)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                40.001
                            ],
                            "select_new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 3 6 9",
                            "ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n"
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 12)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 - 2 = 10 (left: 10 12)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 + 2 = 14 (left: 14 12)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 / 12 = 1 (left: 1 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 - 12 = 0 (left: 0 2)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 * 2 = 24 (left: 24)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n2 * 12 = 24 (left: 24)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 + 12 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 12)\n",
                                "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 - 2 = 10 (left: 10 12)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 for 24, focus on combining the numbers through valid operations without introducing new values. Key strategies include: multiplying 6 by 4 (which can be formed as 2\u00d72 or 3\u22121 if allowed), or directly multiplying 3 and 8 (if 8 can be formed from the remaining numbers). Since 4 or 8 are not directly available, prioritize combining 6 and 4, or 3 and 8, by creating these intermediate values through valid operations. Use pairs to reach 24 via multiplication or addition, ensuring each number is used exactly once without invalid steps.",
                    "value_summary": "In evaluating moves for the numbers 2, 3, 6, 9, prioritize legality, simplicity, and strategic progression toward 24. A move is promising if it combines two numbers using permitted operations\u2014addition, subtraction, multiplication, or division\u2014without reusing or inventing new values. Promising steps reduce problem complexity and produce intermediate results that facilitate reaching 24, such as factors or multiples close to 24. Unpromising moves involve illegal operations or results that do not advance toward 24, especially if they produce invalid intermediate values or fail to simplify the remaining set. Ultimately, effective moves maintain legality, reduce the remaining numbers, and create clear pathways toward forming 24 efficiently."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 * 8 = 24 (left: 9 8)\n",
                                "6 * 4 = 24 (left: 9 4)\n",
                                "9 - 3 = 6 (left: 6 8)\n",
                                "6 * 4 = 24 (left: 8 4)\n",
                                "3 * 8 = 24 (left: 6 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n",
                                "3 * 8 = 24 (left: 6 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "9 - 3 = 6 (left: 6 8)\n",
                                "3 * 8 = 24 (left: 6 8)\n"
                            ],
                            "new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n6 * 4 = 24 (left: 9 8)\n",
                                "9 - 3 = 6 (left: 6 8)\n3 * 8 = 24 (left: 6 9)\n",
                                "9 - 3 = 6 (left: 6 8)\n6 * 4 = 24 (left: 3 9)\n",
                                "9 - 3 = 6 (left: 6 8)\n3 * 8 = 24 (left: 6 9)\n",
                                "9 - 3 = 6 (left: 6 8)\n9 - 3 = 6 (left: 6 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n",
                                "9 - 3 = 6 (left: 6 8)\n3 * 8 = 24 (left: 6 9)\n",
                                "3 * 8 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n"
                            ],
                            "new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n6 - 4 = 2 (left: 6 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n6 / 2 = 3 (left: 3 4)\n",
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n4 / 2 = 2 (left: 6 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n3 * 2 = 6 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n6 / 1.5 = 4 (left: 6 4)\n4 * 6 = 24 (left: )\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 3)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                40.001,
                                40.001,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 3 6 9",
                            "ys": [
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n"
                            ],
                            "new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 * 4 = 24 (left: 9 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 * 3 = 18 (left: 9 2 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 + 9 = 15 (left: 3 2 15)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 - 3 = 3 (left: 9 2 3)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 / 2 = 3 (left: 9 3 3)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n6 * 4 = 24 (left: 9 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n3 * 8 = 24 (left: 6 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(3 * 2) * 4 = 24 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(6 / 3) * 4 = 8 (left: 9 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(9 - 6) * 4 = 12 (left: 3 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(2 + 4) * 3 = 18 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(3 + 6) * 2 = 18 (left: 9)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(9 - 3) * 2 = 12 (left: 6)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(6 / 2) * 4 = 12 (left: 9)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n6 * 4 = 24 (left: 8)\n(9 - 4) * 2 = 10 (left: 6 3)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 * 4 = 24 (left: 9 2)\n",
                                "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 * 3 = 18 (left: 9 2 6)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 for 24, focus on forming intermediate values from these numbers using valid operations. Since 8 and 4 are not directly available, avoid attempting to create these via invalid steps. Instead, explore multiplications like 6\u00d74 or 3\u00d78 only if those values are legitimately formed from existing numbers. For example, combine 3 and 2 to make 6, then multiply 6 by 4 (which can be 2\u00d72). Prioritize straightforward pairings\u2014such as 6\u00d74 or (3\u00d72)\u00d74\u2014ensuring all original numbers are used exactly once. Avoid invalid operations that introduce non-existent intermediate values.",
                    "value_summary": "Effective moves combine two numbers legally to produce intermediate results that simplify the path toward 24, ideally creating factors or close multiples. Unpromising moves involve illegal operations or results that do not reduce complexity or aid in reaching 24 efficiently."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "3 * 6 = 18 (left: 2 9 18)\n",
                                "9 - 3 = 6 (left: 2 6 6)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n",
                                "6 / 2 = 3 (left: 3 9 4)\n",
                                "9 - 4 = 5 (left: 2 5 6)\n",
                                "6 * 4 = 24 (left: 2 9 4)\n",
                                "3 * 8 = 24 (left: 2 6 8)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                40.001,
                                0.003,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "9 - 3 = 6 (left: 2 6 6)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "9 - 3 = 6 (left: 2 6 6)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n"
                            ],
                            "new_ys": [
                                "9 - 3 = 6 (left: 2 6 6)\n6 * 4 = 24 (left: 3 9)\n",
                                "9 - 3 = 6 (left: 2 6 6)\n3 * 8 = 24 (left: 6 9)\n",
                                "9 - 3 = 6 (left: 2 6 6)\n9 - 3 = 6 (left: 6 6)\n",
                                "9 - 3 = 6 (left: 2 6 6)\n6 * 4 = 24 (left: 3 9)\n",
                                "9 - 3 = 6 (left: 2 6 6)\n3 * 8 = 24 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n6 * 4 = 24 (left: 2)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n3 * 8 = 24 (left: 2, 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n9 - 6 = 3 (left: 2, 3, 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(8 - 2) * 3 = 24 (left: 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 3) * 2 = 12 (left: 4, 12)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(8 / 2) * 3 = 12 (left: 4, 12)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n8 - 3 = 5 (left: 5)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n8 / 3 \u2248 2.666... (invalid, not integer)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n3 * 8 = 24 (left: 12)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n12 / 0.5 = 24 (left: 2)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n(Invalid: no 4 or 6 present in initial set, so ignoring these)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                1.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 * 8 = 24 (left: 24)\nAnswer: 6 * 4 = 24\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n9 - 2 = 7 (left: 7 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n9 / 3 = 3 (left: 3 6 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n6 / 2 = 3 (left: 3 3 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n3 + 3 = 6 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n3 * 2 = 6 (left: 6 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n9 - 3 = 6 (left: 6 2)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n6 + 3 = 9 (left: 2 9)\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n9 / 3 = 3 (left: 3 2)\n"
                            ],
                            "values": [
                                0.0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 * 8 = 24 (left: 24)\nAnswer: 6 * 4 = 24\n",
                                "6 * 4 = 24 (left: 2 6 4)\n(9 - 6) * 4 = 12 (left: 2, 12)\n6 * 4 = 24 (left: 9, 2)\n9 - 2 = 7 (left: 7 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 for 24, focus on valid operations that combine these numbers without reuse or omission. Prioritize straightforward pairings like 6\u00d74 or (3\u00d72)\u00d74, but only create intermediate values from original numbers. Avoid steps that reuse numbers improperly or produce invalid intermediate values. Recognize that subtracting or adding should only involve available numbers, and each number must be used exactly once. For example, multiplying 3 and 6 gives 18; then, combining with 2 or 9 to reach 24 requires careful pairing. Always verify that each step uses current remaining numbers correctly, ensuring a legal progression toward 24.",
                    "value_summary": "In evaluating moves for the numbers 2, 3, 6, 9, effective steps are those that combine two numbers legally to produce intermediate results that simplify the path toward 24, such as creating factors or multiples close to 24. Moves that reuse numbers improperly or produce invalid results are unpromising. For this specific set, operations like subtracting 3 from 9 to get 6 are valid if they use available numbers and produce new, unused results, maintaining the set\u2019s integrity. However, steps that result in duplicate numbers or violate rules\u2014such as reusing numbers or dropping them improperly\u2014are considered impossible or illegal. The goal is to choose moves that reduce complexity, preserve legal use of each number once, and produce intermediate values that guide efficiently toward 24. Legal, strategic combinations\u2014like multiplying or dividing to approach 24\u2014are most promising, while illegal or redundant moves hinder progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "6 * 3 = 18 (left: 2 9 18)\n",
                                "6 + 3 = 9 (left: 2 9 9)\n",
                                "9 - 6 = 3 (left: 2 3 3)\n",
                                "9 / 3 = 3 (left: 2 3 3)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n",
                                "2 + 9 = 11 (left: 3 6 11)\n",
                                "6 * 2 = 12 (left: 3 9 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n",
                                "3 * 8 = 24 (left: 9)\n",
                                "3 + 8 = 11 (left: 9 11)\n"
                            ],
                            "values": [
                                0.003,
                                1.002,
                                0.003,
                                20.002,
                                40.001,
                                20.002,
                                20.002,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n18 / 6 = 3 (left: 3 3 12)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n6 * 3 = 18 (left: 9 2)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n6 / 2 = 3 (left: 9 3)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n9 - 6 = 3 (left: 3 3)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n9 / 3 = 3 (left: 6 3)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n6 - 3 = 3 (left: 9 3)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n3 + 3 = 6 (left: 9 6)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n3 * 3 = 9 (left: 6 9)\n",
                                "2 * 9 = 18 (left: 3 6 18)\n6 * 3 = 18 (left: 9 2)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                41.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n6 * 3 = 18 (left: 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n6 + 3 = 9 (left: 9 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n18 - 6 = 12 (left: 12 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n18 / 6 = 3 (left: 3 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 * 3 = 27 (left: 6 27)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 3 = 12 (left: 6 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 * 3 = 18 (left: 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n3 * 6 = 18 (left: 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n9 - 6 = 3 (left: 3 3 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n3 * 6 = 18 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n3 + 3 = 6 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n6 * 3 = 18 (left: 2 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n6 / 2 = 3 (left: 3 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n9 - 6 = 3 (left: 3 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n3 * 8 = 24 (left: 2 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n3 + 3 = 6 (left: 6 2 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n6 * 4 = 24 (left: 2 9 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n6 * 3 = 18 (left: 9 2)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n6 + 6 = 12 (left: 3 9 2)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n9 * 2 = 18 (left: 6 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n18 + 6 = 24 (left: 3 2)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n9 + 3 = 12 (left: 6 2 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n6 * 2 = 12 (left: 3 9 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n6 + 3 = 9 (left: 9 2 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 6 6 12)\n6 / 2 = 3 (left: 3 9 3)\n3 * 8 = 24 (left: 6 9 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n6 * 3 = 18 (left: 2 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n6 / 2 = 3 (left: 3 9)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers (2, 3, 6, 9) in each step, combining them with addition, subtraction, multiplication, or division to reach 24. Prioritize multiplying 6 by 3 to get 18, then add 6 divided by 2 (which equals 3) or other combinations to reach 24. Avoid introducing any new numbers or invalid intermediate steps.",
                    "value_summary": "Effective moves combine two available numbers to produce intermediate results that simplify toward 24, emphasizing valid operations that reduce complexity and avoid duplicates. Unpromising steps either reuse numbers improperly, create invalid or redundant results, or fail to progress toward a solution. Legal, strategic combinations remain the most promising."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 / 3 \u2248 2.666... (invalid, skip)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 * 8 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 - 9 = 2 (left: 2 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 - 9 = 2 (left: 2 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 / 9 \u2248 1.22 (invalid for 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n9 * 2 = 18 (left: 18 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 - 9 = 2 (left: 2 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 / 9 \u2248 1.22 (invalid for 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 - 5 = 4 (left: 4 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n6 / 3 = 2 (left: 2 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n6 - 3 = 3 (left: 3 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n6 / 2 = 3 (left: 3 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n4 + 3 = 7 (left: 7 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n4 * 3 = 12 (left: 12 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n3 + 3 = 6 (left: 6 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 - 9 = 2 (left: 2 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 - 9 = 2 (left: 2 11)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 + 3 = 6 (left: 4 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 * 3 = 9 (left: 4 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n4 * 6 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n4 * 3 = 12 (left: 3 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n6 + 4 = 10 (left: 3 10)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n6 - 4 = 2 (left: 3 2)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 + 4 = 7 (left: 3 7)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 - 4 = -1 (left: -1 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 * 4 = 12 (left: 3 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 / 3 = 1 (left: 1 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n11 - 9 = 2 (left: 2 11)\n11 + 13 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 + 3 = 6 (left: 4 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 * 3 = 9 (left: 4 9)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 6 and 3 early by multiplying: 6\u00d73=18, then use addition or subtraction with remaining numbers. Avoid invalid steps like reusing a number multiple times or creating intermediate totals not achievable from current numbers. Prioritize operations that simplify toward 24, such as (6\u00d73) + (remaining numbers adjusted), and verify each step uses only the original numbers exactly once.",
                    "value_summary": "Effective moves produce valid, strategic intermediate results that simplify toward 24 without reuse errors or redundancy. Unpromising steps involve illegal operations, improper reuse of numbers, or results that do not progress toward solving the puzzle efficiently."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 3 = 6 (left: 2 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 12 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n9 * 2 = 18 (left: 18 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n3 * 8 = 24 (left: 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n3 + 21 = 24 (left: 18 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n18 + 6 = 24 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n18 - 6 = 12 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n18 / 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n8 / 2 = 4 (left: 3 2)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n9 * 2 = 18 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n9 + 15 = 24 (left: 3 15)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n3 * 8 = 24 (left: 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n2 * 9 = 18 (left: 3 18)\n3 * 8 = 24 (left: 18)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                1.002,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n18 / 6 = 3 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n6 * 3 = 18 (left: 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n18 / 6 = 3 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n3 * 8 = 24 (left: 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n18 / 6 = 3 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n18 - 6 = 12 (left: 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n18 / 6 = 3 (left: 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n6 * 3 = 18 (left: 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n3 * 8 = 24 (left: 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n8 + 6 = 14 (left: 14)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n18 / 3 = 6 (left: 18 6)\n6 + 12 = 18 (left: 18)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n18 / 6 = 3 (left: 3 18)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n6 * 3 = 18 (left: 18)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize combining 6 and 3 early via multiplication (6\u00d73=18). Use remaining numbers\u20142 and 9\u2014to reach 24 by multiplying (2\u00d712) or adding/subtracting to reach 24 directly. Avoid steps leading to intermediate totals (like 5 and 9) that cannot combine to 24. Focus on operations that directly convert initial pairs into 24, ensuring each number is used once.",
                    "value_summary": "Effective moves generate valid, strategic intermediate results that simplify towards 24 without reuse errors or redundancy. Unpromising steps involve illegal operations, improper reuse of numbers, or results that impede progress. For 2, 3, 6, 9, prioritize operations combining these numbers into intermediate totals closer to 24, avoiding steps that produce dead ends or violate game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n3 + 8 = 11 (left: 9 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 - 3 = 5 (left: 5 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n8 / 8 = 1 (left: 1 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 - 8 = 1 (left: 1 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 * 8 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 3 \u2248 2.666 (not an integer, discard)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (6 + 2) = 24\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible with a single number)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 + 19 = 24 (left: 19)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 * 4.8 = 24 (left: 4.8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 + 19 - 0 = 24 (left: 19 0)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 * 4.8 = 24 (left: 4.8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 + 19 = 24 (left: 19)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 * 4.8 = 24 (left: 4.8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible with a single number)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n5 + 19 = 24 (left: 19)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9, avoid creating intermediate totals not present in the initial set. Prioritize combining 6 and 3 early via multiplication: 6\u00d73=18, but recognize that 18 isn't an original number. Instead, seek operations combining initial numbers directly to reach 24. For example, multiply 3 by 2 to get 6, then combine with remaining numbers using addition or subtraction to reach 24. Focus on operations that use each number once and produce intermediate totals that can combine to 24 without introducing invalid intermediate values.",
                    "value_summary": "In evaluating moves for 2, 3, 6, 9, prioritize operations that produce valid, strategic intermediates closer to 24 without reuse errors. Valid steps should involve legal calculations using available numbers, resulting in new numbers that facilitate progress. Moves involving illegal operations, improper reuse, or resulting in dead-end totals are unpromising. After each step, confirm the remaining numbers are consistent with the previous state. Effective moves simplify the puzzle toward 24, while illegal or redundant steps hinder progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n"
                            ],
                            "values": [
                                0.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n6 * 4 = 24 (left: 3 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n9 - 6 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n6 * 4 = 24 (left: 3 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n6 * 4 = 24 (left: 3 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9, focus on combining initial numbers without creating invalid intermediates. Prioritize early multiplication of 3 and 2 to get 6, then use addition or subtraction with remaining numbers to reach 24. For example, multiplying 3\u00d72=6 and adding 6 and 9 (6+9=15), then combining with 3 or 2 to reach 24. Avoid unnecessary intermediate totals not in the original set. Use straightforward operations, emphasizing multiplication and addition/subtraction combinations that directly or indirectly lead to 24 without introducing invalid intermediates.",
                    "value_summary": "Prioritize legal operations that produce intermediate results closer to 24, avoiding dead-ends or impossible totals; focus on simplifying toward 24 with valid, strategic steps using remaining numbers."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 3 \u2248 2.6667 (left: 2.6667)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 8) = 24\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible)\n"
                            ],
                            "values": [
                                0.002,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (3 * 8) = 24\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 for 24, focus on combining the numbers using only valid operations and original numbers. Prioritize forming 6 by multiplying 2 and 3 (2\u00d73=6), then combine with remaining numbers. For instance, multiplying 3\u00d76=18, then adding 6 and 9 to reach 24 is invalid since 6+9=15, not 24. Instead, consider multiplying 6\u00d74, but 4 isn't in the set. Alternatively, multiply 2\u00d79=18, then add 6+ (remaining operations) to reach 24. Valid solutions include (2\u00d79)+(6\u22123)=24, since 2\u00d79=18 and 6\u22123=3, sum to 21\u2014close but not 24. The key is to form intermediate totals solely from original numbers, then combine via addition or subtraction to reach 24. Avoid using numbers outside the set. The most straightforward approach is to multiply 2\u00d73=6, then find ways to add or subtract remaining numbers to reach 24, such as 6\u00d74 (not available) or 6\u00d7(remaining combinations).",
                    "value_summary": "Prioritize valid operations that combine remaining numbers to approach 24, avoiding steps that introduce unavailable or unrelated values. Each move should maintain feasibility, reduce complexity, and keep options open; invalid steps\u2014such as using numbers not in the current set\u2014mark dead-ends, guiding efficient problem-solving."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n9 - 3 = 6 (left: 6 2 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "values": [
                                60.0,
                                40.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n9 - 3 = 6 (left: 6 2 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n9 - 3 = 6 (left: 6 2 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n9 - 3 = 6 (left: 6 2 6)\n9 - 3 = 6 (left: 2 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n9 - 3 = 6 (left: 6 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n3 * 2 = 6 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n6 * 4 = 24 (left: 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n9 - 6 = 3 (left: 3 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n3 + 3 = 6 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n6 + 6 = 12 (left: 12 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n6 * 4 = 24 (left: 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n9 - 3 = 6 (left: 6 2 6)\n9 - 3 = 6 (left: 2 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 9 6)\n9 - 3 = 6 (left: 6 6)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the numbers 2, 3, 6, 9 with basic operations to reach 24. Start by forming 6 via 2\u00d73 or 9\u22126, then multiply 6 by 4 (not available) or combine remaining numbers carefully. Focus on pairing 9 and 3 (9\u22123=6) or 2 and 3 (2\u00d73=6), then multiply or add to reach 24. Avoid using numbers outside the set; prioritize forming 6 and then multiplying accordingly.",
                    "value_summary": "Prioritize operations reducing complexity toward 24, avoid invalid combinations, and discard steps leading to impossible or dead-end values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n"
                            ],
                            "values": [
                                0.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 2, 3, 6, 9, prioritize forming 6 early by using 9\u22123 or 2\u00d73, ensuring no numbers are reused or dropped improperly. Once you have a 6, consider multiplying it by remaining numbers to reach 24\u2014specifically, 6\u00d74 is ideal, but since 4 isn't available, look for alternative combinations. Combining 6 with 2 and 3 to produce 24 involves multiplying 6 by 4 (which can be formed as 2\u00d72 or 2+2, if available), or adding and then multiplying. Focus on using each number exactly once and only basic operations. For example, forming 6 from 9\u22123, then multiplying by 4 (via 2\u00d72), or combining (2+2) with 6, guides toward the solution. Avoid reusing numbers or creating invalid intermediate steps.",
                    "value_summary": "When evaluating moves for 2, 3, 6, 9, prioritize operations that systematically reduce complexity toward 24, such as combining large and small numbers strategically. Avoid invalid or impossible combinations\u2014like using non-existent intermediate values or repeating the same number improperly. Focus on steps that progress toward intermediate targets that can combine to reach 24, and discard sequences leading to dead-end or illogical results. Effective moves maintain a clear, feasible path without violating game rules or creating unreachable states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 3)\n"
                            ],
                            "values": [
                                1.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n6 * 4 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n4 * 6 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n6 + 18 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n9 + 15 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n12 * 2 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n9 - 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n2 * 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n3 + 1 = 4 (left: 4 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n2 + 2 = 4 (left: 4 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 3 = 9 (left: 9 8)\n6 * 4 = 24 (left: 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n6 * 4 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n3 * 8 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "Focus on forming 6 early by using 9\u22123 or 2\u00d73, ensuring all numbers are used exactly once. From 6, seek to reach 24 through multiplication, such as 6\u00d74, but since 4 isn't available, create 4 using 2+2 or 3+1 (if possible). Avoid using numbers outside the initial set or reusing numbers improperly. Aim to combine 6 with remaining numbers via multiplication or addition to reach 24, for example, 6\u00d7(2+2) or 3\u00d7(6\u2212...). Prioritize valid operations using only the given numbers.",
                    "value_summary": "For the 2, 3, 6, 9 puzzle, prioritize moves that logically reduce the set toward 24 without violating rules. Valid steps combine available numbers using permitted operations, ensuring no usage of non-existent intermediate values or repeated numbers improperly. Moves should progress toward intermediate targets that can systematically lead to 24, avoiding dead-ends or impossible combinations. Illegal moves\u2014such as using values outside the original set or repeating numbers improperly\u2014invalidate the sequence. Effective steps maintain a clear, feasible path, using only current numbers to gradually simplify the set toward a solution, thus ensuring logical consistency and adherence to game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 * 4 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n(9 - 3) * (2 + 1) = 24 (left: )\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                0.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 * 4 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 * 4 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n6 * 4 = 24 (left: 9 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 * 4 = 24 (left: )\n6 * 4 = 24 (left: 6)\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n6 * 4 = 24 (left: 9 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 * 4 = 24 (left: )\n6 * 4 = 24 (left: 6)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 in 24, avoid reusing numbers or operations that require multiple identical numbers beyond their initial count. Use 9\u22123=6 to create a second 6, then combine 6 and 2 via multiplication (6\u00d72=12). Next, add the remaining 6 to 12 (12+6=18), then multiply to reach 24 (18\u00d7(2/3) is invalid; instead, consider 6\u00d74 if possible). Alternatively, create 4 using 2+2 or 3+1 (if 1 were available). Focus on forming 6 early, then combine remaining numbers with addition or multiplication, ensuring each number is used exactly once in valid operations.",
                    "value_summary": "In solving the 2, 3, 6, 9 puzzle, effective moves are those that logically progress toward 24 by combining available numbers with permitted operations\u2014addition, subtraction, multiplication, or division\u2014without violating rules. Moves should reduce the set toward intermediate targets that can systematically lead to 24, avoiding dead-ends or invalid combinations. Critical to evaluation is ensuring each operation uses only the current set of numbers without reusing or misusing individual values; for example, using a number more times than it exists or creating intermediate values outside the set without proper justification invalidates the move. Valid steps should preserve the integrity of the remaining numbers, clearly decreasing complexity and maintaining feasible paths toward the solution. Illegal moves\u2014such as employing a number not present, exceeding available counts, or producing impossible intermediate results\u2014must be rejected. Moves that produce intermediary values that do not align with the current set or violate game rules impede progress. Overall, prioritize steps that simplify the set, maintain logical consistency, and adhere strictly to the constraints, ensuring each move is a valid step toward reaching 24 efficiently and systematically."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 3 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 3)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n8 / 2 = 4 (left: 0 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n8 - 4 = 4 (left: 0 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n8 - 0 = 8 (left: 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n8 / 4 = 2 (left: 0 2)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n4 + 4 = 8 (left: 0 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n4 * 2 = 8 (left: 0 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n3 + 4 = 7 (left: 7)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n4 * 3 = 12 (left: 12)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n4 + 3 = 7 (left: 7)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n4 - 3 = 1 (left: 1)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 3 4)\n3 - 4 = -1 (left: -1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n8 / 2 = 4 (left: 0 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 - 3 = 0 (left: 0 8)\n8 - 4 = 4 (left: 0 4)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 in 24, focus on creating intermediate targets like 6 or 4 early. Use 9\u22123=6 to generate a second 6, then multiply 6\u00d72=12. From 12, add 6 to get 18, then multiply by (4/3) or use other combinations to reach 24. Avoid introducing numbers not present initially; do not create or assume values like 8. Prioritize using each number once with operations that directly lead toward 24, such as combining 6 and 4 (from 2+2 or 3+1) or leveraging subtraction and multiplication to generate intermediate targets efficiently.",
                    "value_summary": "In the 2, 3, 6, 9 puzzle, valid moves must strictly use the current set of available numbers without introducing or reusing values outside the original set. Effective steps combine existing numbers via permitted operations\u2014addition, subtraction, multiplication, or division\u2014to produce intermediate results closer to 24, while reducing the remaining pool. Moves should preserve the integrity of the set, avoid invalid or impossible intermediate values, and systematically progress toward the target without creating dead-ends. Illegal moves\u2014such as using numbers not present, reusing a number beyond its count, or generating values outside the current set\u2014should be rejected outright. Prioritize operations that logically simplify the set and maintain consistent, rule-abiding pathways toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 3 \u2248 2.666 (discard, not integer)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (9 + 2) = 24\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible with a single number)\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (9 + 2) = 24\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible with a single number)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 for 24, avoid using any number more than once unless explicitly allowed; each move must use remaining original numbers. Focus on generating intermediate targets like 12 or 8 early, since 12 (e.g., 6\u00d72) and 8 (e.g., 3\u00d7(9\u22126)) are key stepping stones. Use subtraction to create 3 or 6 (e.g., 9\u22126=3) and multiplication to reach higher totals. Combine 6 and 4 (created from 2+2 if allowed) or from other operations to approach 24 efficiently. Prioritize operations that directly lead to 24, such as multiplying 6\u00d74 or adding/subtracting to reach known intermediate totals. Avoid invalid steps like using a number twice without a duplicate in the set. The goal is to sequence operations that respect initial constraints while strategically targeting 24 through minimal intermediate steps.",
                    "value_summary": "In the 2, 3, 6, 9 puzzle, effective moves strictly involve combining available numbers via addition, subtraction, multiplication, or division without reusing or introducing external values. Valid steps produce intermediate results that reduce the remaining numbers while maintaining logical progression toward 24. Moves must preserve the set's integrity\u2014using each number once unless multiple copies exist\u2014and avoid invalid operations such as producing values outside the current set or reusing numbers improperly. Illegal moves, like using nonexistent values or exceeding count limits, should be rejected immediately. Prioritize operations that simplify the set, bringing you closer to 24 systematically. Consistent tracking of the remaining numbers after each move is essential, ensuring each step adheres to the rules and avoids dead-ends, thereby fostering a disciplined approach toward the solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n6 - 2 = 4 (left: 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n2 * 4 = 8 (left: 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n9 - 6 = 3 (left: 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no possible operations to reach 24 with only one number)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n6 - 2 = 4 (left: 4)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4)\n2 * 4 = 8 (left: 6)\n"
                            ]
                        }
                    ],
                    "summary": "Use subtraction to create 3 from 9\u22126, then multiply 3 by 8 (created from 2\u00d74 if 4 is available; but since 4 isn't in set, focus on 6\u22122=4). Alternatively, combine 6 and 2 to get 12, then multiply by 2 or 3 to reach 24. Prioritize operations that generate 12 or 8 early, avoiding invalid steps that reuse numbers or create non-existent intermediate values.",
                    "value_summary": "Effective moves for 2, 3, 6, 9 involve valid arithmetic combining available numbers to systematically reduce the set toward 24. Prioritize operations that produce intermediate results closer to 24, avoid invalid or impossible calculations, and ensure each step maintains set integrity without reusing or misusing values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 3 \u2248 2.666... (discard, not integer)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                60.0,
                                0.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (6 + 2) * 4\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n3 + 8 = 11 (left: 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n8 - 3 = 5 (left: 5)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n8 / 3 \u2248 2.666 (invalid)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n3 / 8 \u2248 0.375 (invalid)\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: (6 + 2) * 4\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n3 + 8 = 11 (left: 11)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 efficiently, prioritize creating 12 and 8 early, as these are key targets for 24. Focus on combining 6 and 2 to make 12 (6\u00d72). Use 3 and 9 to generate 27 or 3\u00d78 if possible, then adjust with subtraction. For example, 6 \u00f7 3 = 2 allows pairing with 9 to reach 18 or 12. Avoid reusing numbers; each can only be used once per operation. To reach 24, consider multiplying 4 (created via 6\u22122) by 6 or 3, but ensure intermediate steps are valid and do not reuse numbers. Combining 3 and 8 (if 8 is generated from 6+2) helps reach 24. Be cautious with intermediate calculations to avoid invalid steps\u2014each operation must use available numbers without reuse or omission. The key is to generate 8 or 12 early through subtraction or multiplication, then combine those results to reach 24, ensuring all steps are valid and numbers are used exactly once.",
                    "value_summary": "For the numbers 2, 3, 6, 9, effective moves involve valid arithmetic operations\u2014addition, subtraction, multiplication, or division\u2014that combine existing numbers to produce intermediate results progressively closer to 24. Moves are promising when they use only original numbers without introducing non-existent values, maintain the set\u2019s integrity, and reduce complexity toward the target. Invalid steps\u2014such as employing numbers outside the initial set or producing impossible calculations\u2014should be avoided. Prioritize operations that systematically approach 24 without violating game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 / 3 = 2 (left: 2 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n9 - 1 = 8 (left: 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 2 = 6 (left: 6 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 + 3 = 9 (left: 9 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n6 / 3 = 2 (left: 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n9 - 1 = 8 (left: 3 8)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n8 * 3 = 24 (left: 6 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n6 * 4 = 24 (left: 3 9)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n9 - 3 = 6 (left: 6 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n6 * 4 = 24 (left: 3 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n3 * 8 = 24 (left: 6 6)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 5 = 8 (left: 8)\n9 - 6 = 3 (left: 3 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n6 - 3 = 3 (left: 3 8)\n6 / 3 = 2 (left: 8)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize forming 12 (6\u00d72) and 8 (6\u22123+3 or 9\u22121, but only 2,3,6,9 available). Use 6 and 3 to get 18, then subtract 9 to reach 9, or multiply 3\u00d76=18, then subtract 6 to get 12. Focus on combining 6 and 3 or 2 and 9 to produce intermediate targets (8, 12). Avoid reusing numbers; each operation must use distinct numbers. Use these steps to reach 24 efficiently.",
                    "value_summary": "Prioritize valid operations combining initial numbers toward 24; avoid invalid calculations or introducing new values; focus on systematic, rule-abiding steps that progressively approach target 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 3 11)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 3)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n8 / 3 \u2248 2.666 (not an integer, discard)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.002,
                                41.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 3 6 9",
                            "ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n3 + 8 = 11 (left: 11)  \n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n8 - 3 = 5 (left: 5)  \n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n8 / 3 \u2248 2.666... (invalid for integer steps)\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (6 + 2) = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (6 + 2) = 24\n",
                                "6 + 2 = 8 (left: 3 8 9)\n9 / 3 = 3 (left: 3 8)\n\n3 + 8 = 11 (left: 11)  \n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 3, 6, 9 for 24, focus on forming target numbers like 12 and 8 using 6 and 3 (e.g., 6\u00d72=12 or 3+3+2=8). Combine 6 and 3 early to get 18 or 9, then subtract remaining numbers strategically. Prioritize using 6\u00d72=12 and 3\u00d7(6\u22123)=9, then combine these results (e.g., 12+9=21, +3=24) with addition or subtraction. Avoid invalid operations such as subtracting numbers that aren\u2019t available or reusing numbers. Each step should use distinct numbers, progressing toward 24 efficiently.",
                    "value_summary": "In evaluating moves for the 24 game with numbers 2, 3, 6, 9, it\u2019s essential to adhere strictly to the rules: each operation must combine exactly two current numbers to produce a new one, replacing those two and not reusing or reintroducing original numbers. Valid steps involve combining available numbers systematically\u2014preferably towards 24\u2014without creating invalid states or reusing consumed values. Moves that improperly reuse numbers, omit to remove used operands, or generate invalid intermediate states are unpromising; they violate the core rule of single-use per operation. When assessing a move, verify that the operands are present in the current list, that they are removed after operation, and that the resulting number replaces them correctly. Systematic, rule-abiding steps that move closer to 24 are promising, whereas steps that reintroduce used numbers, skip necessary removals, or violate operation constraints are unpromising. For this particular puzzle, focus on combining pairs like 6 and 3, 2 and 9, or 3 and 8 (if created), ensuring each move is legal and progresses towards the target."
                }
            ],
            "env_info": [
                {
                    "action": "6 / 3 = 2 (left: 2 9 9)\n7 + 17 = 24 (left: 7 17)\n\n7 + 17 = 24 (left: 24)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "6 * 4 = 24 (left: 3 8)\n\n\n\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: 6 9)\n3 * 8 (where 8 = 2 * 4 or 2 + 2 + 4) (left: 6 2 2)\n6 * 2 = 12 (left: 12 2)\n12 / 2 = 6 (left: 6 12)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "9 - 3 = 6 (left: 6 8)\n2 * 12 = 24 (left: 6 8)\n3 * 8 = 24 (left: 6)\n6 * 4 = 24 (left: 9 2)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "6 * 4 = 24 (left: 2 6 4)\n4 * 6 = 24 (left: 3, 8)\n3 * 8 = 24 (left: 24)\nAnswer: 6 * 4 = 24\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "6 + 2 = 8 (left: 3 8 9)\n6 + 6 = 12 (left: 3 9 12)\n9 + 9 = 18 (left: 6 18)\n6 * 3 = 18 (left: 2 9)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "8 - 3 = 5 (left: 5 9)\n9 / 3 = 3 (left: 3 3 4)\n3 + 3 = 6 (left: 4 6)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "6 * 3 = 18 (left: 2 9 18)\n6 * 3 = 18 (left: 18 6)\n18 / 6 = 3 (left: 3 18)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "9 / 3 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11)\n11 (no operations possible with a single number)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: 24)\nAnswer: (3 * 8) = 24\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "9 - 3 = 6 (left: 6 2 6)\n9 - 3 = 6 (left: 2 6)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: )\n3 * 8 = 24 (left: 6 9)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 + 3 = 6 (left: 6 8)\n6 * 4 = 24 (left: )\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: )\n6 * 4 = 24 (left: 9 3)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 - 3 = 0 (left: 0 8)\n8 / 2 = 4 (left: 0 4)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: 24)\nAnswer: 3 * (9 + 2) = 24\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "8 / 2 = 4 (left: 4)\n6 - 2 = 4 (left: 4)\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: 24)\nAnswer: (6 + 2) * 4\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "6 - 3 = 3 (left: 3 8)\n3 * 8 = 24 (left: )\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                },
                {
                    "action": "3 * 8 = 24 (left: 24)\nAnswer: 3 * (6 + 2) = 24\n",
                    "history": [
                        "6 + 2 = 8 (left: 3 8 9)",
                        "9 / 3 = 3 (left: 3 8)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 1865643,
                "prompt_tokens": 1083234,
                "cost": 0.8545806
            }
        },
        {
            "idx": 906,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 2 11)\n",
                                "11 - 8 = 3 (left: 3 10)\n",
                                "8 / 1 = 8 (left: 8 10 11)\n",
                                "10 / 5 = 2 (left: 2 11)\n",
                                "11 - 10 = 1 (left: 1 8)\n",
                                "8 / 8 = 1 (left: 1 10 11)\n",
                                "11 - 1 = 10 (left: 10 8)\n",
                                "10 - 8 = 2 (left: 2 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n"
                            ],
                            "new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 10 = 1 (left: 1 7)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n7 * 1 = 7 (left: 7 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 / 7 \u2248 1.5714 (discard, not integer)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 / 7 \u2248 1.4286 (discard, not integer)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n...\n",
                                "8 - 1 = 7 (left: 7 10 11)\n7 + 11 = 18 (left: 10 18)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 10 4)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 / 5 = 2 (left: 2 7)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n7 * 11 = 77 (left: 10 77)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 / 7 = 1.5714... (not leading to 24)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n7 / 11 = 0.6363... (not leading to 24)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n7 - 10 = -3 (left: -3 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 + 7 = 18 (left: 10 18)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n"
                            ],
                            "new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 + 11 = 14 (left: 14)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n11 - 3 = 8 (left: 8)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n11 / 3 \u2248 3.6667 (discard, not integer)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 * 11 = 33 (discard, exceeds 24)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n10 / 10 = 1 (left: 4 1)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n10 - 4 = 6 (left: 6 1)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n4 + 10 = 14 (left: 14 1)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n11 - 7 = 4 (left: 4 10)\n4 * 10 = 40 (left: 40 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 + 11 = 14 (left: 14)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n11 - 3 = 8 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 + 11 = 14 (left: 14)\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n11 - 3 = 8 (left: 8)\n"
                            ],
                            "new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 + 11 = 14 (left: 14)\n14\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n11 - 3 = 8 (left: 8)\n8\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 + 11 = 14 (left: 14)\n14\n",
                                "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n11 - 3 = 8 (left: 8)\n8\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n",
                                "11 - 8 = 3 (left: 1 10 3)\n",
                                "8 + 10 = 18 (left: 1 11 18)\n",
                                "8 * 10 = 80 (left: 1 11 80)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n",
                                "11 - 10 = 1 (left: 1 1 8)\n",
                                "11 / 11 = 1 (left: 1 8 1)\n",
                                "10 / 10 = 1 (left: 1 8 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n8 + 11 = 19 (left: 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n8 + 11 = 19 (left: 10 19)\n"
                            ],
                            "values": [
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 10 = 21 (left: 8 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n8 + 11 = 19 (left: 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n8 + 10 = 18 (left: 11 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n8 * 11 = 88 (left: 10 88)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n8 * 10 = 80 (left: 11 80)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n10 + 11 = 21 (left: 1 8 21)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 * 11 = 88 (left: 1 10 88)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n10 + 8 = 18 (left: 1 11 18)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n11 + 8 = 19 (left: 1 10 19)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n11 - 8 = 3 (left: 1 10 3)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n11 / 8 = 1.375 (discard: fraction)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 / 11 = 0.727... (discard: fraction)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n"
                            ],
                            "new_ys": [
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n8 + 11 = 19 (left: 10)  \n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n19 + 5 = 24 (left: )\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n19 + 5 = 24 (left: 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n11 + 13 = 24 (left: 8)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n8 + 16 = 24 (left: 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n8 * 3 = 24 (left: 11)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n11 + 13 = 24 (left: 8)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n10 + 14 = 24 (left: 11)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 10)\n11 + 8 = 19 (left: 10 19)\n8 + 16 = 24 (left: 10)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n8 + 11 = 19 (left: 10)  \n",
                                "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n19 + 5 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 1, 8, 10, 11, avoid initial operations that produce dead-ends. From recent analysis, subtracting 1 from 8 (8 - 1 = 7) leads to a situation where reaching 24 becomes impossible with remaining numbers 10 and 11. Instead, consider combining 8 and 11 early; for example, 8 + 11 = 19, which is closer to 24 and offers more flexible pathways. Avoid straightforward sums or products that overshoot or produce results like 28 or 70, as these do not facilitate reaching 24. Prioritize operations that reduce larger numbers or create intermediate totals near 24, such as adding 8 and 11 first, then adjusting with 10. Be cautious about subtractions and divisions that yield fractions or negatives, which tend to limit options. Focus on combining 8 and 11 initially to keep options open, then incorporate 10 strategically to reach 24 efficiently.",
                    "value_summary": "Avoid moves leading to impossible configurations; prioritize promising reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "10 + 11 = 21 (left: 1 8 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "10 + 11 = 21 (left: 1 8 21)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 1 8 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 10 = 21 (left: 1 8 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 8 11 11)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 1 8 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 10 = 21 (left: 1 8 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 - 8 = 3 (left: 1 10 3)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 11 = -1 (left: 1 8 -1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n10 + 11 = 21 (left: 1 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n10 + 8 = 18 (left: 1 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 10 = 21 (left: 1 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 10 = 18 (left: 1 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n11 + 8 = 19 (left: 1 19 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n8 + 11 = 19 (left: 1 19 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n11 + 10 = 21 (left: 1 8 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n8 + 11 = 19 (left: 1 19 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 - 8 = 2 (left: 1 11 2)\n11 + 10 = 21 (left: 1 8 21)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 1 19)  \n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10)  \n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n8 + 10 = 18 (left: 1 11)  \n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 1 8 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n11 + 10 = 21 (left: 1 8 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n11 + 8 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 1 19)  \n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n8 + 11 = 19 (left: 1 10)  \n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 1, 8, 10, 11, avoid initial operations that produce dead-ends, such as multiplying 8 and 11 to get 88, which cannot lead to 24. Instead, prioritize combining 8 and 11 early\u2014adding them (8 + 11 = 19)\u2014to stay closer to 24 and maintain flexible options. Use 10 strategically to adjust totals toward 24; for example, adding 10 to 8+11 yields 29, then subtracting 5 (via 10 - 5) to reach 24 is ideal. Avoid operations that produce fractions or large overshoots, like multiplying 8 and 11 immediately. Focus on combining 8 and 11 first, then incorporating 10 with addition or subtraction to fine-tune totals. Refrain from initial multiplications that produce results too distant from 24 or that cannot be manipulated into 24 with remaining numbers.",
                    "value_summary": "Avoid impossible configurations; prioritize promising reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 + 8 = 19 (left: 10 1)\n",
                                "11 + 10 = 21 (left: 8 1)\n",
                                "8 + 11 = 19 (left: 10 1)\n",
                                "8 + 10 = 18 (left: 11 1)\n",
                                "10 + 11 = 21 (left: 8 1)\n",
                                "10 + 8 = 18 (left: 11 1)\n",
                                "11 - 8 = 3  (left: 10 1)\n",
                                "11 - 10 = 1  (left: 8 1)\n",
                                "8 - 11 = -3 (left: 10 1)\n",
                                "8 - 10 = -2 (left: 11 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 + 8 = 19 (left: 10 1)\n",
                                "11 + 10 = 21 (left: 8 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "11 + 8 = 19 (left: 10 1)\n",
                                "11 + 10 = 21 (left: 8 1)\n"
                            ],
                            "new_ys": [
                                "11 + 8 = 19 (left: 10 1)\n10 + 1 = 11 (left: 11)\n",
                                "11 + 8 = 19 (left: 10 1)\n11 + 1 = 12 (left: 12)\n",
                                "11 + 8 = 19 (left: 10 1)\n10 + 11 = 21 (left: 1)\n",
                                "11 + 8 = 19 (left: 10 1)\n8 + 11 = 19 (left: 8 1)\n",
                                "11 + 8 = 19 (left: 10 1)\n8 + 10 = 18 (left: 11)\n",
                                "11 + 8 = 19 (left: 10 1)\n8 + 1 = 9 (left: 8 10)\n",
                                "11 + 8 = 19 (left: 10 1)\n8 + 11 = 19 (left: 10 1)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n11 + 1 = 12 (left: 11)\n",
                                "11 + 10 = 21 (left: 8 1)\n11 - 1 = 10 (left: 11)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 11 = -3 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 * 11 = 88 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 / 11 \u2248 0.727 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n11 / 8 \u2248 1.375 (left: 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                20.002,
                                0.003,
                                0.003,
                                40.001,
                                20.002,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n"
                            ],
                            "new_ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n8 + 11 = 19 (left: 8 11)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n8 + 10 = 18 (left: 10 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n11 + 10 = 21 (left: 11 10)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n8 + 1 = 9 (left: 1 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n11 + 1 = 12 (left: 11 1)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 8)\n10 + 1 = 11 (left: 10 1)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 + 11 = 19 (left: 8 11)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 + 10 = 18 (left: 10 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n11 + 10 = 21 (left: 11 10)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 + 1 = 9 (left: 1 8)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n11 + 1 = 12 (left: 1 11)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n10 + 1 = 11 (left: 1 10)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n11 + 13 = 24 (left: 13)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n10 + 14 = 24 (left: 14)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n(Consider combining 8 and 11 to approach 24 directly or via intermediate steps)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                1.002,
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n11 + 13 = 24 (left: 13)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n11 + 13 = 24 (left: 13)\n"
                            ],
                            "new_ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 11 = 19 (left: 10 1 19)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 10 = 18 (left: 11 1 18)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n11 + 10 = 21 (left: 8 1 21)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 1 = 9 (left: 11 10 9)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n11 + 1 = 12 (left: 8 10 12)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n10 + 1 = 11 (left: 8 11 11)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 * 3 = 24 (left: 11 1 24)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n11 * 2 = 22 (left: 8 10 22)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n10 + 11 = 21 (left: 8 1 21)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 11 = 19 (left: 10 1 19)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n11 + 13 = 24 (left: 13)\n13 + 11 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 11 = 19 (left: 10 1 19)\n",
                                "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 10 = 18 (left: 11 1 18)\n"
                            ]
                        }
                    ],
                    "summary": "Given the analysis, initial operations involving direct combinations of 8 and 11\u2014such as addition, subtraction, multiplication, or division\u2014are unlikely to lead to 24, as evidenced by their 'impossible' outcomes. Prioritize pairing 8 and 11 early by adding them (8 + 11 = 19), which remains a promising approach due to proximity to 24. Use 10 to adjust totals via addition or subtraction\u2014adding 10 to 19 yields 29, while subtracting can help fine-tune. Combining 1 with these results generally leads to totals too distant from 24 or results that are impossible to manipulate into 24. Focus on operations that keep the total within a workable range, avoiding large overshoots or fractions that can't be combined to reach 24. Since initial straightforward operations seem blocked, consider intermediate steps that involve adding 10 to 8 or 11 separately, then combining with 1 to create totals like 19 or 20, which can be manipulated more feasibly into 24. This strategic focus minimizes dead-ends and maximizes the chance of success.",
                    "value_summary": "Avoid impossible configurations; prioritize promising reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n",
                                "11 - 8 = 3 (left: 1 10 3)\n",
                                "8 * 11 = 88 (left: 1 10 88)\n",
                                "8 / 11 \u2248 0.727 (left: 1 10 0.727)\n",
                                "11 / 8 = 1.375 (left: 1 10 1.375)\n",
                                "10 + 11 = 21 (left: 1 21)\n",
                                "10 - 11 = -1 (left: 1 -1)\n",
                                "10 * 11 = 110 (left: 1 110)\n",
                                "10 / 11 \u2248 0.909 (left: 1 0.909)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 19 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n19 + 5 = 24 (left: 5)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n10 + 14 = 24 (left: 14)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n8 + 16 = 24 (left: 16)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n11 + 13 = 24 (left: 13)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n9 + 15 = 24 (left: 15)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n10 + 11 = 21 (left: 1 8 21)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n8 + 11 = 19 (left: 1 10 19)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n11 + 8 = 19 (left: 1 10 19)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n11 + 10 = 21 (left: 1 8 21)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 - 11 = -3 (left: 1 10 -3)\n10 + 11 = 21 (left: 1 8 21)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n19 - 11 = 8 (left: 8)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n19 / 11 \u2248 1.727 (not helpful)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 - 19 = -8 (not helpful)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 * 19 = 209 (not helpful)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n10 - 20 = -10 (left: -10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 - 10 = 10 (left: 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n10 / 20 = 0.5 (left: 0.5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 + 11 = 19 (left: 10 1 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 + 10 = 18 (left: 11 1 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n11 - 8 = 3 (left: 10 1 3)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n10 + 11 = 21 (left: 8 1 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n10 + 10 = 20 (left: 8 1 20)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n10 - 10 = 0 (left: 8 1 0)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n11 - 10 = 1 (left: 8 1 1)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 + 1 = 9 (left: 11 10 9)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 - 1 = 7 (left: 11 10 7)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n11 - 1 = 10 (left: 8 10 10)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n8 + 11 = 19 (left: 10 1 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n8 + 10 = 18 (left: 1 11 18)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n11 + 10 = 21 (left: 8 1 21)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 10 = 11 (left: 11 19)\n11 + 19 = 30 (left: 30)\n19 + 5 = 24 (left: 8 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 + 11 = 19 (left: 10 1 19)\n",
                                "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 + 10 = 18 (left: 11 1 18)\n"
                            ]
                        }
                    ],
                    "summary": "For solving 1, 8, 10, 11 in the 24 game, focus on combining 8 and 11 early via addition (8+11=19), as this brings you close to 24. Use 10 to adjust totals: adding it to 19 yields 29 (over), but subtracting 10 gives 9, which can be combined with 8 or 11 to reach 24. Be cautious with 1; adding or subtracting it typically overshoots or undershoots, making it less useful unless it helps form a key intermediate step. Avoid combining 10 and 11 directly, as their sum exceeds 24 and doesn't simplify the path. Instead, explore operations that produce intermediate totals like 20 or 16, which are closer to 24 and easier to adjust with remaining numbers. For example, combining 8 and 10 to get 80 or 18 isn't promising; focus on operations that keep totals within a manageable range, enabling straightforward adjustments to reach 24 efficiently.",
                    "value_summary": "In the 24 game, prioritize legal moves that reduce the set toward feasible solutions. Avoid steps that reuse or omit numbers improperly; focus on valid operations. Moves leading to impossible configurations or illegal operations should be marked as impossible, refining the pathway to success."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 8 1)\n",
                                "8 + 11 = 19 (left: 1 19)\n",
                                "10 + 11 = 21 (left: 1 21)\n",
                                "8 * 3 = 24 (left: 1 10 3) [if 3 was available, but since not, skip]\n",
                                "8 + 10 = 18 (left: 1 18)\n",
                                "11 - 8 = 3 (left: 1 10 3) [again, 3 not in initial set]\n",
                                "10 - 8 = 2 (left: 1 2 11)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n",
                                "1 + 11 = 12 (left: 12 8)\n",
                                "8 + 11 = 19 (left: 1 19)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 2 = 13 (left: 1 13)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n8 - 1 = 7 (left: 1 7)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n8 / 1 = 8 (left: 1 8)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n8 + 1 = 9 (left: 1 9)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n10 + 8 = 18 (left: 10 18)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n10 + 8 = 18 (left: 10 18)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n12 + 12 = 24 (left: 12 12)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n20 + 4 = 24 (left: 20 4)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n6 * 4 = 24 (left: 6 4)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n48 / 2 = 24 (left: 48 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 3 = 4 (left: 4)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 * 13 = 143 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 - 11 = 2 (left: 2 24)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 / 11 \u2248 1.18 (not suitable)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 + 2 = 13 (left: 13 24)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 - 2 = 11 (left: 11 24)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 + 24 = 35 (not suitable)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n24 - 11 = 13 (left: 13 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.0,
                                60.0,
                                60.0,
                                0.002,
                                60.0,
                                40.001,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 * 13 = 143 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 - 11 = 2 (left: 2 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 * 13 = 143 (left: 24)\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 - 11 = 2 (left: 2 24)\n"
                            ],
                            "new_ys": [
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 * 13 = 143 (left: 24)\nAnswer: 11 - 10 + 8 = 9\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 - 11 = 2 (left: 2 24)\n24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 * 13 = 143 (left: 24)\nAnswer: 11 - 10 + 8 = 9\n",
                                "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n13 - 11 = 2 (left: 2 24)\n24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 8, 10, 11, avoid starting with 8 + 11, as it leads to 19, which cannot be combined with remaining numbers to reach 24. Instead, explore combining 10 with other numbers to produce intermediate totals closer to 24\u2014such as 8 + 10 = 18 or 11 + 10 = 21\u2014then adjust with subtraction or addition. Using 8 and 10 to get 80 or 18 isn't helpful; focus on operations that yield manageable totals like 16, 18, or 20. Incorporate 1 only if it helps fine-tune the total without overshooting. Prioritize combinations that keep totals near 24, enabling straightforward adjustments with remaining numbers.",
                    "value_summary": "Prioritize valid, legal operations reducing numbers toward 24; avoid impossible, illegal, or unproductive configurations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 + 10 = 21 (left: 8)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n",
                                "10 + 8 = 18 (left: 11)  \n",
                                "8 + 11 = 19 (left: 10)  \n",
                                "11 + 8 = 19 (left: 10)  \n",
                                "10 + 11 = 21 (left: 8)\n"
                            ],
                            "values": [
                                1.002,
                                20.002,
                                1.002,
                                21.001,
                                3.0,
                                3.0
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 10)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 10)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 + 1 = 22 (left: 20 24)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 + 1 = 22 (left: 20 24)\n",
                                "8 + 11 = 19 (left: 10)  \n20 + 4 = 24 (left: 10 11)\n",
                                "8 + 11 = 19 (left: 10)  \n20 + 4 - 1 = 23 (left: 10 11)\n",
                                "8 + 11 = 19 (left: 10)  \n18 + 6 = 24 (left: 10 11 6)\n",
                                "8 + 11 = 19 (left: 10)  \n20 + 4 + 1 = 25 (left: 10 11)\n",
                                "11 + 10 - 1 = 20 (left: 8)  \n11 + 10 = 21 (left: 8)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n10 + 8 = 18 (left: 11)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n11 + 8 = 19 (left: 10)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n10 + 10 = 20 (left: 11)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n8 + 8 = 16 (left: 11 10)  \n",
                                "11 + 10 - 1 = 20 (left: 8)  \n11 + 10 - 1 = 20 (left: 8)\n"
                            ],
                            "values": [
                                60.0,
                                40.001,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                1.002,
                                1.002,
                                1.002,
                                0.003,
                                2.001
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n24 (left: )\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n20 + 4 = 24 (left: )\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n10 + 14 = 24 (left: 14 10)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n11 + 13 = 24 (left: 13 11)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n12 + 12 = 24 (left: 12 12)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n18 + 6 = 24 (left: 6 18)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n8 * 3 = 24 (left: 3 8)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n6 * 4 = 24 (left: 4 6)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n48 / 2 = 24 (left: 48 2)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n24 + 0 = 24 (left: 24)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n20 + 4 = 24 (left: 20 4)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n20 * 1.2 = 24 (left: 20 1.2)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n(Using intermediate steps involving 10 and 8 to approach 24, such as)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n10 + 8 + 6 = 24 (left: 10 8 6)\n",
                                "8 + 11 = 19 (left: 10)  \n11 + 10 = 21 (left: 20 24)\n20 + 4 = 24 (left: 20 4)\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.002,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n10 + 14 = 24 (left: 14 10)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n11 + 13 = 24 (left: 13 11)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n10 + 14 = 24 (left: 14 10)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n11 + 13 = 24 (left: 13 11)\n"
                            ],
                            "new_ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n10 + 14 = 24 (left: 14 10)\n14 - 10 = 4 (left: 4)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n11 + 13 = 24 (left: 13 11)\n13 + 11 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n10 + 14 = 24 (left: 14 10)\n14 - 10 = 4 (left: 4)\n",
                                "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n11 + 13 = 24 (left: 13 11)\n13 + 11 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 10 with 8 to get 18 or 20 (e.g., 8 + 10 = 18; 10 + 8 + 1 adjustments). Avoid starting with 8 + 11, which leads to dead-ends. Use 11 and 10 to approach 21 or 24, then adjust with the remaining numbers\u2014such as subtracting 1 from 21 to reach 20, then adding 4 (if possible). Prioritize operations that produce totals near 24 (like 18 or 20) to simplify reaching the target with remaining numbers.",
                    "value_summary": "Avoid impossible combinations; prioritize legal, productive reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 + 10 = 21 (left: 1 8)  \n",
                                "11 + 8 = 19 (left: 1 10)  \n",
                                "10 + 1 = 11 (left: 8 11)  \n",
                                "8 + 10 = 18 (left: 1 11)  \n",
                                "8 + 11 = 19 (left: 1 10)  \n",
                                "10 - 1 = 9 (left: 8 9 11)  \n",
                                "11 - 10 = 1 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n",
                                "11 + 10 = 21 (left: 1 8)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n",
                                "11 + 10 = 21 (left: 1 8)  \n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 - 1 = 20 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n(21 + 3) = 24 (left: )\n",
                                "11 + 10 = 21 (left: 1 8)  \n10 + 11 = 21 (left: 1 8)\n",
                                "11 + 10 = 21 (left: 1 8)  \n10 + 11 - 1 = 20 (left: 8)\n",
                                "11 + 10 = 21 (left: 1 8)  \n20 + 4 = 24 (left: )\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.003,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n10 + 11 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n10 + 11 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n20 + 4 = 24 (left: none)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 3 10)\n21 - 1 = 20 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 - 1 = 20 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 - 1 + 4 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n20 + 4 = 24 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n11 + 10 + 1 = 22 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n11 + 10 - 1 = 20 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n8 + 10 + 11 - 5 = 24 (left: 5)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n8 + 10 + 11 - 1 = 28 (left: 1 5)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 - 11 = -1 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n11 - 10 = 1 (left: 1 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 - 1 = 20 (left: 8)\n"
                            ]
                        }
                    ],
                    "summary": "To solve the 24 game with 1, 8, 10, and 11, focus on combining 10 with 8 or 11 to approach target totals near 24. Since 10 + 11 = 21, this provides a promising starting point; from 21, subtract 1 to reach 20, then add 4 if possible. Alternatively, combining 8 and 10 yields 18, which can be adjusted upward by adding remaining numbers. Avoid starting with 8 + 11 directly, as this leads to invalid or dead-end steps, as confirmed by previous attempts. Prioritize operations that produce totals close to 24\u2014such as 21 or 20\u2014and then adjust with the leftover numbers. For example, after obtaining 21 (from 10 + 11), subtract 1 to get 20, then add 4 (if derivable) to reach 24. Keep in mind that combining 8 + 10 is safe and yields 18, which can be useful for subsequent steps. Overall, leveraging 10 + 11 for a near target and adjusting downward with 1 is the most effective approach, avoiding invalid operations like 8 + 11.",
                    "value_summary": "Prioritize feasible, productive reductions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 - 10 = 1 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 - 11 = -1 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 * 3 = 24 (if 3 is available)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 + 16 = 24 (if 16 is available)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n21 + 3 = 24 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 8 = 19 (left: 1 10)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 8 = 18 (left: 1 11)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 + 11 = 19 (left: 1 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 - 1 = 7 (left: 7 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 + 1 = 9 (left: 9 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 * 1 = 8 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 / 1 = 8 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n8 - 1 = 7 (left: 7 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n8 / 1 = 8 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n8 + 1 = 9 (left: 9 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)  \n8 * 1 = 8 (left: 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 - 1 = 7 (left: 7 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 + 1 = 9 (left: 9 8)\n"
                            ]
                        }
                    ],
                    "summary": "Refined Strategy for 1, 8, 10, 11: Focus on combining 10 and 11 early, as 10 + 11 = 21 provides a strong starting point. Use this to subtract 1, reaching 20, then aim to add 4 (via 8 - 4 if possible) to hit 24. Avoid reusing numbers after they've been combined; for example, do not use 10 again after subtracting it in previous steps. Combining 8 and 10 to get 18 is also valuable, as adding 11 or subtracting from it can approach 24. Prioritize operations that produce totals near 20 or 21, then adjust with remaining numbers. Do not attempt invalid operations like subtracting a used number or reusing numbers that are no longer available. This targeted approach leverages initial sums close to 24 and minimizes dead-ends.",
                    "value_summary": "Prioritize moves that produce feasible, productive reductions. Valid steps should use remaining numbers accurately, leading toward 24; avoid steps that reuse or misrepresent numbers. Focus on operations that meaningfully decrease options toward the goal."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 - 11 = -1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 * 10 = 110 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 / 10 \u2248 1.1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 / 11 \u2248 0.91 (left: 1 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 8 = 18 (left: 11 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 + 11 = 19 (left: 10 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 * 2 = 16 (left: 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 1 = 12 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 - 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 8 = 18 (left: 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 - 8 = 2 (left: 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 - 10 = 1 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n10 - 11 = -1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n10 / 11 \u2248 0.909 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 * 10 = 110 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 1 = 12 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 - 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n10 + 1 = 11 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n10 - 1 = 9 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n1 + 8 = 9 (left: 10 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n21 + 1 = 22 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n21 + 8 = 29 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 + 1 = 22 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 + 8 = 29 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n21 + 1 + 8 = 30 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 + 1 + 8 = 30 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 + 8 - 1 = 28 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 - 8 = 13 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n(21 + 3) + (8 / 8) = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n10 - 11 = -1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n11 * 10 = 110 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n11 / 10 = 1.1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n10 / 11 \u2248 0.909 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n1 + 8 = 9 (left: 9 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n8 - 1 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n8 + 1 = 9 (left: 9 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 * 2 = 22 (left: 10 1 8)\n8 * 1 = 8 (left: 8 10 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n21 + 1 = 22 (left: 8)\n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 1, 8, 10, and 11, focus on leveraging the initial combination of 11 and 10 to create a strong foundation, as their sum (21) is close to 24. The most effective first move is `11 + 10 = 21`, which is valid and leaves the remaining numbers 1 and 8, along with the result 21. From this point, avoid attempting to directly combine 21 with 1 or 8 without proper operations; such moves can be invalid or lead away from the goal. To reach 24, consider operations that adjust the total by small increments, like adding or subtracting 1 or 8, but only after confirming their legality. For example, adding 8 to 21 yields 29, overshooting, while subtracting 8 gives 13, which requires further operations. Combining 1 and 8 to get 9 or 7 might help, but only if subsequent steps can reach 24 efficiently. Prioritize sequences that produce totals near 20 or 21 early on and then fine-tune with remaining numbers. Remember, reusing numbers or reapplying previous results outside of permitted operations invalidates the move. Use this focused approach to systematically explore solutions, avoiding dead-ends.",
                    "value_summary": "In the 1, 8, 10, 11 puzzle, prioritize moves that correctly combine remaining numbers toward 24 without reuse or invalid operations. Valid steps should reduce options meaningfully; avoid reusing or misrepresenting numbers. After each move, assess if the new set can logically progress toward 24, ensuring feasibility and correctness."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 * 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 + 1 = 10 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 * 2 + 1 = 21 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 2 = 13 (left: 1 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 - 8 = 4 (left: 4 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 4 = 3 (left: 3 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n11 + 10 = 21 (left: 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n11 + 13 = 24 (left: 24)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n10 + 14 = 24 (left: 24)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n8 + 16 = 24 (left: 24)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n11 + 10 = 21 (left: 11 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n8 + 1 = 9 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n(11 + 10) + (8 - 1) = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n(11 + 10) + 8 - 1 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n11 + 10 + 8 - 1 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n```\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.0,
                                0.0,
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 4 = 3 (left: 3 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n11 + 13 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 4 = 3 (left: 3 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n11 + 13 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 4 = 3 (left: 3 8)\n8 / 2.666... = 3 (left: 3 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n11 + 13 = 24 (left: 24)\nAnswer: (11 + 1) + (10 - 8) = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0.002
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n11 + 13 = 24 (left: 24)\nAnswer: (11 + 1) + (10 - 8) = 24\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)\n12 / 4 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5)\n"
                            ]
                        }
                    ],
                    "summary": "To effectively solve 1, 8, 10, and 11, prioritize valid operations that bring the total close to 24. Starting with `11 + 10 = 21` is promising, but ensure the move adheres to rules\u2014each operation must combine remaining numbers without reusing or invalid steps. Alternatively, combining 8 and 1 to get 9 is a valid move, leaving 10 and 11. From 21 (via `11 + 10`), adding 3 (if possible) would reach 24, but since 3 isn't available, focus on combining remaining numbers directly. For example, after obtaining 21, adding 3 (if created from other operations) would be ideal. Otherwise, from the pair 8 and 1, creating 9, then adding 10 and 11 appropriately (e.g., `(11 + 10) + (8 - 1)`) can approach 24. Always verify each step's legality, avoid invalid reuse, and focus on near-target sums early, then fine-tune with remaining operations to reach 24 efficiently.",
                    "value_summary": "In the 1, 8, 10, 11 puzzle, effective moves strictly follow the rule that used numbers are removed and replaced with their result, updating the current set accurately. Valid steps combine two numbers into a new value, reducing options toward 24 without reuse or invalid operations. Moves that produce impossible or inconsistent sets\u2014such as failing to replace used numbers correctly or misrepresenting the remaining set\u2014are invalid. To evaluate, verify that each operation correctly removes the involved numbers and updates the set accordingly. Prioritize moves that meaningfully reduce options toward 24, ensuring each step is legal, consistent, and progresses logically toward the goal."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 1 12)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n9 + 11 = 20 (left: 1)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 2)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n9 + 11 = 20 (left: 1 20)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 10 = 18 (left: 1 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 + 10 = 21 (left: 1 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n11 - 10 = 1 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n8 + 11 = 19 (left: 10 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n10 + 11 = 21 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n8 + 10 = 18 (left: 11 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)  \n11 + 10 = 21 (left: 8 21)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n11 - 8 = 3 (left: 1 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n11 - 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n8 + 11 = 19 (left: 1 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n8 + 1 = 9 (left: 9 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n10 + 11 = 21 (left: 1 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n10 + 1 = 11 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n9 + 11 = 20 (left: 8 20)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n9 + 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n11 + 10 = 21 (left: 1 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n8 + 1 = 9 (left: 9 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n11 - 10 = 1 (left: 1 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n10 - 1 = 9 (left: 9 11 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n10 / 2 = 5 (left: 5 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n8 + 11 = 19 (left: 1 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n11 - 8 = 3 (left: 1 3 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n1 + 11 = 12 (left: 12 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n8 + 10 = 18 (left: 1 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n8 + 11 = 19 (left: 1 19)\n10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n11 - 8 = 3 (left: 1 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n11 - 1 = 10 (left: 8 10)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 8, 10, and 11, prioritize combining 11 and 10 to get 21, then add the remaining numbers to reach 24 (e.g., 21 + 3, but 3 isn't available). Alternatively, combine 8 and 1 to get 9, then add 11 and 10 for sums close to 24. Avoid invalid steps; focus on forming intermediate totals near 24 early\u2014such as 21 or 9\u2014and then adjust with addition or subtraction to reach exactly 24 efficiently.",
                    "value_summary": "Effective moves correctly combine two numbers into a valid result, consistently removing used numbers and updating the set. Moves that produce impossible or inconsistent sets\u2014such as invalid results or incorrect replacements\u2014are unpromising. Prioritize steps that meaningfully reduce options toward 24 while maintaining legality and logical progression."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 2 = 13 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 1 = 11 (left: 11 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 - 2 = 8 (left: 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                20.002
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n8 - 1 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n8 + 11 = 19 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n10 + 11 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n8 + 10 = 18 (left: 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n8 * 3 = 24 (left: 10 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n11 - 8 = 3 (left: 3 10 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n10 - 1 = 9 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n11 - 10 = 1 (left: 1 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2)\n1 + 11 = 12 (left: 8 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n11 - 1 = 10 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n10 + 11 = 21 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n11 + 1 = 12 (left: 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 8 = 16 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                40.001,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n10 - 1 = 9 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n8 * 3 = 24 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n3 + 21 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n8 + 16 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n10 + 14 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n11 + 13 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n12 + 12 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n15 + 9 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n6 * 4 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n24 / 1 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n9 + 15 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 * 3 = 24 (left: 3)\n5 * 4 + 4 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n10 - 1 = 9 (left: 8 11)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 8, 10, 11, focus on early combinations that approximate 24, then adjust with addition or subtraction. Prioritize pairing 11 and 10 to get 21, then add 3 (not available) or find alternative ways to reach 24. Combining 8 and 1 yields 9, which can be combined with 10 or 11 to approach 24. Specifically, subtracting 1 from 11 gives 10, leaving 2 and 10; multiplying these (10\u00d72=20) is close but insufficient. Since remaining options with 2 and 10 cannot produce 24, explore other pairings such as 8\u00d73 if possible, but here only 8, 10, 11, 1 are available. Emphasize the sequence: create intermediate totals near 24 (like 21 or 9) early, then fine-tune with addition or subtraction to reach 24 exactly.",
                    "value_summary": "Promising moves combine two numbers into valid intermediate results, reduce options toward 24, and maintain legality; unpromising moves produce invalid results or fail to progress toward the target."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n"
                            ],
                            "values": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 - 10 = 1 (left: 8 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 - 8 = 3 (left: 10 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 - 8 = 2 (left: 11 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 11 = 19 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 + 8 = 19 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 1 = 9 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 - 1 = 9 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 - 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 + 8 = 19 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 8 = 18 (left: 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 + 1 = 12 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 1 = 11 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 1 = 9 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 - 8 = 3 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 - 8 = 2 (left: 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n11 * 1 = 11 (left: 8 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 8 + 1 = 20 (left: 10, 11)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 10 + 1 = 22 (left: 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 10 + 8 = 29 (left: 1)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 10 - 8 = 13 (left: 1)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 * 2 = 22 (left: 8, 10, 2)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 8 = 19 (left: 10, 1)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 10 = 21 (left: 8, 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n11 + 8 = 19 (left: 10 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n10 + 8 = 18 (left: 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n11 + 1 = 12 (left: 10 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n10 + 1 = 11 (left: 11 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n8 + 1 = 9 (left: 11 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n11 + 10 + 1 = 22 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n11 + 10 - 1 = 20 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n11 + 8 + 1 = 20 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n10 + 11 = 21 (left: 8)\n10 + 8 + 1 = 19 (left: 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 8 + 1 = 20 (left: 10, 11)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 10 + 1 = 22 (left: 8)  \n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 8, 10, 11, focus on direct combinations that approach 24 without introducing invalid numbers. Prioritize pairing 11 and 10 to get 21, then add 3 (not available) or adjust with remaining numbers. Use 8 and 1 to form 8+1=9, then combine with 11 or 10 to inch toward 24, such as 11 + 8 + 1 = 20, then add 4 (not present), so consider alternative operations. Avoid creating numbers like 2 or 3 from scratch; instead, explore combining 8 and 11 or 10 and 1 to reach intermediate totals close to 24, then fine-tune with addition or subtraction.",
                    "value_summary": "For the numbers 1, 8, 10, 11, promising moves involve combining two numbers into valid intermediate results that reduce options toward 24 without invalid operations. Unpromising moves use nonexistent numbers or produce invalid results, leading to dead ends. Moves should maintain legality, progress toward 24, and involve only the current leftover numbers."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 8 = 18 (left: 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 1 = 11 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 11 = 19 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 10 = 18 (left: 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 8 = 3 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 - 8 = 2 (left: 1 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n10 - 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n10 + 1 = 11 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n11 + 10 = 21 (left: 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n11 + 8 = 19 (left: 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n10 + 8 = 18 (left: 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 10)\n11 + 1 = 12 (left: 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 + 1 = 9 (left: 9 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 8 = 19 (left: 11 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 1 = 12 (left: 12 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 11 = 21 (left: 10 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 8 = 18 (left: 10 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n10 + 1 = 11 (left: 11 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 8 = 19 (left: 11 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 1 = 12 (left: 12 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                3.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                2.001
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 1 = 12 (left: 12 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 1 = 12 (left: 12 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n8 + 7 = 15 (left: 8 15)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n8 * 3 = 24 (left: 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n11 + 1 = 12 (left: 12 11)\n11 + 13 = 24 (left: 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n8 + 7 = 15 (left: 8 15)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n8 * 3 = 24 (left: 3)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 8, 10, 11, focus on combining 10 and 11 to approach 21 or 24; avoid introducing numbers outside the initial set. Use 8 and 1 to create totals like 9 or 8, then add or subtract to reach near 24. For example, pairing 11 + 10 = 21 and adding 1 yields 22, close to 24\u2014adjust with subtraction if needed. Prioritize direct operations that stay within the set, such as 11 + 8 + 1 + 4 (if available), but since 4 isn't present, focus on adding or subtracting 1 or 8 from totals near 24, ensuring no invalid numbers are introduced.",
                    "value_summary": "For the numbers 1, 8, 10, 11, promising moves involve combining two numbers with valid operations (addition, subtraction, multiplication, division) that progress toward 24 without invalid or nonexistent intermediate results. Moves that reuse or generate values outside the original set or previously obtained valid operations are unpromising. Illegal steps\u2014such as using numbers not initially present or creating impossible results\u2014eliminate potential solutions. Effective moves maintain legality, reduce options logically, and keep the set consistent, guiding toward 24 efficiently. Invalid operations or reusing non-existent numbers render steps unpromising and dead-end the solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 11 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 11 = 19 (left: 1 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 8 = 19 (left: 1 19)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 11 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 11 9)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 11 = 19 (left: 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n1 + 11 = 12 (left: 8 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 12 = 20 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 12 = 23 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 23 = 31 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 13 = 24 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 11 9)\n11 + 10 = 21 (left: 8 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n11 + 8 = 19 (left: 10 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n11 + 1 = 12 (left: 10 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n10 + 8 = 18 (left: 11 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n10 + 1 = 11 (left: 11 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n8 + 1 = 9 (left: 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 11 9)\n11 + 10 = 21 (left: 8 1)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 10 and 11 first to reach 21, as this is a solid starting point. Avoid using operations that introduce or rely on numbers outside the original set; for example, adding 10 and 11 yields 21, staying within the initial numbers. Use 8 and 1 to create totals like 9 or 8, then adjust with addition or subtraction to approach 24. Prioritize direct, legal operations such as 11 + 10 = 21, and explore adding 8 or 1 to reach close to 24, ensuring no invalid steps are taken.",
                    "value_summary": "In the context of 1, 8, 10, 11, promising moves are those that combine two numbers with valid operations\u2014addition, subtraction, multiplication, or division\u2014that produce intermediate results consistent with the original set or logically progress toward 24. Crucially, each step must retain the same multiset of remaining numbers, only replacing two numbers with their combined result, ensuring no reuse or omission of numbers outside the operation. Invalid moves\u2014such as combining non-existent intermediate values, reusing numbers improperly, or generating results outside the permissible set\u2014are unpromising and lead to dead ends. Effective strategies prioritize legal, straightforward operations that reduce the problem size logically, maintaining a consistent set of remaining numbers. This disciplined approach avoids invalid steps, ensuring each move advances reliably toward the goal without violating the puzzle\u2019s fundamental constraints."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 - 11 = -1 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 / 11 = 1 (left: 10 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 / 10 = 1 (left: 11 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 - 11 = -1 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n10 + 11 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n10 - 11 = -1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n8 + 1 = 9 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n8 - 1 = 7 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n8 * 1 = 8 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n8 / 1 = 8 (left: 10 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n10 + 11 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n10 - 11 = -1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 7)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 9 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n11 - 10 = 1 (left: 8 1 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n10 - 11 = -1 (left: 8 -1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n11 + 10 = 21 (left: 8 1)\n10 + 11 = 21 (left: 8 21)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n10 + 11 = 21 (left: 8 1)\n"
                            ]
                        }
                    ],
                    "summary": "Begin by combining 10 and 11 to reach 21, as this is a reliable, legal starting point. From the remaining numbers 8 and 1, focus on creating totals close to 24 through addition or subtraction\u2014such as 8 + 1 = 9 or 8 - 1 = 7\u2014and then adjust with simple operations to reach 24. Avoid attempting to directly add 21 to 8 or 1, as this leads to invalid or impossible steps. Instead, after establishing 21 from 10 and 11, consider manipulating 8 and 1 separately to reach 3 (e.g., 8 - 5) or 9, then combine these with 21 via addition or subtraction to arrive at 24. Prioritize valid, stepwise operations that keep all original numbers in play.",
                    "value_summary": "In the 1, 8, 10, 11 puzzle, promising moves are those that combine two numbers using valid operations\u2014addition, subtraction, multiplication, or division\u2014that produce intermediate results consistent with the original set or that logically progress toward 24. Each move must strictly replace the two selected numbers with their result, maintaining the multiset integrity without reuse or omission. Moves that involve combining non-existent intermediate values, reuse numbers improperly, or generate results outside the permissible set are unpromising. Effective strategies focus on legal, straightforward calculations that reduce the problem size systematically, preserving the remaining numbers for further valid steps. This disciplined approach ensures each move advances reliably toward the goal while respecting the puzzle's constraints."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 / 11 = 1 (left: 1 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 2)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 - 2 = 8 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n2 * 11 = 22 (left: 1 22)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n11 - 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n11 + 1 = 12 (left: 8 12)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n8 + 10 = 18 (left: 1 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n8 * 3 = 24 (left: 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n11 + 13 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n13 + 11 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n11 * 2.1818 \u2248 24 (not exact, discard)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n11 + 8 + 5 = 24 (if 8 and 5 are available, but not in current step)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 2 = 12 (left: 11)\n11 + 13 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.0,
                                0.003,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n8 - 1 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n10 - 8 = 2 (left: 2 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n11 - 8 = 3 (left: 3 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n10 - 1 = 9 (left: 9 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n11 - 1 = 10 (left: 10 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n8 + 10 = 18 (left: 11 18)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n8 + 11 = 19 (left: 10 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n10 + 11 = 21 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n8 + 1 = 9 (left: 9 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n8 - 11 = -3 (left: -3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n8 + 11 = 19 (left: 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n8 * 11 = 88 (left: 88)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n8 / 11 \u2248 0.727 (left: 0.727)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n11 - 8 = 3 (left: 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n11 + 8 = 19 (left: 19)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n11 * 8 = 88 (left: 88)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 1 = 11 (left: 8 11)\n11 / 8 = 1.375 (left: 1.375)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n8 - 1 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n11 - 10 = 1 (left: 1 8)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 8, 10, 11, start by combining 10 and 11 to reach 21, a reliable initial move. Next, focus on manipulating 8 and 1 to approach 3 or 4, which can be combined with 21 to reach 24. For example, subtract 8 - 1 = 7 or add 8 + 1 = 9, then adjust with operations to reach 3 or 4 (e.g., 8 - 5, if possible). Instead of trying to directly add 21 to remaining numbers, aim to create intermediate totals close to 24 using addition or subtraction, then combine with 21. Avoid invalid steps that reuse or discard numbers improperly. The key is establishing 21 early and then using simple, valid operations on 8 and 1 to reach the final total of 24 efficiently.",
                    "value_summary": "For the 1, 8, 10, 11 puzzle, promising moves are those that combine two numbers via valid operations (addition, subtraction, multiplication, division) to produce an intermediate result consistent with remaining numbers, enabling systematic reduction toward 24. Moves must accurately update the current set, replacing the used pair with their result without reusing or omitting numbers. Illegal moves\u2014such as using non-existent intermediate results, repeating numbers improperly, or failing to reflect the actual state\u2014are unpromising. Focus on straightforward, legal calculations that preserve the integrity of the remaining set, guiding a reliable path toward the goal."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 / 1 = 8 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 * 1 = 8 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7 21)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n11 - 10 = 1 (left: 1 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n10 + 11 = 21 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n8 + 1 = 9 (left: 9 11 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 * 2.666... = 24 (left: 8 11 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n8 * 3 = 24 (left: 11 10 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n11 + 10 + 3 = 24 (left: 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n11 - 10 = 1 (left: 8 1 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n11 + 10 = 21 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n8 - 1 = 7 (left: 7 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 - 8 = 13 (left: 13 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 8 = 29 (left: 29 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 - 1 = 20 (left: 20 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n20 + 4 = 24 (left: 4, 20)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                1.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n11 + 10 = 21 (left: 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n21 + 3 = 24 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n21 - 10 = 11 (left: 8 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n8 * 3 = 24 (left: 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n8 + 3 = 11 (left: 11 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n11 - 8 = 3 (left: 3 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n9 - 3 = 6 (left: 6)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n9 / 3 = 3 (left: 3)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n11 - 10 = 1 (left: 15 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n11 + 10 = 21 (left: 15 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n8 + 1 = 9 (left: 15 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n15 - 9 = 6 (left: 6 8 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n15 / 5 = 3 (left: 3 8 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n15 - 8 = 7 (left: 7 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n9 + 15 = 24 (left: 15 11 10 8)\n8 + 1 = 9 (left: 9 10 11)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n11 + 10 = 21 (left: 8 21)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on creating 21 early by combining 10 and 11 (e.g., 11 - 10 = 1 or 11 + 10 = 21). Use the remaining 8 and 1 to form totals near 3 or 4, then add or subtract to reach 24. For example, from 8 and 1, you can get 9 (8 + 1), then combine with 15 (from other operations) to reach 24. Avoid steps that leave leftover numbers impossible to reach 24, such as pairing 8 and 10 directly, which cannot produce 24. Prioritize establishing 21 with 10 and 11, then manipulate 8 and 1 into 3, 4, or 9 to finalize with addition or multiplication to 24.",
                    "value_summary": "Promising moves combine two numbers via valid operations to produce intermediate results that logically progress toward 24, preserving remaining numbers accurately. Unpromising moves either produce impossible intermediate states or misrepresent the current set, hindering systematic solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 1 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 * 1 = 8 (left: 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 / 1 = 8 (left: 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                60.0,
                                20.002,
                                40.001
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 10 = 1 (left: 8 1 11)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n8 + 1 = 9 (left: 9 11)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n2 * 12 = 24 (left: )  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n8 + 1 = 9 (left: 9 10 11)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n10 + 11 = 21 (left: 8)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n8 * 3 = 24 (left: 3)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n8 + 16 = 24 (left: 16)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n16 + 8 = 24 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n11 - 10 = 1 (left: 8 1 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n8 + 1 = 9 (left: 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n9 + 15 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n8 * 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n4 * 6 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n6 * 4 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n8 * 3 = 24 (left: )\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 + 1 = 9 (left: 9)  \n(Note: Since only initial numbers 1,8,10,11 are provided, the above steps focus on creating 21 from 10 and 11, then combining with 8 and 1 to reach 24.)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                60.0,
                                0.0,
                                0.003,
                                40.001,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.002
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n8 + 1 = 9 (left: 21)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n8 - 1 = 7 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n10 - 11 = -1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n10 + 11 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n8 * 1 = 8 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n8 + 1 = 9 (left: 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n8 - 3 = 5 (left: 5 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n11 + 10 = 21 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n10 + 11 + 3 = 24 (left: 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n8 + 1 = 9 (left: 9 10 11)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n21 + 3 = 24 (left: 8 3)  \n9 + 10 + 5 = 24 (left: 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n11 - 10 = 1 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n11 + 10 = 21 (left: 8 1)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 8, 10, 11 efficiently, prioritize creating 21 early by combining 10 and 11 (e.g., 11 - 10 = 1 or 11 + 10 = 21). Use 8 and 1 to reach totals near 3, 4, or 9\u2014such as 8 + 1 = 9\u2014then combine with remaining numbers to reach 24. Avoid pairing 8 with 10 directly, as it\u2019s less productive. Focus on establishing 21 with 10 and 11, then manipulate 8 and 1 into key intermediate totals (like 9 or 4), facilitating simple addition or multiplication to reach 24 efficiently.",
                    "value_summary": "Promising moves produce valid intermediate results aligning with remaining numbers, while unpromising steps involve impossible combinations or reuse of numbers, disrupting logical progression toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8 1)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 1 = 9 (left: 8 9)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 7 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 * 1 = 8 (left: 8 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n9 + 1 = 10 (left: 8 10)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n7 + 1 = 8 (left: 7 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n7 + 8 = 15 (left: 15)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 8 = 16 (left: 16)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n(These steps help to generate key intermediates like 7, 9, 10, 15, 16, which can facilitate reaching 24)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8 7)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n10 + 11 = 21 (left: 8 1)\n8 + 1 = 9 (left: 8 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n7 + 8 = 15 (left: 15)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 8 = 16 (left: 16)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 8 10 11",
                            "ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n7 + 8 = 15 (left: 15)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 8 = 16 (left: 16)\n"
                            ],
                            "new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n7 + 8 = 15 (left: 15)\n15 (no operations possible to reach 24 with a single number)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 8 = 16 (left: 16)\n16 + 8 = 24 (left: 16 8)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 8 = 16 (left: 16)\n16 * 1.5 = 24 (left: 16 1.5)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n7 + 8 = 15 (left: 15)\n15 (no operations possible to reach 24 with a single number)\n",
                                "10 - 8 = 2 (left: 1 2 11)\n11 + 10 = 21 (left: 8 1)\n8 + 8 = 16 (left: 16)\n16 + 8 = 24 (left: 16 8)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on creating 21 early by combining 10 and 11 (e.g., 11 + 10 = 21). Use 8 and 1 to reach key intermediates like 9 (8 + 1) or 7 (8 - 1). Once 21 is established, manipulate remaining numbers to reach 3, 4, or 6, facilitating sums or products that total 24. Avoid pairing 8 directly with 10; instead, prioritize operations that generate intermediate totals like 7 or 9. For example, after forming 21, combine 8 and 1 to get 9, then add 10 or 11 to reach 24 efficiently.",
                    "value_summary": "Promising moves generate valid, achievable intermediate results using remaining numbers without reuse; unpromising moves involve impossible operations, invalid intermediate states, or disrupting logical progression toward 24."
                }
            ],
            "env_info": [
                {
                    "action": "8 - 1 = 7 (left: 7 10 11)\n10 - 7 = 3 (left: 3 11)\n3 + 11 = 14 (left: 14)\n14\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 * 11 = 88 (left: 1 10 88)\n11 + 8 = 19 (left: 10 19)\n8 - 11 = -3 (left: 1 10 -3)\n8 + 11 = 19 (left: 10)  \n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 + 11 = 19 (left: 1 10 19)\n1 + 11 = 12 (left: 8 10 12)\n8 + 11 = 19 (left: 1 10 19)\n10 + 11 = 21 (left: 1 19)  \n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 = 21 (left: 8 1)\n8 - 1 = 7 (left: 8)\n8 * 3 = 24 (left: 3)\n8 + 11 = 19 (left: 10 1 19)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 + 11 = 19 (left: 1 10 19)\n1 + 19 = 20 (left: 10 20)\n20 / 10 = 2 (left: 2)\n8 + 11 = 19 (left: 10 1 19)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 10 = 1 (left: 1 8 1)\n11 + 13 = 24 (left: 11 13)\n11 * 13 = 143 (left: 24)\nAnswer: 11 - 10 + 8 = 9\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 + 11 = 19 (left: 10)  \n10 + 11 = 21 (left: 20 24)\n10 + 14 = 24 (left: 14 10)\n14 - 10 = 4 (left: 4)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "10 - 8 = 2 (left: 1 2 11)\n11 - 10 = 1 (left: 1 1 8)\n10 + 11 = 21 (left: 1 8)\n10 + 11 = 21 (left: 1 8)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)  \n8 - 1 = 7 (left: 7 8)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n11 + 10 = 21 (left: 1 8)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 1 = 12 (left: 2 12)\n11 + 13 = 24 (left: 24)\nAnswer: (11 + 1) + (10 - 8) = 24\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 1 = 10 (left: 2 10)  \n11 - 10 = 1 (left: 1 8 11)\n11 - 8 = 3 (left: 1 3)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "10 + 2 = 12 (left: 11)\n8 + 11 = 19 (left: 8)\n11 - 10 = 1 (left: 8 1)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 + 3 = 24 (left: )\n8 + 10 = 18 (left: 11)\n11 + 8 + 1 = 20 (left: 10, 11)  \n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 = 21 (left: 1 8)\n8 - 1 = 7 (left: 8 7)\n8 + 7 = 15 (left: 8 15)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 + 1 = 9 (left: 10)\n11 + 10 = 21 (left: 8 1)\n11 + 10 = 21 (left: 8 1)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 1 = 10 (left: 2 10)\n10 - 1 = 9 (left: 8 9)\n8 - 1 = 7 (left: 7 10 11)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 + 1 = 9 (left: 9)\n21 + 3 = 24 (left: 8 9 3)\n11 - 10 = 1 (left: 8 1)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "8 - 1 = 7 (left: 7)  \n11 - 9 = 2 (left: 2)  \n11 - 10 = 1 (left: 8 1)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 10 = 21 (left: 8 1)\n7 + 8 = 15 (left: 15)\n15 (no operations possible to reach 24 with a single number)\n",
                    "history": [
                        "10 - 8 = 2 (left: 1 2 11)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 2305489,
                "prompt_tokens": 1296951,
                "cost": 1.0518907
            }
        },
        {
            "idx": 905,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "11 - 11 = 0 (left: 1 0 13)\n",
                                "11 + 11 = 22 (left: 1 22 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n",
                                "13 / 11 \u2248 1.18 (not standard, skip)\n",
                                "1 + 11 = 12 (left: 12 13)\n",
                                "1 - 11 = -10 (skip)\n",
                                "11 - 1 = 10 (left: 10 13)\n",
                                "11 + 1 = 12 (left: 12 13)\n",
                                "13 - 1 = 12 (left: 12 11)\n",
                                "13 + 1 = 14 (left: 14 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.002,
                                0.003,
                                0.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n",
                                "11 - 11 = 0 (left: 1 0 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n",
                                "11 - 11 = 0 (left: 1 0 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 2 = 5.5 (left: 5.5 1)\n",
                                "11 - 11 = 0 (left: 1 0 13)\n13 - 1 = 12 (left: 0 12)\n",
                                "11 - 11 = 0 (left: 1 0 13)\n13 + 1 = 14 (left: 0 14)\n",
                                "11 - 11 = 0 (left: 1 0 13)\n13 * 1 = 13 (left: 0 13)\n",
                                "11 - 11 = 0 (left: 1 0 13)\n13 / 1 = 13 (left: 0 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n10 + 14 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n14 + 10 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n20 + 4 = 24 (left: 4)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n4 + 20 = 24 (left: 20)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n12 * 2 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n2 * 12 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n48 / 2 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n2 / 48 = 0.041666... (discarded)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n```\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n0 + 24 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n0 * 24 = 0 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n0 - 24 = -24 (left: -24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n24 / 1 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n24 / 0.5 = 48 (left: 0.5)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n0.5 * 48 = 24 (left: 48)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n11 - 11 = 0 (left: 2 0)\n48 / 2 = 24 (left: 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n10 + 14 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n14 + 10 = 24 (left: )\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 13 = 23 (left: 11 2 23)\n"
                            ],
                            "values": [
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 13 = 23 (left: 11 2 23)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 13 = 23 (left: 11 2 23)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 13 = 23 (left: 11 2 23)\n11 - 11 = 0 (left: 0 2 23)\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 13 = 23 (left: 11 2 23)\n11 - 11 = 0 (left: 0 2 23)\n"
                            ]
                        }
                    ],
                    "summary": "Use 13 - 11 = 2 first; then combine remaining 11 and 1 to get 10, but avoid operations that can't reach 24. Focus on combining 2 and other numbers to reach 24 efficiently, prioritizing valid step sequences.",
                    "value_summary": "Moves reducing to impossible states are unpromising; focus on viable, progressing operations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n2 * 11 = 22 (left: 12)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n2 + 11 = 13 (left: 1 13)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n12 - 2 = 10 (left: 11)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n12 / 2 = 6 (left: 11)\n"
                            ],
                            "values": [
                                1.002,
                                60.0,
                                1.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n12 / 12 = 1 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n12 - 12 = 0 (left: 0)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n12 + 12 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n12 * 2 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 1 = 12 (left: 2 12)  \n12 / 2 = 6 (left: 6)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 + 2 = 12 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 - 2 = 8 (left: 8)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 * 2 = 20 (left: 20)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.002,
                                0.0,
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                20.002
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 * 2 = 20 (left: 20)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 * 2 = 20 (left: 20)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n5 + 13 = 18 (left: 11 1 18)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n11 + 1 = 12 (left: 12 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n12 * 2 = 24 (left: 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 * 2 = 20 (left: 20)\n20 + 4 = 24 (left: 20 4)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 * 2 = 20 (left: 20)\n20 * 1.2 = 24 (left: 20 1.2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 * 2 = 20 (left: 20)\n(If 1.2 is considered invalid as non-integer, then only the first step applies.)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n5 + 13 = 18 (left: 11 1 18)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n11 + 1 = 12 (left: 12 13)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on the initial step: subtract 13 - 11 = 2 to create a manageable starting point. Then, combine the remaining 11 and 1 to get 12, which is close but not enough to reach 24. Instead, from the starting point 2, multiply by 12 (obtained by 11 + 1) to reach 24. Thus, use 13 - 11 = 2, then 11 + 1 = 12, and finally 2 \u00d7 12 = 24.",
                    "value_summary": "Avoid impossible reductions; prioritize viable progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 + 13 = 24 (left: 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n10 * 2 = 20 (left: 20 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n10 + 13 = 23 (left: 23)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 + 11 = 22 (left: 22 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 * 2 = 22 (left: 10 22)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 10 = 3 (left: 3 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 10 = 1 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 + 13 = 24 (left: 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n10 - 10 = 0 (left: 12 0)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n12 - 10 = 2 (left: 2 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n10 / 10 = 1 (left: 12 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n12 - 1 = 11 (left: 11 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n11 + 13 = 24 (left: 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n13 - 10 = 3 (left: 3)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n13 - 11 = 2 (left: 2 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n11 + 11 = 22 (left: 22 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n11 * 2 = 22 (left: 22 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n13 - 11 = 2 (left: 2 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n11 - 1 = 10 (left: 10 13)\n11 + 13 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n10 - 10 = 0 (left: 12 0)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n12 - 10 = 2 (left: 2 10)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 11, 11, 13, start by subtracting 1 from 11: **11 - 1 = 10**, leaving 10, 11, and 13. Next, add the remaining 11 and 13: **11 + 13 = 24**. Now, you have 10 and 24. Use multiplication: **10 \u00d7 2**\u2014but since 2 isn't directly available, consider earlier steps or alternative operations. Alternatively, from the initial operations, note that combining 11 and 13 to get 24 is straightforward. Focus on creating 24 from 11 and 13, then adjust remaining numbers to reach 24 via addition or multiplication. In essence, the key steps are: subtract 1 from 11 to get 10, combine 11 and 13 to make 24, then manipulate remaining numbers to reach 24. This approach minimizes complexity and leverages direct operations.",
                    "value_summary": "Prioritize feasible, promising reductions"
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 - 11 = 2 (left: 11 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 - 11 = 2 (left: 1 11 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                2.001,
                                60.0,
                                1.002,
                                2.001
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11 13)\n13 - 11 = 2 (left: 1 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n13 - 11 = 2 (left: 11 2 1)\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11 13)\n13 - 11 = 2 (left: 1 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n13 - 11 = 2 (left: 11 2 1)\n"
                            ]
                        }
                    ],
                    "summary": "To solve the puzzle with numbers 1, 11, 11, 13, avoid attempts that involve invalid operations or dropping numbers improperly. The initial step of subtracting 1 from 11 to get 10 is problematic if it leads to an illegal state\u2014specifically, using or dropping numbers without proper rules. Since subsequent moves from the resulting numbers (10 and 11) are invalid or do not progress toward 24, focus instead on combining 11 and 13 directly. Multiplying these gives 11 \u00d7 13 = 143, which is too large, so consider alternative approaches. To reach 24, look for combinations involving the 11s and 13: for example, 13 - 11 = 2, then multiply or add with remaining 11 and 1 to reach 24. For instance, 13 - 11 = 2, multiply by 11: 2 \u00d7 11 = 22, then add 1: 22 + 1 = 23, close but not 24. Alternatively, try pairing 11 + 13 = 24 directly\u2014this is the most straightforward path. Focus on combining 11 and 13 first, then adjust with the remaining 1 to reach 24, avoiding steps that are invalid or drop numbers prematurely.",
                    "value_summary": "In the 1, 11, 11, 13 puzzle, prioritize moves that produce feasible, promising reductions toward 24. Avoid steps that lead to invalid or impossible intermediate states\u2014such as using non-existent values or dropping numbers improperly. Focus on operations that maintain valid states and progressively approach 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 143)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 - 11 = 2 (left: 1 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 11 \u2248 1.18 (left: 1 1.18)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 - 1 = 10 (left: 10 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 1 = 11 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 1 = 13 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 - 1 = 12 (left: 12 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 1 = 12 (left: 11 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 1 = 11 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 1 = 13 (left: 11 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 1 = 11 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 1 = 13 (left: 11 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 1 = 13 (left: 11 13)\n13 + 11 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 1 = 13 (left: 11 13)\n13 + 11 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve the puzzle with numbers 1, 11, 11, 13, focus on combining 11 and 13 first, as their sum (24) directly reaches the target. The straightforward operation is 11 + 13 = 24, leaving the remaining numbers 1 and 11. Since the goal is to reach 24, and this combination yields it immediately, this is the optimal move. \n\nAfter performing 11 + 13 = 24, you are left with 1 and 11. Combining these with addition: 11 + 1 = 12, which is close but not 24. Alternatively, multiplying: 11 \u00d7 1 = 11, still not 24. Subtracting or dividing won't help here, as they don't produce 24 directly from remaining numbers.\n\nTherefore, the key insight is to perform 11 + 13 = 24 first, utilizing the pair that produces exactly 24. Use the remaining 1 and 11 for any necessary adjustments, but since the target is already achieved, the solution is achieved at this step. Avoid invalid operations such as reusing numbers improperly or dropping numbers without proper rules. This approach minimizes complexity and focuses on the most direct path to 24, ensuring compliance with game rules and maximizing efficiency.",
                    "value_summary": "Prioritize operations reducing to valid, approachable states toward 24; avoid moves leading to impossible or invalid intermediate values, ensuring each step maintains feasibility."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ]
                        }
                    ],
                    "summary": "To effectively solve the puzzle with numbers 1, 11, 11, 13, focus on combining pairs that directly approach or reach 24, respecting the rules that each operation uses only the current available numbers without reusing or dropping numbers improperly. The most promising initial move is to combine 11 and 13 since their sum is exactly 24, yielding an immediate solution. After performing 11 + 13 = 24, the remaining numbers are 1 and 11. This step is valid because it uses only the original numbers without reusing or dropping any. Once 24 is obtained, the goal is achieved, so no further operations are necessary. \n\nAvoid attempting to combine 11 + 13 into 24 and then dropping or ignoring the leftover numbers, as this violates the rules. Instead, after creating 24, the remaining numbers (1 and 11) can be used for any additional adjustments if needed, but since the target is already met, no further moves are required. If exploring other options, consider combining the two 11s first (11 + 11 = 22), then adding 1 to reach 23, which is close but not optimal. Multiplying 11 by 1 leaves 11, which doesn\u2019t help. The key is to prioritize the direct combination of 11 and 13 for an immediate solution, then confirm no rule violations occur. This approach minimizes complexity and ensures compliance, providing the most efficient path to solving the puzzle.",
                    "value_summary": "Prioritize moves that produce valid intermediate values matching remaining numbers or their combinations, avoiding steps that generate impossible or extraneous results. Ensure each operation correctly updates remaining numbers, maintaining feasibility toward 24, and prevent using values outside the current set."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1, 24)\n"
                            ],
                            "values": [
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1, 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1, 24)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1, 24)\n24 (left: )\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1, 24)\n24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve the puzzle with numbers 1, 11, 11, 13, focus on initial operations that produce the target 24 without violating rules about number reuse or dropping. The most straightforward approach is to combine 11 and 13 first: 11 + 13 = 24, leaving 1 and 11 remaining, which is valid and immediately achieves the goal. This move is optimal because it directly reaches 24 with a single operation, simplifying the problem.\n\nHowever, if considering alternative strategies, combining the two 11s first yields 11 + 11 = 22. Then, adding 1 results in 23, which is close but not exact. Multiplying 11 by 1 leaves 11, which doesn\u2019t help reach 24. Subtracting or dividing 11 by 1 produces 10 or 11, respectively, still not 24. Therefore, the best initial move remains 11 + 13 = 24.\n\nFrom the recent analysis, after performing 11 + 13 = 24 (left: 1, 11), attempting to combine the remaining numbers to reach 24 is futile because 1 + 11 = 12, which is insufficient, and other operations do not lead to 24. Since the goal is already achieved, further moves are unnecessary.\n\nIn summary, the optimal, rule-compliant strategy is to combine 11 and 13 immediately, resulting in 24, and conclude there. Other combinations either do not lead to 24 or violate the rules by reusing or dropping numbers improperly. This approach minimizes complexity and guarantees an efficient solution for this specific set.",
                    "value_summary": "Prioritize steps yielding feasible intermediate values matching remaining numbers; avoid impossible or extraneous results; ensure correct updates toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 - 11 = 0 (left: 1 0)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 22)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 * 11 = 121 (left: 1 121)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 / 11 = 1 (left: 1 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n1 + 11 = 12 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n1 * 11 = 11 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 - 1 = 10 (left: 10)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 / 1 = 11 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n\n1\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 - 11 = 0 (left: 1 0)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 22)\n"
                            ]
                        }
                    ],
                    "summary": "For the puzzle with numbers 1, 11, 11, 13, the most effective strategy is to combine 11 and 13 immediately: 11 + 13 = 24. This move directly achieves the target in a single step and leaves the remaining numbers as 1 and 11. Since all numbers are used exactly once, this is a valid, rule-compliant solution and the simplest approach. Attempting to combine the two 11s first (11 + 11 = 22) then adding 1 yields 23, which does not solve the puzzle, so that approach is less optimal. \n\nImportantly, after performing 11 + 13 = 24, the remaining numbers (1 and 11) cannot be combined to reach 24 without violating rules\u2014using each number exactly once. Any attempt to \"drop\" or ignore leftover numbers is invalid. Thus, the key insight is to prioritize combining 11 and 13 immediately, achieving 24 in one move, and concluding the puzzle without unnecessary or illegal steps. This ensures a minimal, rule-compliant, and efficient solution.",
                    "value_summary": "In evaluating moves for 1, 11, 11, 13, prioritize steps that produce feasible intermediate values matching remaining numbers, ensuring legality and avoiding invalid reuse. After an initial operation, confirm that subsequent steps only utilize remaining numbers without reusing or dropping any outside the current set. Moves resulting in impossible or extraneous intermediate results should be marked as **impossible**; those aligning with available numbers and progressing toward 24 are **sure**. Specifically, combining 11 + 13 (24) is promising if it leaves valid subsequent options; however, attempting to proceed beyond this point without proper remaining numbers indicates an invalid move. Ultimately, focus on legal, logical reductions that directly connect to the target, avoiding steps that violate the rules or produce unattainable intermediate values."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 - 11 = 0 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 - 11 = 2 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 11 = 1 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 / 11 \u2248 1.18 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 / 13 \u2248 0.85 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 13 = 14 (left: 11 14)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 11)\n11 (no operation possible)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n13 - 1 = 12 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n13 / 1 = 13 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n13 * 1 = 13 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n13 + 1 = 14 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n12 * 2 = 24 (left: 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n12 + 12 = 24 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n24 / 1 = 24 (left: 12)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n24 - 0 = 24 (left: 12)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 11)\n11 (no operation possible)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 11 = 22 (left: 1 13)\n13 - 1 = 12 (left: 12)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, 13 efficiently, prioritize combining 11 and 13 immediately: 11 + 13 = 24. This move directly achieves 24 in a single step and is legally valid, as it uses two numbers once each. After this, the remaining numbers are 1 and 11. Since the goal is to reach 24, and all numbers must be used exactly once, the solution is complete with this single operation\u2014no further steps are needed or valid. Attempts to combine the remaining 1 and 11 to reach 24 are invalid because they do not produce 24 and would involve reusing numbers or illegal moves. The key is to recognize that combining 11 and 13 first yields the target immediately and leaves no need for additional operations. This approach is minimal, rule-compliant, and leverages the most effective first move.",
                    "value_summary": "In evaluating moves for 1, 11, 11, 13, prioritize operations that produce feasible intermediate values aligned with remaining numbers, ensuring legality and proper use of each number exactly once. Combining 11 + 13 into 24 is promising if it leaves valid subsequent options; however, any move that results in impossible intermediate values or invalid reuse is marked as impossible. Moves that directly progress toward 24, such as adding or subtracting pairs to form intermediate targets matching remaining numbers, are promising. Conversely, attempts that lead to inconsistent or unattainable states\u2014like leaving only invalid leftovers or attempting illegal operations\u2014are unpromising. Focus on sequences that maintain logical reduction, avoid extraneous or impossible steps, and achieve the target using legal, stepwise progressions aligned with the current set of numbers."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1\n11 + 13 = 24 (left: 1 11)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 11, 11, 13 in the Game of 24, the optimal strategy is to immediately combine 11 and 13 via addition: 11 + 13 = 24. This move produces 24 in a single step, using two numbers exactly once, and leaves the remaining numbers as 1 and 11. Since the goal is to reach 24 and all numbers must be used exactly once, no further operations are necessary\u2014this is the minimal solution. Attempting to reuse the 11 or combining remaining numbers afterward is invalid, as it would involve reusing numbers or creating illegal moves. The key insight is recognizing that the sum of 11 and 13 yields 24 immediately, satisfying the goal instantly. No need to involve the 1 in further operations. This straightforward approach leverages the most effective first move and adheres strictly to game rules, ensuring a quick, rule-compliant solution.",
                    "value_summary": "In evaluating moves for 1, 11, 11, and 13, prioritize operations that produce feasible intermediate values aligned with remaining numbers, ensuring proper use of each number exactly once. Combining 11 + 13 into 24 is promising if it leaves valid options, as it consolidates toward the target 24. Moves that result in impossible intermediate states\u2014such as invalid leftovers or illegal operations\u2014are unpromising. For example, after combining 11 + 13 = 24, the remaining numbers should be 1 and 24; subsequent steps must correctly use these without invalid reuse. Moves that involve improper pairing or lead to unattainable configurations are unpromising. Overall, focus on logical, stepwise progressions that reduce the set toward 24, avoiding steps that violate game rules or produce impossible intermediate states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n"
                            ],
                            "values": [
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n24 (left: )\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, 13 efficiently, leverage the immediate sum of 11 + 13 = 24, which directly yields the target without involving the 1. This move is optimal because it uses two numbers in a single step, resulting in 24 instantly and leaving 1 and 24 remaining. Since the goal is to reach 24 using all four numbers exactly once, this approach confirms a minimal, rule-compliant solution. The key insight is recognizing that combining 11 and 13 produces 24 immediately, making further operations unnecessary. Attempting to incorporate the 1 after this step is redundant, as 24 already satisfies the goal. This strategy minimizes complexity and guarantees a valid solution without reusing numbers or creating illegal moves. Therefore, the best approach is to perform 11 + 13 = 24 at the outset, then acknowledge that the puzzle is solved, adhering strictly to game rules and ensuring the most straightforward, effective pathway to 24.",
                    "value_summary": "When evaluating moves for 1, 11, 11, and 13, prioritize operations that produce feasible intermediate values aligned with remaining numbers, ensuring each is used exactly once. Combining 11 + 13 to form 24 is promising if it leads to valid subsequent steps toward 24; however, moves that attempt to reuse or discard numbers improperly\u2014such as combining 11 + 13 directly after previous steps\u2014are unpromising. Focus on logical, stepwise progressions that reduce the set toward 24, avoiding illegal combinations or states that violate game rules. Valid moves should preserve the integrity of remaining numbers and maintain a clear path to the target."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                20.002
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n"
                            ],
                            "values": [
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n11 + 13 = 24 (left: 1 24)\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n11 + 13 = 24 (left: 1 24)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve the puzzle with 1, 11, 11, and 13, prioritize immediately combining 11 and 13 to reach 24, as this directly satisfies the target in a single step. This move uses two numbers, leaving 1 and the remaining 11 untouched, and avoids unnecessary complexity. Since the goal is to use all four numbers exactly once, recognize that achieving 24 early simplifies the process\u2014no further operations are needed if the objective is to reach 24. Attempting to incorporate the leftover 1 after establishing 24 is redundant, as the puzzle is already solved. When considering multiple 11s, avoid combining them prematurely unless necessary; focusing on pairing 11 with 13 maximizes efficiency. Keep in mind that subsequent steps involving the leftover 1 should aim to combine it with other results only if explicitly required, but in this case, the initial combination suffices. Overall, the most effective strategy is to use 11 + 13 = 24 immediately, confirming the solution's validity and minimizing unnecessary operations.",
                    "value_summary": "When evaluating moves for 1, 11, 11, and 13, prioritize steps that logically reduce the set toward 24 while respecting each number's usage exactly once. Combining 11 + 13 into 24 is promising if subsequent steps correctly incorporate the resulting 24 alongside remaining numbers. Moves that reuse or discard numbers improperly\u2014such as ignoring the updated set after combining\u2014are unpromising, as they violate the rule of using each number once and maintaining accurate state. Valid progress involves combining numbers to create intermediate values aligned with remaining operands, ensuring each move preserves the integrity of the current set. Avoid steps that skip or incorrectly assume unavailable values, focusing instead on clear, rule-abiding progress toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n24 / 1 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n24 / 1 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                0.0,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: )\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 11, 11, and 13, prioritize pairing 11 and 13 to reach 24, as this directly satisfies the target in one step. After obtaining 24 via `11 + 13 = 24`, use the leftover 1 to finalize the solution by dividing: `24 / 1 = 24`. This sequence uses only two steps and all numbers, ensuring legality and simplicity. Avoid combining the two 11s prematurely unless necessary, as focusing on the 11 + 13 combination yields a straightforward path. Once 24 is achieved, incorporate the remaining 1 in a division to confirm the total solution. This approach minimizes operations and ensures all numbers are used exactly once, adhering to the rules. The key is to recognize the immediate potential of 11 + 13 to reach 24, then utilize the leftover 1 to complete the calculation efficiently.",
                    "value_summary": "In evaluating moves for 1, 11, 11, and 13, prioritize steps that logically reduce the set toward 24 while strictly maintaining each number's unique use. Combining 11 + 13 into 24 is promising if subsequent steps correctly incorporate the resulting 24 with remaining numbers; such moves bring the set closer to the goal. Avoid moves that reuse or discard numbers improperly, or that skip intermediate states, as they violate the rule of preserving the current set accurately. Valid progress involves combining numbers to produce intermediate values aligned with remaining operands, ensuring each move updates the set correctly. Moves that create invalid states or ignore previous results are unpromising, while rule-abiding steps that methodically approach 24 are promising indicators."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n24 / 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n24 / 1 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n24 / 1 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n24 * 1 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) = 24, then 24 / 1 = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) = 24, then 24 / 1 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, and 13 efficiently, focus on valid operations respecting the rule that each step replaces used numbers with their result. The most promising approach is to combine 11 and 13 to reach 24 in one step: `11 + 13 = 24`. This uses two numbers and yields a new value, leaving the set as {1, 11, 24}. Next, incorporate the leftover 1 by dividing the 24 by 1: `24 / 1 = 24`, achieving the target in two steps total. Avoid pairing the two 11s prematurely, as combining 11 and 13 is more direct. Also, ensure each operation involves only available numbers, replacing the used pair with their result. Combining 11 and 13 first simplifies the puzzle, leaving a straightforward division with 1. If this approach is followed carefully, the solution becomes clear: `(11 + 13) = 24`, then `24 / 1 = 24`. This minimizes steps and strictly adheres to rules, efficiently solving the puzzle.",
                    "value_summary": "Prioritize moves that logically combine numbers toward 24, ensuring each step accurately updates the set without reuse or omission. Combining 11 + 13 into 24 is promising if subsequent steps incorporate 24 correctly with remaining numbers; invalid or skipped states are unpromising."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n"
                            ],
                            "values": [
                                60.0,
                                20.001
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n11 + 13 = 24 (left: 1 11 24)\n"
                            ],
                            "values": [
                                20.002,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n11 + 13 = 24 (left: 1 11 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, and 13 efficiently, prioritize combining 11 and 13 first via addition: (11 + 13) = 24, resulting in the set {1, 11, 24}. Next, use the remaining 11 and 1 to reach 24 by subtracting: 24 - 1 = 23 or dividing 24 by 1: 24 / 1 = 24. Dividing 24 by 1 simplifies directly to 24, completing the goal in two steps. Crucially, only combine numbers present at each step; avoid pairing the two 11s prematurely unless necessary. Since the leftover 1 can be used to directly produce 24 when combined with 24 via division, the optimal sequence is: (11 + 13) = 24, then 24 / 1 = 24. This approach minimizes steps and adheres strictly to the rules, ensuring each operation uses available numbers and only replaces used pairs with their results. By focusing on combining 11 and 13 first and leveraging division with 1, the puzzle is resolved efficiently.",
                    "value_summary": "Combine pairs towards 24 or valid intermediate sums; avoid invalid states; prioritize moves that progress logically toward 24 with remaining numbers."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n13 + 11 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 * 13 = 143 (left: 1 143)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 11 = 1 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n13 - 11 = 2 (left: 1 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n13 / 11 \u2248 1.1818 (left: 1 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 - 11 = 13 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n13 + 11 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n13 - 1 = 12 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 1 = 12 (left: 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n13 - 11 = 2 (left: 1 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 * 13 = 143 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n13 / 11 \u2248 1.18 (not directly leading to 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n13 - 11 = 2 (left: 1 2)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n11 - 11 = 0 (left: 1 13 0)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n11 / 11 = 1 (left: 1 13 1)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 11 = 13 (left: 1 13)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n24 - 11 = 13 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n13 * 1 = 13 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n11 + 1 = 12 (left: 13 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n13 - 1 = 12 (left: 11 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n11 / 11 = 1 (left: 13 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n13 / 13 = 1 (left: 11 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n11 - 1 = 10 (left: 13 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n13 - 1 = 12 (left: 11 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n13 + 11 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n24 - 11 = 13 (left: 1 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n13 + 11 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n24 / 1 = 24 (left: 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n13 + 11 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 - 13 = -2 (left: 1 11 13)\n24 - 1 = 23 (left: 13 23)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n24 - 11 = 13 (left: 11)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, and 13 efficiently, prioritize combining 11 and 13 first: (11 + 13) = 24. Use this 24 with the remaining 11 via subtraction: 24 - 11 = 13, or with division if applicable. Avoid combining both 11s prematurely; instead, focus on creating 24 from 11 and 13, then incorporate the remaining 11 and 1 for a direct operation to reach 24. Remember to use each original number exactly once per step, and aim for minimal operations by leveraging addition and division with 1 and the 11s.",
                    "value_summary": "In the 24 game with numbers 1, 11, 11, 13, prioritize moves that combine pairs to reach 24 or valid intermediate targets, ensuring all used numbers come from the original set. Avoid steps that reuse or incorrectly exclude numbers, especially after initial operations. Valid progress reduces remaining numbers logically; invalid moves either misuse the original numbers or fail to approach 24 meaningfully. Focus on sequences maintaining the integrity of the original set."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 * 13 = 143 (left: 1 143)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 - 1 = 23 (left: 11 13 23)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 * 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 / 1 = 24 (left: 11 13)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n13 + 11 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 * 1 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 24)\n24 / 1 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n11 + 13 = 24 (left: 25)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n13 + 11 = 24 (left: 25)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 * 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n11 * 13 / 6.5 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.0,
                                0.003,
                                0.003,
                                1.002,
                                1.002,
                                0.003,
                                1.002,
                                60.0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 * 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 * 1 = 24 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 * 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n11 - 13 = -2 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n13 - 11 = 2 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n11 * 13 = 143 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n11 / 13 \u2248 0.846 (left: 11 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n13 / 11 \u2248 1.182 (left: 11 13)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 * 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                                "13 - 11 = 2 (left: 1 2 11)\n24 + 1 = 25 (left: 11 13 25)\n24 / 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 1, 11, 11, 13, prioritize creating 24 early by combining 11 and 13: (11 + 13) = 24. This leaves 1 and 11 remaining. Since the previous attempt shows that combining 1 and 11 directly cannot reach 24 through addition, subtraction, multiplication, or division, focus on using the initial 24 to facilitate reaching 24 again. Recognize that once 24 is formed from 11 and 13, no straightforward combination with the remaining 1 and 11 will produce 24. Therefore, after establishing 24 from 11 and 13, explore alternative strategies such as subtracting the remaining 11 from the 24 (24 - 11 = 13) or dividing 24 by 1 (which remains 24). Ultimately, the key is to form 24 from 11 and 13 first, then utilize the leftover numbers with basic operations to reach 24 again, avoiding premature combination of remaining numbers without a viable path.",
                    "value_summary": "In the 24 game with 1, 11, 11, 13, effective moves prioritize combining pairs to approach or reach 24 while respecting original usage. Moves that directly produce 24 from available pairs\u2014such as 11 + 13\u2014are promising, but subsequent steps must maintain consistency with remaining numbers. After using 13 and one 11 to make 24, only 1 and 11 remain; attempts to reach 24 from these are unfeasible due to their sum limitations. Thus, moves should aim to generate intermediate targets aligned with remaining numbers, avoiding reuse or exclusion of original values. Valid progress reduces the set logically, whereas invalid moves misuse numbers or fail to approach 24. Overall, focus on valid, logical combinations that preserve the integrity of the initial set and facilitate reaching 24 efficiently."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 / 1 = 11 (left: 11 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n11 + 13 = 24 (left: 11)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n11 * 2 = 22 (left: 1 22)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n11 + 11 = 22 (left: 13 22)  \n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 10 2)\n13 + 11 = 24 (left: 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n1 + 23 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n11 + 13 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n13 + 11 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n(remaining numbers are not applicable after forming 24 directly)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n1 + 23 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n11 + 13 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n1 + 23 = 24 (left: 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n11 + 13 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n1 + 23 = 24 (left: 24)\nAnswer: 13 - 11 = 2; 11 - 2 = 9; 1 + 23 = 24\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n11 + 13 = 24 (left: 24)\nAnswer: 11 + 13 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n1 + 23 = 24 (left: 24)\nAnswer: 13 - 11 = 2; 11 - 2 = 9; 1 + 23 = 24\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n11 + 13 = 24 (left: 24)\nAnswer: 11 + 13 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, 13, first prioritize forming 24 using 11 and 13, as (11 + 13) = 24. This simplifies the problem to using remaining 1 and 11 to reach 24 again. Since adding or subtracting 1 and 11 cannot produce 24 directly, consider alternative operations: dividing 11 by 1 yields 11, which doesn't help; multiplying 11 by 1 remains 11. Therefore, after establishing 24 from 11 and 13, focus on creating 24 from remaining numbers: for example, (11 + 11) = 22, then add 2 (which can be obtained from 1 + 1) to reach 24. Alternatively, combining 11 and 13 first is most straightforward; avoid invalid moves like using numbers not present initially. The key is to form 24 early from 11 and 13, then use leftover numbers with basic operations to reach 24 again, ensuring all steps involve only original numbers.",
                    "value_summary": "In the 24 game with 1, 11, 11, 13, effective moves prioritize combining pairs to approach 24 without introducing values outside the initial set. Moves that produce 24 directly (e.g., 11 + 13) are promising, but subsequent steps must avoid creating or reusing numbers not present initially. Generating new numbers (e.g., 25 from 24 + 1) is invalid unless it aligns with permissible operations and preserves original values. Valid progress reduces the set logically, maintaining consistency with initial numbers. Moves should aim for feasible intermediate targets, avoiding reuse or invalid generation, to efficiently reach 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 13 22)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n22 + 1 + 1 = 24 (left: 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n13 + 11 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 * 2 = 22 (left: 13 22)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 13 22)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 13 22)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 13 22)\n13 + 11 = 24 (left: 1 11)\n"
                            ],
                            "values": [
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1 11)\n11 + 11 = 22 (left: 1 13 22)\n13 + 11 = 24 (left: 1 11)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize forming 24 using 11 and 13, such as (11 + 13) = 24. With remaining 1 and 11, avoid invalid operations; instead, focus on combining these to reach 24. For example, (11 + 11) = 22, then add 1 + 1 = 2 to get 24 (22 + 2). Be cautious not to use numbers outside the original set or operations involving non-existent values. The key is to use initial pairs to make 24 early, then utilize leftover numbers with basic operations, ensuring all steps involve only 1, 11, 11, and 13.",
                    "value_summary": "For 1, 11, 11, 13, effective moves should combine initial numbers to approach 24 without creating or reusing invalid values. Moves producing 24 directly are promising; subsequent steps must remain consistent with original numbers. Avoid operations involving numbers outside the initial set or invalid transformations, ensuring each step maintains logical validity toward solving 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 13 = 14 (left: 11 14)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 1 = 12 (left: 12 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 + 1 = 14 (left: 11 14)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 * 2 = 22 (left: 22 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n13 - 1 = 12 (left: 12 11)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 13 = 14 (left: 11 14)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 11 11 13",
                            "ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 13 = 14 (left: 11 14)\n"
                            ],
                            "new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n13 + 11 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n11 + 13 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 13 = 14 (left: 11 14)\n11 + 13 = 24 (left: 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n13 + 11 = 24 (left: 1 24)\n",
                                "13 - 11 = 2 (left: 1 2 11)\n11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n11 + 13 = 24 (left: 1 24)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 11, 11, 13 efficiently, start by forming 24 with the largest numbers: `11 + 13 = 24`. This step is legal and directly yields 24, leaving 1 and 11 unused. Focus on using remaining numbers to reach 24 without violating operation rules. Combining the remaining 11 and 1 directly cannot produce 24; instead, use addition to create 12 (`11 + 1 = 12`) or other operations to approach 24 indirectly. Since the initial successful step uses only two numbers, avoid combining leftover numbers in ways that break the rules (e.g., adding more than once or misusing operations). The key is to prioritize early formation of 24 with 11 and 13, then carefully combine the leftovers (like `11 + 1 + 12`) if possible, but only through valid steps.",
                    "value_summary": "Prioritize combining initial numbers toward 24 without invalid or reused values; avoid extraneous operations, ensuring each step maintains logical progression toward a valid solution."
                }
            ],
            "env_info": [
                {
                    "action": "13 - 11 = 2 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 (remaining numbers: )\n10 + 14 = 24 (left: )\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 1 = 10 (left: 2 10)\n10 + 13 = 23 (left: 11 2 23)\n11 - 11 = 0 (left: 0 2 23)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 1 = 10 (left: 2 10)  \n10 / 2 = 5 (left: 5)\n5 + 13 = 18 (left: 11 1 18)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 1 = 10 (left: 10 11)\n13 - 1 = 12 (left: 10 12)\n10 - 10 = 0 (left: 12 0)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 * 13 = 143 (left: 1 11 13)\n13 - 11 = 2 (left: 1 2)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 / 1 = 11 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1, 24)\n24 (left: )\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 11)\n11 - 11 = 0 (left: 1 0)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 11)\n11 (no operation possible)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n1\n11 + 13 = 24 (left: 1 11)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n24 (left: )\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n11 + 13 = 24 (left: 1 24)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n11 + 13 = 24 (left: 1 24)\n\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "24 / 1 = 24 (left: 24)\nAnswer: (11 + 13) / 1 = 24\n11 + 13 = 24 (left: 1 11 24)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1 11)\n24 / 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: 11)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "24 + 1 = 25 (left: 11 13 25)\n24 * 1 = 24 (left: 11 13)\n11 + 13 = 24 (left: )\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 - 2 = 9 (left: 1 9)\n1 + 23 = 24 (left: 24)\nAnswer: 13 - 11 = 2; 11 - 2 = 9; 1 + 23 = 24\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n11 + 13 = 24 (left: 1 11)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                },
                {
                    "action": "11 + 13 = 24 (left: 1)\n1 + 11 = 12 (left: 12 13)\n13 + 11 = 24 (left: 1 24)\n",
                    "history": [
                        "13 - 11 = 2 (left: 1 2 11)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 2427633,
                "prompt_tokens": 1430696,
                "cost": 1.1141227999999999
            }
        },
        {
            "idx": 904,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "6 7 8 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n",
                                "8 - 6 = 2 (left: 2 7 9)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n",
                                "9 / 3 = 3 (left: 6 8 3)\n",
                                "8 / 2 = 4 (left: 6 4 9)\n",
                                "7 * 3 = 21 (left: 6 9 21)\n",
                                "6 * 4 = 24 (left: 9 24)\n",
                                "6 + 9 = 15 (left: 15 8)\n",
                                "9 - 8 = 1 (left: 6 1 7)\n",
                                "7 - 6 = 1 (left: 1 8 9)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                60.0,
                                40.001,
                                40.001,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "6 7 8 9",
                            "ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n"
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 - 9 = 6 (left: 6 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n9 - 6 = 3 (left: 3 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n9 / 3 = 3 (left: 3 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 - 3 = 3 (left: 3 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n9 - 6 = 3 (left: 3 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 6 9)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n9 / 3 = 3 (left: 3 15)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n6 - 2 = 4 (left: 4 8)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n8 / 2 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n6 - 4 = 2 (left: 2 8)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n6 / 2 = 3 (left: 3 8)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n8 - 6 = 2 (left: 2 6)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n8 / 4 = 2 (left: 6 2)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n6 / 3 = 2 (left: 2 8)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n8 - 2 = 6 (left: 6 2)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n6 * 4 = 24 (left: 24)\n",
                                "9 - 7 = 2 (left: 6 2 8)\n4 + 20 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                60.0
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "6 7 8 9",
                            "ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n"
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n9 - 6 = 3 (left: 3 5)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 * 4 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n4 + 5 = 9 (left: 9)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 + 3 = 9 (left: 9)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n3 * 3 = 9 (left: 9)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n15 - 9 = 6 (left: 6 2)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n15 / 3 = 5 (left: 5 2)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n9 + 15 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n9 * 2 + 15 = 33 (discard, not leading to 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n(Other steps do not directly lead to 24 with the given numbers)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.001,
                                0.002
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 * 4 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n9 + 15 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "6 7 8 9",
                            "ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 * 4 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n9 + 15 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 * 4 = 24 (left: 24)\nAnswer: (7 + 8) + (6 - 9 / 3) = 24\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: (7 + 8) + (6 / 3) = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 * 4 = 24 (left: 24)\nAnswer: (7 + 8) + (6 - 9 / 3) = 24\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 / 3 = 2 (left: 2 9 15)\n9 + 15 = 24 (left: 24)\nAnswer: (7 + 8) + (6 / 3) = 24\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "6 7 8 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n",
                                "8 + 6 = 14 (left: 14 9)\n",
                                "8 * 3 = 24 (left: 24 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n",
                                "7 + 9 = 16 (left: 8 16)\n",
                                "8 * 3 = 24 (left: 24 7)\n",
                                "9 - 6 = 3 (left: 8 3)\n",
                                "7 * 3 = 21 (left: 8 21)\n",
                                "8 + 16 = 24 (left: 9)\n",
                                "9 + 15 = 24 (left: 7)\n"
                            ],
                            "values": [
                                40.0,
                                1.002,
                                40.001,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n",
                                "7 + 9 = 16 (left: 8 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "6 7 8 9",
                            "ys": [
                                "6 * 4 = 24 (left: 24 9)\n",
                                "7 + 9 = 16 (left: 8 16)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n8 - 6 = 2 (left: 2 7 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n7 - 6 = 1 (left: 1 8 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n7 - 5 = 2 (left: 2 8 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 8 = 1 (left: 1 6 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n8 / 4 = 2 (left: 2 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n6 / 3 = 2 (left: 2 7 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n7 - 2 = 5 (left: 5 8 9)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 5 = 4 (left: 4 7 8)\n",
                                "7 + 9 = 16 (left: 8 16)\n8 + 16 = 24 (left: )\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                1.001,
                                60.0,
                                2.001,
                                1.002,
                                1.002,
                                20.002,
                                0.0
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "6 7 8 9",
                            "ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 / 2 = 4 (left: 4 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n7 - 3 = 4 (left: 4 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n7 / 7 = 1 (left: 1 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n9 - 6 = 3 (left: 3 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 - 2 = 4 (left: 4 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 4 = 4 (left: 4 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 / 4 = 2 (left: 2 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n7 - 4 = 3 (left: 3 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n7 - 3 = 4 (left: 4 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n8 - 4 = 4 (left: 4 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n8 / 4 = 2 (left: 2 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n7 - 2 = 5 (left: 5 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n8 - 5 = 3 (left: 3 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n7 + 8 = 15 (left: 15)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n15 * 2 = 30 (left: 30)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n30 / 5 = 6 (left: 6)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 / 3 = 3 (left: 3 7 8)\n6 * 4 = 24 (left: 24)\n"
                            ],
                            "values": [
                                60.0,
                                40.001,
                                20.002,
                                0.003,
                                20.002,
                                60.0,
                                40.001,
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                20.002,
                                0.003,
                                0.003,
                                21.001,
                                0.003,
                                0.003,
                                40.001,
                                60.0
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "6 7 8 9",
                            "ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n7 + 8 = 15 (left: 6 9 15)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n8 + 7 = 15 (left: 6 9 15)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n9 - 6 = 3 (left: 3 7 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n6 + 8 = 14 (left: 7 9 14)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n9 + 6 = 15 (left: 7 8 15)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n8 * 3 = 24 (left: 7 9 3)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n6 * 4 = 24 (left: 7 8 4)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n8 - 4 = 4 (left: 4 3)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 3)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n8 - 5 = 3 (left: 3 8)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n6 / 2 = 3 (left: 3 8)\n8 / 4 = 2 (left: 2 3)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n7 + 8 = 15 (left: 6 9 15)\n",
                                "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n8 + 7 = 15 (left: 6 9 15)\n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 6, 7, 8, 9, focus on forming intermediate results that efficiently approach 24. Prioritize combining larger numbers to reach key benchmarks, such as 15 or 24, since these facilitate easier final steps. Use addition and multiplication to quickly generate totals close to 24, but be mindful of the order; for example, adding 7 and 8 yields 15, which then can be multiplied by 2 (via 6/3 or similar) to reach 30, or combined with other results. Subtraction and division should be employed strategically to create 1, 2, or 3, enabling precise adjustments toward 24. Remember to always use only the current available numbers, and after each operation, update the set of remaining numbers accordingly. Focus on sequences that generate 12, 8, or 6 as intermediate steps, as these often lead efficiently to 24.",
                    "value_summary": "Avoid moves leading to 6, 9, 15; focus on promising sums."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "6 7 8 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n",
                                "8 * 3 = 24 (left: 6 7 3) *(if 3 is available from previous steps, but currently not)*\n",
                                "6 * 4 = 24 (left: 7 8 4) *(if 4 is available, but not currently)*\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n"
                            ],
                            "values": [
                                60.0,
                                40.001,
                                40.001,
                                41.0
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "6 7 8 9",
                            "ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n"
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n9 - 6 = 3 (left: 3 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 - 6 = 9 (left: 9 9)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n8 + 7 = 15 (left: 6 9 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 * 3 = 21 (left: 6 8 21)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n8 / 4 = 2 (assuming 4 is available, but not in current set, so ignore)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 + 9 = 15 (left: 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n6 * 4 = 24 (assuming 4 available, but not in current set, so ignore)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n3 + 3 = 6 (assuming two 3s, but only one 15, so ignore)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 - 3 = 5 (left: 6 5 3)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 6 4 3)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n6 + 3 = 9 (left: 8 9)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 + 8 = 16 (left: 16 3)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 - 3 = 5 (left: 8 5)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n3 * 8 = 24 (left: 3 24)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n6 * 4 = 24 (left: 24)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 * 3 = 24 (left: 6 24)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n3 * 8 = 24 (left: 6 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                60.0,
                                3.0,
                                0.002,
                                0.002,
                                20.002,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "6 7 8 9",
                            "ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n"
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 - 6 = 3 (left: 3 15)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n15 - 9 = 6 (left: 6 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 * 3 = 24 (left: 8 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n6 * 4 = 24 (left: 15 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n12 * 2 = 24 (left: 12 8)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n6 * 4 = 24 (left: 15 24)\n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n8 - 3 = 5 (left: 4 5)  \n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n8 / 4 = 2 (left: 2 3)  \n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n7 + 1 = 8 (left: 8)  \n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n6 * 4 = 24 (left: 24)  \n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n3 * 8 = 24 (left: 24)  \n",
                                "7 * 3 + 3 = 24 (left: 6 8 3 3) *(assuming creating 3 from 9 - 6 or 8 - 5, but not directly here)*\n8 / 2 = 4 (left: 4 8 3)\n(These steps focus on forming 12, 15, or 24 efficiently based on the given strategy.)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                40.001,
                                40.001,
                                60.0,
                                60.0,
                                20.002,
                                40.001,
                                0.003,
                                0.003,
                                3.0,
                                60.0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "6 7 8 9",
                            "ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n"
                            ],
                            "new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n6 * 4 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n8 * 3 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n9 * (8 / 4) = 18 (left: 9 8 4)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n7 * 3 + 3 = 24 (left: 7 3 3)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n7 * 3 = 21 (left: 9 8 21)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n8 * 3 = 24 (left: 9 3)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n(6 + 2) * 3 = 24 (left: 6 2 3)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n9 - 3 = 6 (left: 6 8 6)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n8 / 8 = 1 (left: 1 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n24 / 8 = 3 (left: 3 8)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n8 - 8 = 0 (left: 0 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n8 + 8 = 16 (left: 16 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n8 + 16 = 24 (left: 8 24)\n24 - 8 = 16 (left: 16 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n6 * 4 = 24 (left: 24)\n",
                                "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n8 * 3 = 24 (left: 24)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 6, 7, 8, 9 efficiently, focus on forming key intermediate totals like 12, 15, or 24 using only the original numbers. Prioritize combining 7 and 8 to get 15, then multiply or add to approach 24. Use subtraction or division to create small numbers (1, 2, 3) for precise adjustments. Avoid creating numbers outside the original set; always operate solely on remaining numbers. Target combinations that yield 12 or 8 early, as these simplify reaching 24 through multiplication or addition. Focus on sequences that leverage these strategic benchmarks.",
                    "value_summary": "Avoid sums leading to impossible or dead-end states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "6 7 8 9",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n",
                                "8 - 6 = 2 (left: 9 2 2)\n",
                                "8 / 2 = 4 (left: 9 4)\n",
                                "9 - 8 = 1 (left: 7 1)\n",
                                "7 * 3 = 21 (left: 21 9)\n",
                                "21 - 9 = 12 (left: 12)\n",
                                "12 * 2 = 24 (left: 12 2)\n",
                                "12 + 12 = 24 (left: 12 12)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                3.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n",
                                "12 * 2 = 24 (left: 12 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n",
                                "12 * 2 = 24 (left: 12 2)\n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 - 6 = 2 (left: 2 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n9 - 6 = 3 (left: 3 9)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 - 2 = 6 (left: 6 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n7 - 6 = 1 (left: 1 7)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n7 - 1 = 6 (left: 6 7)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                3.0
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n6 + 6 = 12 (left: 8 9)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 + 8 = 16 (left: 9 16)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 + 3 = 12 (left: 8 12)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 + 12 = 20 (left: 9 20)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n6 + 8 = 14 (left: 9 14)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n6 + 9 = 15 (left: 8 15)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n8 + 8 = 16 (left: 9 16)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n8 * 3 = 24 (left: 6 3 24)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n9 - 6 = 3 (left: 8 3)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n6 * 4 = 24 (left: 8 4 24)\n",
                                "12 * 2 = 24 (left: 12 2)\n12 / 2 = 6 (left: 6)\n8 + 8 = 16 (left: 9 16)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                60.0,
                                60.0,
                                60.0,
                                1.002
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 - 3 = 5 (left: 5 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 / 2 = 4 (left: 4 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 - 4 = 4 (left: 4 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 / 4 = 2 (left: 2 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 - 2 = 6 (left: 6 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 / 2 = 4 (left: 4 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n9 - 8 = 1 (left: 1 24)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n9 / 3 = 3 (left: 3 24)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n8 - 6 = 2 (left: 2 24)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n8 / 4 = 2 (left: 2 24)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n9 - 7 = 2 (left: 2 24)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 * 3 = 24 (left: 9 24)  \n8 - 7 = 1 (left: 1 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 - 3 = 5 (left: 5 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 / 2 = 4 (left: 4 8)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 6, 7, 8, 9 to reach 24 by leveraging key benchmarks like 12, 15, and 8. Prioritize forming 12 (e.g., 6+6 or 9+3) or 8 early, then multiply or add to approach 24. Avoid using operations that produce invalid paths; for example, 7+8=15 is unhelpful if it cannot lead to 24. Use subtraction or division to generate small numbers (1, 2, 3) for precise adjustments. Discard sequences that do not progress toward these benchmarks, and verify each step's feasibility before proceeding.",
                    "value_summary": "Avoid sums leading to dead-end states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n6 / 3 = 2 (left: 2 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 5 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 8 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 8 6)\n"
                            ],
                            "values": [
                                20.002,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n6 + 4 = 10 (left: 10)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n6 - 4 = 2 (left: 2)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n6 * 4 = 24 (left: )\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n4 + 6 = 10 (left: 10)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n4 - 6 = -2 (left: -2)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n4 / 2 = 2 (left: 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n4 * 6 = 24 (left: )\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n6 / 3 = 2 (left: 2 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n8 / 2 = 4 (left: 4 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n8 - 4 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n6 - 2 = 4 (left: 4 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n4 + 4 = 8 (left: 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n4 * 6 / 2 = 12 (left: 12)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n6 * 4 / 2 = 12 (left: 12)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 2 = 4 (left: 6 4)\n8 / 2 = 4 (left: 4 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                60.0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n6 + 4 = 10 (left: 10)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 6, 7, 8, 9 for 24, prioritize forming 12 or 8 early. Use valid operations\u2014addition, subtraction, multiplication, division\u2014without reusing numbers. For example, from the recent attempt, dividing 8 by 2 (created via 9-7) is effective. Avoid invalid steps like reusing numbers or applying operations that produce inconsistent states. Generate small numbers (1, 2, 3) through subtraction or division for precise adjustments. Focus on combining these small numbers with larger ones to reach 24, verifying each move\u2019s feasibility before proceeding.",
                    "value_summary": "Prioritize reducing to known solvable states; avoid dead-ends."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n4 + 4 = 8 (left: 8 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 / 4 = 2 (left: 2 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n6 / 6 = 1 (left: 1 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "6 7 8 9",
                            "ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n6 / 3 = 2 (left: 4 2)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n8 - 4 = 4 (left: 6 4)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n8 / 2 = 4 (left: 4 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n6 - 4 = 2 (left: 4 2)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n4 * 3 = 12 (left: 12)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n12 / 2 = 6 (left: 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n3 + 3 = 6 (left: 6)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n4 + 4 = 8 (left: 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n4 * 2 = 8 (left: 8)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n8 * 3 = 24 (left: 3)\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / (9 - 7)) * 6 = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                60.0
                            ],
                            "select_new_ys": [
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / (9 - 7)) * 6 = 24\n",
                                "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n8 - 4 = 4 (left: 4 6)\n6 / 3 = 2 (left: 4 2)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 6, 7, 8, 9 for 24, avoid steps that rely on non-existent numbers. Focus on forming 8 or 12 early, such as using 8 directly or combining numbers to reach these targets. Use subtraction or division to generate small numbers (1, 2, 3) for precise adjustments, ensuring all intermediate steps involve only the original or newly created valid numbers. Prioritize operations that directly lead toward 24, like multiplying 3 by 8 or combining smaller results with larger numbers. Never attempt to subtract or divide by numbers not present in the current set; each move must be based solely on available, valid results.",
                    "value_summary": "In solving 24 with 6, 7, 8, 9, prioritize moves that reduce the set to known solvable states, avoiding invalid operations or dead-ends. Valid moves must use only the current numbers to produce new results, ensuring all intermediate steps are legitimate. Moves introducing or relying on numbers not present initially or that lead to unsolvable configurations are unpromising. Focus on operations that maintain progress toward 24 without invalid assumptions or unnecessary complexity."
                }
            ],
            "env_info": [
                {
                    "action": "7 + 8 = 15 (left: 6 9 15)\n15 / 3 = 5 (left: 5 9 6)\n6 * 4 = 24 (left: 24)\nAnswer: (7 + 8) + (6 - 9 / 3) = 24\n",
                    "history": [
                        "9 - 7 = 2 (left: 6 8 2)",
                        "8 / 2 = 4 (left: 4 6)",
                        "Answer: (8 / (9 - 7)) * 6 = 24"
                    ]
                },
                {
                    "action": "6 * 4 = 24 (left: 24 9)\n9 - 6 = 3 (left: 3 7 8)\n8 - 3 = 5 (left: 5 7)\n7 + 8 = 15 (left: 6 9 15)\n",
                    "history": [
                        "9 - 7 = 2 (left: 6 8 2)",
                        "8 / 2 = 4 (left: 4 6)",
                        "Answer: (8 / (9 - 7)) * 6 = 24"
                    ]
                },
                {
                    "action": "7 + 8 = 15 (left: 6 9 15)\n7 + 8 = 15 (left: 6 9 15)\n9 + 15 = 24 (left: 6 24)\n6 * 4 = 24 (left: 24)\n",
                    "history": [
                        "9 - 7 = 2 (left: 6 8 2)",
                        "8 / 2 = 4 (left: 4 6)",
                        "Answer: (8 / (9 - 7)) * 6 = 24"
                    ]
                },
                {
                    "action": "9 - 7 = 2 (left: 6 8 2)\n8 / 2 = 4 (left: 4 6)\n9 - 6 = 3 (left: 3 8)  \n8 - 3 = 5 (left: 5 8)\n",
                    "history": [
                        "9 - 7 = 2 (left: 6 8 2)",
                        "8 / 2 = 4 (left: 4 6)",
                        "Answer: (8 / (9 - 7)) * 6 = 24"
                    ]
                },
                {
                    "action": "8 - 4 = 4 (left: 6 4)\n\n",
                    "history": [
                        "9 - 7 = 2 (left: 6 8 2)",
                        "8 / 2 = 4 (left: 4 6)",
                        "Answer: (8 / (9 - 7)) * 6 = 24"
                    ]
                },
                {
                    "action": "4 * 6 = 24 (left: 24)\nAnswer: (8 / (9 - 7)) * 6 = 24\n",
                    "history": [
                        "9 - 7 = 2 (left: 6 8 2)",
                        "8 / 2 = 4 (left: 4 6)",
                        "Answer: (8 / (9 - 7)) * 6 = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 2562991,
                "prompt_tokens": 1481794,
                "cost": 1.1733758
            }
        },
        {
            "idx": 903,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n",
                                "4 * 4 = 16 (left: 3 16)\n",
                                "13 - 4 = 9 (left: 3 9)\n",
                                "13 / 4 = 3.25 (left: 3 3.25)\n",
                                "13 - 3 = 10 (left: 10 4)\n",
                                "13 / 3 \u2248 4.33 (left: 4.33 4)\n",
                                "3 + 4 = 7 (left: 7 13)\n",
                                "3 * 4 = 12 (left: 12 13)\n",
                                "3 + 13 = 16 (left: 16 4)\n",
                                "4 + 13 = 17 (left: 17 3)\n"
                            ],
                            "values": [
                                60.0,
                                0.002,
                                20.002,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n",
                                "13 - 4 = 9 (left: 3 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8)\n",
                                "13 - 4 = 9 (left: 3 9)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 / 2 = 4 (left: 4 3)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 + 3 = 11 (left: 11 8)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "13 - 4 = 9 (left: 3 9)\n3 + 9 = 12 (left: 12)\n",
                                "13 - 4 = 9 (left: 3 9)\n9 - 3 = 6 (left: 6)\n",
                                "13 - 4 = 9 (left: 3 9)\n3 * 9 = 27 (left: 27)\n",
                                "13 - 4 = 9 (left: 3 9)\n9 / 3 = 3 (left: 3)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 - 8 = 0 (left: 5 0)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 + 8 = 16 (left: 16 5)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 * 8 = 64 (left: 64 5)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n4 + 4 = 8 (left: 8)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n4 * 6 = 24 (left: 6)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n6 / 3 = 2 (left: 2)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n3 * 8 = 24 (left: 8)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n8 / 2 = 4 (left: 4)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n4 * 6 = 24 (left: 6)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n5 - 1 = 4 (left: 4 5)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n5 / 1 = 5 (left: 4 5)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n1 + 5 = 6 (left: 6)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n1 * 5 = 5 (left: 5)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n4 + 5 = 9 (left: 9)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n4 - 5 = -1 (left: -1)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n4 * 5 = 20 (left: 20)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n4 / 5 = 0.8 (left: 0.8)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n5 - 4 = 1 (left: 1)\n",
                                "4 + 4 = 8 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n8 / 8 = 1 (left: 5 1)\n5 + 4 = 9 (left: 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n4 + 4 = 8 (left: 8)\n",
                                "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n4 * 6 = 24 (left: 6)\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n",
                                "4 + 13 = 17 (left: 8 17)\n",
                                "4 * 13 = 52 (left: 8 52)\n",
                                "13 - 4 = 9 (left: 8 9)\n",
                                "13 / 4 = 3.25 (left: 3.25 8)\n",
                                "4 - 4 = 0 (left: 0 13)\n",
                                "4 / 4 = 1 (left: 1 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 8 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 8 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 - 8 = 5 (left: 5 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 - 5 = 8 (left: 8 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 / 8 \u2248 1.625 (invalid for integer steps)\n",
                                "4 * 2 = 8 (left: 8 13)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 2 = 8 (left: 8 13)\n8 / 8 = 1 (left: 1 13)\n",
                                "4 * 2 = 8 (left: 8 13)\n8 - 8 = 0 (left: 0 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n"
                            ],
                            "new_ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 * 2 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 * 2 = 8 (left: 8 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n"
                            ],
                            "new_ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 + 4 = 8 (left: 8)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 * 2 = 8 (left: 8)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n8 + 8 = 16 (left: 16)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n8 + 4 = 12 (left: 12 4)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n8 - 4 = 4 (left: 4 4)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 + 4 = 8 (left: 8)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 * 2 = 8 (left: 8)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n8 / 2 = 4 (left: 4)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n8 / 4 = 2 (left: 2)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n13 - 8 = 5 (left: 5 13)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n13 / 8 \u2248 1.625 (invalid, skip)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n8 / 13 \u2248 0.615 (invalid, skip)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n8 + 13 = 21 (left: 21)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n13 - 8 = 5 (left: 5 13)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n13 / 8 \u2248 1.625 (invalid, skip)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n8 * 13 = 104 (skip, too large)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n8 - 13 = -5 (skip, negative)\n",
                                "4 + 4 = 8 (left: 8 13)\n8 / 2 = 4 (left: 4 13)\n4 + 4 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 + 4 = 8 (left: 8)\n",
                                "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 * 2 = 8 (left: 8)\n"
                            ]
                        }
                    ],
                    "summary": "Use the two 4s to make 8 (via 4\u00d72 or 4+4), then combine 3 and 8 to reach 24. Focus on valid operations that preserve original numbers without reuse or invalid steps.",
                    "value_summary": "Avoid moves leading to 3 and 8; they are impossible."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "13 - 4 = 9 (left: 3 4 9)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n",
                                "4 * 3 = 12 (left: 12 4 13)\n"
                            ],
                            "values": [
                                1.002,
                                40.001,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n13 - 4 = 9 (left: 9 3)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n4 + 4 = 8 (left: 8 13 3)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n4 * 3 = 12 (left: 12 13)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n13 - 3 = 10 (left: 10 4 4)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n4 + 3 = 7 (left: 7 13 4)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n13 - 4 = 9 (left: 9 3)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n4 * 3 = 12 (left: 12 13)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n13 / 13 = 1 (left: 1 4 4)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n4 + 4 = 8 (left: 8 13)\n",
                                "13 - 4 = 9 (left: 3 4 9)\n13 - 4 = 9 (left: 9 4)\n"
                            ],
                            "values": [
                                41.0,
                                1.002,
                                20.002,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                41.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 * 4 = 16 (left: 13 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 + 3 = 16 (left: 16 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 3 = 10 (left: 10 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 / 13 = 1 (left: 1 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 / 4 \u2248 3.25 (not an integer, discard)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n4 * 3 = 12 (left: 4 12)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n4 * 3 = 12 (left: 4 12)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n13 - 4 = 9 (left: 9 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n13 - 3 = 10 (left: 4 10)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n13 - 4 = 9 (left: 9 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n4 + 3 = 7 (left: 7 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n4 * 3 = 12 (left: 12 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n13 - 4 = 9 (left: 9 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n13 - 3 = 10 (left: 4 10)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n4 + 3 = 7 (left: 7 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n13 - 4 = 9 (left: 9 4)\n4 * 3 = 12 (left: 12 13)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n13 - 4 = 9 (left: 3 4 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 3, 4, 4, 13 for 24, prioritize combining the larger numbers with the smaller ones in valid operations. Start by considering all possible sums and differences involving 13, as it\u2019s the largest number. For example, subtracting 4 + 4 from 13 yields 5 (13 - 4 - 4 = 5). Then, use the remaining 3 with this result, but since 5 + 3 = 8 or 5 \u00d7 3 = 15, which are not 24, look for alternative routes. Alternatively, combining the two 4s first: 4 + 4 = 8, then multiply by 3: 8 \u00d7 3 = 24; this uses only 4s and 3, leaving 13 unused\u2014acceptable if the goal is to reach 24 with any subset, but ideally all numbers. If all four must be used, consider the sum 4 + 4 + 13 + 3 = 24, which is straightforward and uses all numbers directly. Alternatively, subtracting 4 from 13: 13 - 4 = 9, then multiplying by 3: 9 \u00d7 3 = 27, overshooting 24. Combining 13 with 4: 13 - 4 = 9, then subtracting the remaining 4: 9 - 4 = 5, which doesn't help. The key is to evaluate all pairings systematically, focusing on operations that preserve number integrity, avoid reuse, and directly target 24. Using sums like 4 + 4 and then multiplying by 3 provides a reliable, legal solution.",
                    "value_summary": "For 3, 4, 4, 13, prioritize moves combining original numbers only; avoid steps producing 3 or 8, or involving nonexistent intermediate values. Valid steps should maintain feasible progress toward 24, emphasizing legal operations and avoiding dead-ends like impossible intermediate results."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 * 3 = 24 (left: 13)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 - 3 = 5 (left: 8 13 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 + 3 = 11 (left: 13 8 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 - 8 = 5 (left: 5 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n3 * 8 = 24 (left: 13 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 - 5 = 8 (left: 8 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 5 = 18 (left: 18 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n5 + 8 = 13 (left: 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n5 * 3 = 15 (left: 15 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n13 + 4 = 17 (left: 3 4 17)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n13 * 4 = 52 (left: 3 4 52)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n13 / 4 \u2248 3.25 (left: 3 4 3.25)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n4 - 3 = 1 (left: 1 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n4 + 3 = 7 (left: 7 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n4 * 3 = 12 (left: 12 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n4 / 3 \u2248 1.33 (left: 1.33 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n13 - 3 = 10 (left: 10 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 4 = 16 (left: 16 13 3)\n13 + 3 = 16 (left: 16 4)\n"
                            ],
                            "values": [
                                2.001,
                                0.003,
                                20.002,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n4 * 4 = 16 (left: 3 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n4 * 4 = 16 (left: 3 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n13 - 13 = 0 (left: 24 0)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n24 - 24 = 0 (left: 13 0)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n13 + 13 = 26 (left: 24 26)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n24 / 24 = 1 (left: 13 1)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n13 - 1 = 12 (left: 12 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n24 - 12 = 12 (left: 13 12)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n13 * 2 = 26 (left: 24 26)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n8 * 3 = 24 (left: 13 24)\n24 / 12 = 2 (left: 13 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 3, 4, 4, 13 for 24, focus on valid, non-repetitive combinations that use each number once. Prioritize pairing the two 4s early: 4 + 4 = 8. This step is reliable and reduces complexity. Afterward, consider operations involving 13 and 3 with this 8. For example, subtract 13 - 8 = 5, then multiply by 3 (5 \u00d7 3 = 15), which overshoots; or try adding 13 + 8 = 21, then subtract 3 (21 - 3 = 18). Alternatively, multiply 4 \u00d7 4 = 16, then add 3 to get 19, still not 24. Since direct combinations don't yield 24, explore multiplying 8 by 3 (8 \u00d7 3 = 24) after creating 8 from the two 4s, but ensure all numbers are used: 4 + 4 = 8, then multiply by 3, but 13 remains unused unless incorporated creatively. The key is systematically pairing 4 + 4 first, then using remaining numbers in operations that directly reach 24 without reusing any number.",
                    "value_summary": "Prioritize legal, feasible operations involving original numbers; avoid steps leading to impossible intermediate results like 8 or 3."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 3)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 - 3 = 5 (left: 13 5)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 / 2 = 4 (left: 4 13)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 4 = 9 (left: 9 8)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n21 - 3 = 18 (left: 18)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 + 8 = 21 (left: 21)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 3)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                2.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 - 3 = 5 (left: 8 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 + 3 = 11 (left: 8 11)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 * 3 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 / 3 = 8/3 (left: 8/3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 + 8 = 11 (left: 11)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 - 8 = -5 (left: -5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 * 8 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 / 8 = 3/8 (left: 3/8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n21 - 3 = 18 (left: 18 21)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n21 / 3 = 7 (left: 7 21)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n18 + 6 = 24 (left: 18 6)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n7 * 3 = 21 (left: 7 21)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n7 + 17 = 24 (left: 7 17)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 21 3)  \n24 + 0 = 24 (left: 24)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                20.002,
                                0.003,
                                40.001,
                                20.002,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 * 3 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 * 8 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 * 3 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 * 8 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 * 3 = 24 (left: 24)\nAnswer: (4 + 4) * (13 - 5) = 24\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n"
                            ],
                            "values": [
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 8 3)  \n8 * 3 = 24 (left: 24)\nAnswer: (4 + 4) * (13 - 5) = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 3, 4, 4, 13 for 24, begin by pairing the two 4s: 4 + 4 = 8, creating a reliable base. Next, explore combining 13 with this 8 to inch closer to 24. For instance, subtract 13 - 8 = 5, then multiply by 3 (5 \u00d7 3 = 15), which is under 24, or add 13 + 8 = 21, then subtract 3 (21 - 3 = 18); neither reaches 24 directly. Alternatively, multiply the 4s first: 4 \u00d7 4 = 16, then add 3 to get 19, still short. To reach 24, consider multiplying 8 (from 4 + 4) by 3: 8 \u00d7 3 = 24, but ensure all numbers are used precisely once. This indicates the key is to create 8 from the 4s, then multiply by 3, leaving 13 unused\u2014so find a way to incorporate 13 without violating rules. The critical move is forming 8 early, then manipulating remaining numbers to reach 24 systematically.",
                    "value_summary": "In the 24 game, prioritize legal operations combining original numbers, ensuring intermediate results remain feasible. Avoid moves producing impossible values or referencing non-existent numbers. Recognize that steps reducing to known, manageable values (e.g., 8, 13, 3) are promising, while invalid or impossible operations indicate unpromising paths."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 / 4 = 2 (left: 3 2 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 8 = 24 (left: 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 3 = 10 (left: 8 10)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 / 13 = 1 (left: 1 3 8)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n8 / 4 = 2 (left: 3 2 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n8 - 4 = 4 (left: 3 4 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n3 * 8 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n8 / 8 = 1 (left: 1 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n16 - 8 = 8 (left: 8 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n8 + 8 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 8 16)\n8 * 3 = 24 (left: 8 3)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n8 - 3 = 5 (left: 5 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n8 / 4 = 2 (left: 2 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n4 * 3 = 12 (left: 12 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n12 / 2 = 6 (left: 6 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n6 + 8 = 14 (left: 14)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n4 + 4 = 8 (left: 8 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n3 + 3 = 6 (left: 6 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n8 - 3 = 5 (left: 5 3)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 3, 4, 4, 13 for 24, focus on creating 8 early by adding the two 4s: 4 + 4 = 8. Then, multiply this 8 by 3: 8 \u00d7 3 = 24, which completes the target. The remaining number, 13, is unused, which is permissible if rules allow ignoring unused numbers. If all numbers must be used, consider subtracting 13 from 17 (e.g., 17 from 13 + 4), but since 13 cannot be combined to reach 24 directly, prioritize forming 8 from the 4s and multiplying by 3.",
                    "value_summary": "Prioritize legal operations producing manageable, achievable intermediate values; avoid impossible results; favor steps reducing to known solvable targets like 8 or 13."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 8, 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 3 = 12 (left: 12, 4, 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 4 = 9 (left: 9, 3, 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 3 = 10 (left: 10, 4, 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 / 13 = 1 (left: 1, 3, 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 + 13 = 17 (left: 17, 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n4 * 13 = 52 (left: 52, 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 13 = 39 (left: 39, 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                21.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 - 4 = 12 (left: 16 12)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n4 * 4 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n13 - 4 = 9 (left: 12 9)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n12 - 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n13 - 12 = 1 (left: 1 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n13 / 4 = 3.25 (left: 3.25 12)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n4 * 3 = 12 (left: 12 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n4 + 12 = 16 (left: 13 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 * 4 = 12 (left: 12, 4, 13)\n13 - 4 = 9 (left: 9 12)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 - 4 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 / 4 = 5 (left: 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 - 5 = 15 (left: 15)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 + 4 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 + 5 = 25 (left: 25)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 / 5 = 4 (left: 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n4 * 4 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n16 + 4 = 20 (left: 20)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n16 + 5 = 21 (left: 21)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n16 - 4 = 12 (left: 12)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n16 / 4 = 4 (left: 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n4 + 4 = 8 (left: 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n4 * 4 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n4 + 12 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n12 / 4 = 3 (left: 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 / 4 = 4 (left: 16 4)\n12 - 4 = 8 (left: 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 - 4 = 16 (left: 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 / 4 = 5 (left: 5)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 3, 4, 4, 13 for 24, prioritize combining the two 4s early to create a manageable intermediate: 4 + 4 = 8. Multiplying this result by 3 yields 24 directly, making the expression (4 + 4) \u00d7 3 = 24. This approach is valid and straightforward, leaving the 13 unused, which is permissible if rules allow ignoring unused numbers. Alternatively, consider operations involving 13 to find other solutions, but direct combinations like (13 - 4) \u00d7 (4 - 3) produce 9, not 24, so they are less effective. When manipulating the numbers, always ensure each step involves only available numbers, updating the set accordingly without reusing or dropping numbers improperly. Focus on creating a simple, intermediate target\u2014namely 8\u2014from the two 4s, then multiply by 3. Since 13 cannot be directly combined to reach 24 efficiently, the best strategy remains to form 8 from the 4s and multiply by 3, achieving 24 in one clean step. This method is the most reliable given the available numbers.",
                    "value_summary": "For 3, 4, 4, 13, prioritize legal operations that produce manageable, achievable intermediate values\u2014preferably targeting known solutions like 8 or 13. Combining 4 + 4 = 8 is promising, but subsequent steps must use valid, permissible operations without reusing or invalidating values. Avoid steps that lead to impossible or unresolvable intermediate states, focusing instead on moves that systematically progress toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n13 (no operations available)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n13 (no operations available)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n13 (no operations available)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n13 (no operations available)\n(4 + 4) * 3 = 24 (left: 13)\n"
                            ],
                            "values": [
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n(4 + 4) * 3 = 24 (left: 13)\n13 (no operations available)\n(4 + 4) * 3 = 24 (left: 13)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 3, 4, 4, 13 for 24, focus on combining the two 4s early to produce a manageable intermediate\u2014preferably 8 via (4 + 4). Multiplying this by 3 yields 24 directly: (4 + 4) \u00d7 3 = 24, which is the simplest and most reliable approach, leaving 13 unused if rules permit ignoring leftovers. Attempts to incorporate 13 directly often involve less straightforward operations, such as (13 - 4) \u00d7 (4 - 3), which result in 9, not 24. From the recent analysis, starting with 3 + 13 = 16 is valid but doesn't readily lead to 24 when combined further with 4. Therefore, prioritize creating 8 from the two 4s and multiplying by 3. Use remaining numbers only if necessary, but the most straightforward solution remains (4 + 4) \u00d7 3 = 24, minimizing complexity and ensuring a reliable path to the target. Avoid convoluted operations involving 13 unless they clearly lead to 24.",
                    "value_summary": "For the numbers 3, 4, 4, 13, prioritize moves that produce intermediate values aligned with common solution steps\u2014particularly targeting 8, 13, or 16\u2014using valid operations without invalid reuse. Avoid steps that generate impossible or unresolvable states, such as invalid sums or operations that do not lead toward 24. Focus on systematic, legal combinations that maintain achievable pathways, especially emphasizing operations that simplify toward known solutions."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 3 = 10 (left: 8 10)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 / 13 = 1 (left: 8 1)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 - 3 = 5 (left: 13 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 / 4 = 2 (left: 13 2)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 - 2 = 6 (left: 13 6)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 / 13 = 1 (left: 1 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n5 - 8 = -3 (left: -3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n5 + 8 = 13 (left: 13 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n3 * 8 = 24 (left: 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n4 * 6 = 24 (left: 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n6 * 4 = 24 (left: 5)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n8 + 16 = 24 (left: 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n24 / 1 = 24 (left: 3)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n3 + 8 = 11 (left: 11 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n3 * 8 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 - 8 = 0 (left: 0 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 / 8 = 1 (left: 1 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 / 8 = 1 (left: 1 1.6)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 - 8 = 0 (left: 0 1.6)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 * 8 = 64 (left: 1.6 64)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 + 8 = 16 (left: 1.6 16)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n1.6 + 8 = 9.6 (left: 9.6 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n1.6 * 8 = 12.8 (left: 12.8 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n1.6 - 8 = -6.4 (left: -6.4 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 / 8 = 1 (left: 1 1.6)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 / 1.6 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 / 5 \u2248 1.6 (left: 1.6 8)\n8 - 1.6 = 6.4 (left: 6.4 8)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 / 2 = 4 (left: 4 8)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 3, 4, 4, 13 efficiently, prioritize combining the two 4s first: (4 + 4) = 8, then multiply by 3 to reach 24: (4 + 4) \u00d7 3 = 24. This approach uses only three of the four numbers, leaving 13 unused, which is acceptable if rules permit ignoring leftovers. Attempting to directly incorporate 13 into the calculation often leads to convoluted operations that do not simplify to 24, such as (13 - 4) \u00d7 (4 - 3), which yields 9. Since the current best solution is (4 + 4) \u00d7 3 = 24, focus on creating the intermediate 8 early, then multiply by 3, avoiding complex manipulations involving 13 unless necessary. When leftovers remain, verify if rules allow ignoring unused numbers; if not, explore operations combining 13 with other results, but prioritize straightforward calculations for efficiency.",
                    "value_summary": "For the puzzle involving 3, 4, 4, 13, effective evaluation hinges on using operations that progress systematically toward 24 without violating game rules. Moves that combine numbers to produce intermediate values aligned with common solution pathways\u2014such as 8, 13, 16, or directly reaching 24\u2014are promising. For example, combining (4 + 4) * 3 yields 24 directly, representing an efficient, legal move that concludes the puzzle. Moves that use three numbers simultaneously (e.g., (4 + 4) * 3) are valid if they consume those numbers and leave remaining ones correctly. Conversely, steps that generate intermediate results not part of the original set or reuse results improperly\u2014like attempting to treat a previous result (24) as a leftover number\u2014are invalid. The key is to ensure each move uses only the current available numbers, producing new intermediate values that can lead toward 24, while avoiding impossible or redundant operations. Successful moves simplify the puzzle, reduce complexity, and adhere strictly to the rules, with the ultimate goal of reaching 24 efficiently and legally."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n3 + 13 = 16 (left: 16 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 3 = 10 (left: 10 8)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 - 3 = 5 (left: 5 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n13 - 8 = 5 (left: 3 5)\n"
                            ],
                            "values": [
                                40.001,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 13 + = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 + 13 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n3 * 8 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n3 + 21 = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n13 - 4 = 9 (left: 9 4)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n13 / 4 = 3.25 (invalid)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n4 + 13 = 17 (left: 17 3)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n4 * 13 = 52 (invalid)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n4 + 4 = 8 (left: 8 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n8 / 4 = 2 (left: 2 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n8 - 4 = 4 (left: 4 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 13 = 21 (left: 3 21)\n4 + 4 = 8 (left: 8 13)\n"
                            ],
                            "values": [
                                60.0,
                                21.001,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 13 + = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "3 4 4 13",
                            "ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 13 + = 24 (left: 24)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n"
                            ],
                            "new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 13 + = 24 (left: 24)\nAnswer: (4 + 4) + (3 + 13) = 24\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n13 - 11 = 2 (left: 2 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n13 - 2 = 11 (left: 11 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n13 / 13 = 1 (left: 1 11)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n11 - 11 = 0 (left: 0 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n11 / 11 = 1 (left: 1 13)\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n13 / 13 = 1 (left: 1 11)\n"
                            ],
                            "values": [
                                60.0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n11 13 + = 24 (left: 24)\nAnswer: (4 + 4) + (3 + 13) = 24\n",
                                "4 + 4 = 8 (left: 3 8 13)\n8 + 3 = 11 (left: 11 13)\n\n13 - 11 = 2 (left: 2 13)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 3, 4, 4, 13, focus on creating the intermediate 8 early by adding the two 4s: (4 + 4) = 8. Then multiply this 8 by 3: (8 \u00d7 3) = 24, which completes the puzzle using the three numbers 4, 4, and 3, leaving 13 unused. Avoid complex manipulations involving 13 unless necessary; attempting to incorporate 13 often leads to convoluted operations that do not simplify to 24. Since leaving leftovers is typically permitted, prioritize straightforward calculations that generate 8 and then reach 24 efficiently. Do not introduce invalid operations\u2014such as using numbers not present in the current set or derived from previous steps\u2014since legality depends on using only available numbers. This approach minimizes unnecessary complexity and ensures a clear path to 24.",
                    "value_summary": "For the puzzle 3, 4, 4, 13, effective moves systematically progress toward 24 by combining available numbers using valid operations\u2014addition, subtraction, multiplication, or division\u2014without reusing intermediate results improperly. Moves that directly produce or approach key intermediate values (like 8, 13, or 16) are promising, especially if they facilitate reaching 24 efficiently. Valid steps strictly utilize current numbers, ensuring all results originate from the original set. Combining three numbers is acceptable if it consumes those numbers and yields a new, useful intermediate. Moves that generate values not derivable from current numbers or reuse results incorrectly are invalid. The goal is to simplify the puzzle toward 24 through legal, logical operations that adhere to the initial set and game rules."
                }
            ],
            "env_info": [
                {
                    "action": "4 + 4 = 8 (left: 3 8)\n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n4 + 4 = 8 (left: 8)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "4 * 2 = 8 (left: 8 13)\n13 + 8 = 21 (left: 21)\n21 (no further steps possible to reach 24)\n4 + 4 = 8 (left: 8)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "4 + 4 = 8 (left: 3 8 13)\n4 + 4 = 8 (left: 3 8)\n4 + 4 = 8 (left: 8 13)\n13 - 4 = 9 (left: 3 4 9)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "4 + 4 = 8 (left: 8 13 3)\n13 + 8 = 21 (left: 21 3)\n13 - 4 = 9 (left: 3 4 9)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "13 - 5 = 8 (left: 8 3)  \n3 * 8 = 24 (left: 24)\nAnswer: 3 * (4 + 4) = 24\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "4 + 4 = 8 (left: 3 8 13)\n13 - 5 = 8 (left: 3 8 5)\n8 - 5 = 3 (left: 3 3)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "3 + 13 = 16 (left: 16, 4)\n16 + 4 = 20 (left: 20 4)\n20 - 4 = 16 (left: 16)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "(4 + 4) * 3 = 24 (left: 13)\n13 (no operations available)\n(4 + 4) * 3 = 24 (left: 13)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "13 - 8 = 5 (left: 5 8)\n8 - 5 = 3 (left: 3 8)\n8 - 3 = 5 (left: 5 8)\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                },
                {
                    "action": "8 + 3 = 11 (left: 11 13)\n11 13 + = 24 (left: 24)\nAnswer: (4 + 4) + (3 + 13) = 24\n",
                    "history": [
                        "4 + 4 = 8 (left: 3 8 13)",
                        "Answer: (4 + 4) + (3 + 13) = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 2760741,
                "prompt_tokens": 1582597,
                "cost": 1.2625560999999998
            }
        },
        {
            "idx": 902,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 5 8 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "5 - 1 = 4 (left: 4 8 11)\n",
                                "8 / 2 = 4 (left: 4 5 11)\n",
                                "11 - 7 = 4 (left: 4 5 8)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n",
                                "5 + 19 = 24 (left: 24 8 11)\n",
                                "11 - 7 = 4 (left: 4 5 8)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n",
                                "11 + 13 = 24 (left: 5 8 24)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                20.001,
                                60.0,
                                40.001,
                                0.003,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 4 5 11)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 5 8 11",
                            "ys": [
                                "8 - 4 = 4 (left: 4 5 11)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 4 5 11)\n4 + 11 = 15 (left: 5 15)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n4 * 11 = 44 (left: 5 44)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n11 - 4 = 7 (left: 5 7)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n11 / 4 = 2.75 (left: 5 2.75)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 + 11 = 16 (left: 4 16)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 * 11 = 55 (left: 4 55)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 / 11 \u2248 0.4545 (left: 4 0.4545)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n24 / 6 = 4 (left: 4 11)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n24 / 11 \u2248 2.18 (not an integer)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 24 = -13 (left: -13 5)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n5 * 24 = 120 (left: 120 11)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n5 + 24 = 29 (left: 29 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 5 8 11",
                            "ys": [
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n"
                            ],
                            "new_ys": [
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n4 - 6 = -2 (left: -2)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 + 24 = 30 (left: 6)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n24 - 6 = 18 (left: 18)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n24 / 6 = 4 (left: 4)\n",
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.001
                            ],
                            "select_new_ys": [
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n4 - 6 = -2 (left: -2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 5 8 11",
                            "ys": [
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n4 - 6 = -2 (left: -2)\n"
                            ],
                            "new_ys": [
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 5) * (8 - 5) = 24\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n4 - 6 = -2 (left: -2)\n-2 + 24 = 22 (left: 24)\n"
                            ],
                            "values": [
                                0.001,
                                0
                            ],
                            "select_new_ys": [
                                "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 5) * (8 - 5) = 24\n",
                                "8 - 4 = 4 (left: 4 5 11)\n5 - 11 = -6 (left: 4 -6)\n4 - 6 = -2 (left: -2)\n-2 + 24 = 22 (left: 24)\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 5 8 11",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "8 - 5 = 3 (left: 2 11 3)\n",
                                "11 - 2 = 9 (left: 8 9 5)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n",
                                "8 + 11 = 19 (left: 19 5 2)\n",
                                "8 + 2 = 10 (left: 10 11 5)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n",
                                "8 * 2 = 16 (left: 16 11 5)\n",
                                "11 - 8 = 3 (left: 3 5 2)\n",
                                "5 + 11 = 16 (left: 16 8 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                40.001
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 5 8 11",
                            "ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 5 = 3 (left: 2 3 11)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 8 = 3 (left: 2 3 5)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 2 = 6 (left: 5 6 11)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n5 + 11 = 16 (left: 2 16)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 + 11 = 19 (left: 2 19)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n5 + 8 = 13 (left: 2 13)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n5 * 2 = 10 (left: 10 8 11)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 2 = 9 (left: 8 9)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n13 - 11 = 2 (left: 2 2)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n13 - 2 = 11 (left: 11 2)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n11 + 13 = 24 (left: 2)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n11 * 2 = 22 (left: 13)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n13 - 2 = 11 (left: 11)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n11 + 13 = 24 (left: 2)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n11 + 2 = 13 (left: 13)\n",
                                "5 + 8 = 13 (left: 13 11 2)\n13 - 11 = 2 (left: 2 2)\n"
                            ],
                            "values": [
                                0.003,
                                40.001,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 5 8 11",
                            "ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n11 - 8 = 3 (left: 2 5 3)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n11 - 5 = 6 (left: 2 8 6)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 - 5 = 3 (left: 2 11 3)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n11 - 5 = 6 (left: 4 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n11 - 4 = 7 (left: 5 7)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n8 + 4 = 12 (left: 5 12)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n8 + 11 = 19 (left: 5 19)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n8 * 3 = 24 (left: 5 3) \u2014 but need 3 from 8\u20135\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n8 - 5 = 3 (left: 3 11)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n5 + 11 = 16 (left: 8 16)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n8 + 11 = 19 (left: 4 19)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n5 * 2 = 10 (left: 10 11)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5 11)\n11 - 8 = 3 (left: 3 5)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                60.0,
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "2 5 8 11",
                            "ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n5 - 2 = 3 (left: 3 11)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n11 - 3 = 8 (left: 8 2)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n8 * 3 = 24 (left: 2)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n11 - 5 = 6 (left: 6 4)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n8 - 4 = 4 (left: 11 6 4)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n8 / 4 = 2 (left: 11 6 2)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n11 - 6 = 5 (left: 5 8 2)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n8 - 2 = 6 (left: 11 6)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n11 - 6 = 5 (left: 5 8)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n8 - 5 = 3 (left: 11 3)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n11 - 3 = 8 (left: 8 5)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n5 + 8 = 13 (left: 13)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n8 / 2 = 4 (left: 5 11 4)  \n13 + 11 = 24 (left: )\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n5 - 2 = 3 (left: 3 11)  \n",
                                "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n11 - 3 = 8 (left: 8 2)  \n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers (2, 5, 8, 11) with basic operations (+, \u2013, \u00d7, \u00f7). First, combine 2 and 5 to get 10; then add 11 to reach 21. Finally, add 3 (from 8\u20135) to reach 24, or explore other combinations avoiding introducing new numbers.",
                    "value_summary": "Prioritize promising operations; avoid steps leading to impossible residuals."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "2 5 8 11",
                            "ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 6 = 2 (left: 2 2)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 2 = 6 (left: 6 2)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n6 - 2 = 4 (left: 8 4)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 4 = 2 (left: 6 2)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n6 - 4 = 2 (left: 8 2)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n6 / 2 = 3 (left: 8 3)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 3 = 5 (left: 5 2)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "2 5 8 11",
                            "ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n6 + 4 = 10 (left: 4)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n6 * 4 = 24 (left: 4)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n6 + 4 = 10 (left: 10 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n6 - 4 = 2 (left: 2 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n6 * 4 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5 4)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n4 + 6 = 10 (left: 10 4)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n4 - 6 = -2 (left: -2 6)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n4 * 6 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 - 4 = 4 (left: 6 4)\n4 / 6 = 0.666... (left: 0.666... 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "2 5 8 11",
                            "ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n"
                            ],
                            "new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (11 - 5) = 24\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n10 + 8 = 18 (left: 18 10)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n10 + 11 = 21 (left: 21 8)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n11 + 8 = 19 (left: 19 10)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n11 + 5 = 16 (left: 16 8)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n8 + 5 = 13 (left: 13 10)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n8 + 11 = 19 (left: 19 5)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n5 + 11 = 16 (left: 16 8)\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n8 + 11 = 19 (left: 19 5)\n"
                            ],
                            "values": [
                                40.0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (11 - 5) = 24\n",
                                "11 - 5 = 6 (left: 8 6 2)\n8 / 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n10 + 8 = 18 (left: 18 10)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 2, 5, 8, 11, prioritize combining 2 and 5 to get 10, then add 11 for 21. Use 8\u20135 to get 3, then add this to 21 for 24. Avoid reusing numbers after they've been combined; each operation must use remaining original or intermediate results without reintroducing used numbers. Focus on sequences that produce 24 through additive or subtractive combinations, such as 10 + 8 + 6 or 11 + 8 + 5.",
                    "value_summary": "In the 2, 5, 8, 11 puzzle, moves are promising if they produce residual sets consistent with prior steps\u2014label as \"sure.\" Avoid steps that reuse used numbers or create residuals incompatible with previous states\u2014label as \"impossible.\" Focus on operations that maintain valid, achievable configurations, prioritizing steps that lead toward the target without violating number availability."
                }
            ],
            "env_info": [
                {
                    "action": "8 + 16 = 24 (left: 5 11 24)\n11 - 5 = 6 (left: 6 24)\n6 * 4 = 24 (left: 24)\nAnswer: (11 - 5) * (8 - 5) = 24\n",
                    "history": [
                        "11 - 5 = 6 (left: 8 6 2)",
                        "Answer: (8 / 2) * (11 - 5) = 24"
                    ]
                },
                {
                    "action": "11 - 5 = 6 (left: 8 6 2)\n11 - 5 = 6 (left: 2 6 8)\n5 + 8 = 13 (left: 2 11 13)  \n5 - 2 = 3 (left: 3 11)  \n",
                    "history": [
                        "11 - 5 = 6 (left: 8 6 2)",
                        "Answer: (8 / 2) * (11 - 5) = 24"
                    ]
                },
                {
                    "action": "8 / 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: (8 / 2) * (11 - 5) = 24\n",
                    "history": [
                        "11 - 5 = 6 (left: 8 6 2)",
                        "Answer: (8 / 2) * (11 - 5) = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 2836904,
                "prompt_tokens": 1608108,
                "cost": 1.2955724
            }
        },
        {
            "idx": 901,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n",
                                "7 / 4 = 1.75 (left: 1 2 1.75)\n",
                                "1 + 2 = 3 (left: 3 4)\n",
                                "2 + 4 = 6 (left: 1 6)\n",
                                "4 * 2 = 8 (left: 1 8)\n",
                                "4 / 2 = 2 (left: 1 2)\n",
                                "1 + 2 = 3 (left: 3)\n",
                                "1 * 2 = 2 (left: 2)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n"
                            ],
                            "new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n1 + 2 = 3 (left: 3 -3)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n2 + -3 = -1 (left: 1 -1)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n1 - 2 = -1 (left: -3 -1)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n-3 + -3 = -6 (left: 1 -6)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n-3 - 1 = -4 (left: -6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n1 + 2 = 3 (left: 3 -3)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n1 + 2 = 3 (left: 3 -3)\n"
                            ],
                            "new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 14 = 24 (left: 24)\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n14 + 10 = 24 (left: 24)\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n20 + 4 = 24 (left: 24)\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n48 / 2 = 24 (left: 24)\n",
                                "4 - 7 = -3 (left: 1 2 -3)\n1 + 2 = 3 (left: 3 -3)\n3 - 3 = 0 (left: 0)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 14 = 24 (left: 24)\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n14 + 10 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 14 = 24 (left: 24)\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n14 + 10 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 14 = 24 (left: 24)\nAnswer: (4 + 7) + (2 * 1) = 24\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n14 + 10 = 24 (left: 24)\nAnswer: 2 * (7 - 1) = 12\n"
                            ],
                            "values": [
                                0.0,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n14 + 10 = 24 (left: 24)\nAnswer: 2 * (7 - 1) = 12\n",
                                "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n10 + 14 = 24 (left: 24)\nAnswer: (4 + 7) + (2 * 1) = 24\n"
                            ]
                        }
                    ]
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n",
                                "7 * 4 = 28 (left: 1 2 28)\n",
                                "7 + 1 = 8 (left: 2 4 8)\n",
                                "4 + 7 = 11 (left: 1 2 11)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n",
                                "2 + 4 = 6 (left: 1 6 7)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 2 = 8 (left: 1 8 7)\n",
                                "8 + 4 = 12 (left: 1 12 7)\n",
                                "7 * 3 = 21 (left: 1 21)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                2.001,
                                0.003,
                                60.0,
                                1.002,
                                1.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n(assuming 3 is derived from previous steps)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n2 * 12 = 24 (if 12 is available)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n11 + 13 = 24 (if 13 is derived)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n1 + 23 = 24 (if 23 is derived)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n4 + 7 = 11 (left: 1 11)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n4 * 7 = 28 (left: 1 28)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n7 - 4 = 3 (left: 1 3)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n7 / 4 = 1.75 (left: 1 1.75)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n1 + 7 = 8 (left: 1 8)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n1 * 7 = 7 (left: 1 7)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n1 + 4 = 5 (left: 1 5)\n",
                                "2 * 4 = 8 (left: 1 8 7)\n1 * 4 = 4 (left: 1 4)\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n4 * 2 = 8 (left: 1 8)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n7 * 4 - 4 = 24 (left: 1 4)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n7 * 4 - 7 = 21 (left: 1 21)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n7 + 4 + 13 = 24 (invalid, 13 not available)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n4 * 6 = 24 (invalid, 6 not available)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n7 * 3 = 21 (left: 1 2 21)\n2 * 12 = 24 (invalid, 12 not available)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n4 * 2 = 8 (left: 1 8)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n8 + 7 = 15 (left: 1 15)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 24)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n8 + 16 = 24 (left: 1 2 16)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                2.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n7 + 4 = 11 (left: 1 11 2)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n7 - 4 = 3 (left: 1 3 2)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n4 * 2 = 8 (left: 1 8 7)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n4 + 2 = 6 (left: 1 6 7)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n7 + 1 = 8 (left: 8 4 2)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n7 * 1 = 7 (left: 2 4 7)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n4 + 1 = 5 (left: 5 7 2)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n2 * 12 = 24 (left: 12)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n4 * 6 = 24 (left: 6)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 24)\nAnswer: 4 * (7 - 1) = 24\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 24)\nAnswer: 4 * (7 - 1) = 24\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n28 - 4 = 24 (left: 1 24)\n7 + 4 = 11 (left: 1 11 2)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with the numbers 1, 2, 4, and 7, focus on combining the original numbers through valid operations, ensuring each step uses only the remaining available numbers. Start by exploring simple sums and differences involving 7 and 4, as they can produce intermediate values closer to 24. For example, adding 4 + 7 gives 11, which can then be multiplied by 2 (11 \u00d7 2 = 22), and finally add 1 to reach 23, then adjust by subtracting 1 if necessary. Alternatively, consider multiplying 4 and 2 (4 \u00d7 2 = 8), then combining with 7 (8 + 7 = 15), and see if adding or subtracting 1 can reach 24. Remember, each intermediate calculation must only use numbers derived from the original set, and all original numbers must be used exactly once. Focus on pairing numbers to reach intermediate targets near 24, then fine-tune with addition or subtraction.",
                    "value_summary": "Avoid steps leading to 11; prioritize operations maintaining solvability."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n"
                            ],
                            "values": [
                                1.002
                            ],
                            "select_new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n"
                            ],
                            "new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n"
                            ],
                            "new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n"
                            ],
                            "values": [
                                0.003
                            ],
                            "select_new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n"
                            ],
                            "new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 = 28 (left: 2 28)\n",
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 2)\n",
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 2)\n",
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 = 28 (left: 2 28)\n",
                                "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 2)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 2, 4, and 7, prioritize combining original numbers directly\u2014avoid intermediate steps that reuse or alter initial set elements incorrectly. Focus on pairing 4 and 7, as their product (28) is close to 24; then subtract 4 to get 24 (7 \u00d7 4 - 4 = 24). Alternatively, multiply 2 by 4 (8), then add 7 (8 + 7 = 15), and find a way to reach 24 by adding or multiplying remaining values, but the direct approach with 7 \u00d7 4 - 4 is most straightforward. Ensure each operation uses only the original numbers once, and avoid steps that incorporate intermediate results that violate the original set's integrity.",
                    "value_summary": "Avoid 11; favor solvable intermediate states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n",
                                "2 + 1 = 3 (left: 3 4 7)\n",
                                "4 - 1 = 3 (left: 2 3 7)\n",
                                "7 / 7 = 1 (left: 1 1 2 4)\n",
                                "4 / 2 = 2 (left: 1 2 7)\n",
                                "2 * 1 = 2 (left: 2 4 7)\n",
                                "1 + 2 = 3 (left: 3 4 7)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n"
                            ],
                            "new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 / 1 = 28 (left: 2 28)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 / 2 = 14 (left: 1 14)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 + 1 = 29 (left: 2 29)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 + 2 = 30 (left: 1 30)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n1 + 2 = 3 (left: 3 3)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n1 + 3 = 4 (left: 2 4)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n2 + 3 = 5 (left: 1 5)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n4 - 1 = 3 (left: 2 3)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n4 - 2 = 2 (left: 1 2)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n3 + 1 = 4 (left: 2 4)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n3 + 2 = 5 (left: 1 5)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n2 * 3 = 6 (left: 1 6)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n2 * 2 = 4 (left: 1 4)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n3 * 2 = 6 (left: 1 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n"
                            ],
                            "new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n"
                            ],
                            "new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 2 = 5 (left: 4 5 1)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 + 1 = 8 (left: 2 4 8)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n4 * 2 = 8 (left: 7 8)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n4 + 2 = 6 (left: 7 6)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 6 = 1 (left: 2 4 1)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n4 + 1 = 5 (left: 2 5 7)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n4 - 1 = 3 (left: 2 3 7)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n4 / 2 = 2 (left: 1 2 7)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n7 - 2 = 5 (left: 1 5 4)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n7 / 1 = 7 (left: 2 4 7)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n4 + 1 = 5 (left: 2 5 7)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n2 * 4 = 8 (left: 1 8 7)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26)\n26 (no valid operations to reach 24 with a single number)\n2 + 4 = 6 (left: 1 6 7)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 1 = 6 (left: 2 4 6)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 2, 4, and 7, avoid reusing or re-entering the same number within a single operation. Focus on combining pairs directly from the initial set, updating the remaining numbers after each step. Since 7 \u00d7 4 = 28 is close to 24, consider operations involving subtraction to reach 24, but only after combining two distinct original numbers once. For instance, (7 \u00d7 4) - (2 + 1) = 28 - 3 = 25, close but not exact; adjust by exploring other pairings. Do not attempt to reuse a number multiple times in a single step (e.g., using 4 twice). Instead, systematically combine pairs to reduce the set step-by-step, ensuring each operation uses only two current numbers and that all initial numbers are used exactly once across the full solution. This disciplined pairing approach guides toward valid solutions.",
                    "value_summary": "In the 24 game with numbers 1, 2, 4, 7, moves are promising if they progress toward 24 without creating dead-end states like 11, which are unsolvable. Legal steps use available numbers exactly once, combining them with valid operations. Avoid moves that reuse values incorrectly or produce intermediate totals known to be unsolvable; instead, focus on transforming the set into solvable intermediate states, such as reducing complex combinations toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 6 = 24 (left: 2)\n",
                                "2 * 12 = 24 (left: 4 12)\n",
                                "4 + 20 = 24 (left: 2 20)\n",
                                "7 * 3 + 3 = 24 (left: 1 4 3)\n",
                                "4 * 6 = 24 (left: 1 2 6)\n",
                                "2 * 12 = 24 (left: 1 4 12)\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 6 = 24 (left: 2)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 6 = 24 (left: 2)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 6 = 24 (left: 2)\n4 * 6 = 24 (left: 2)\n"
                            ],
                            "values": [
                                40.001,
                                60.0,
                                40.001,
                                60.0,
                                40.001
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 - 3 = 4 (left: 4)\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n4 * 6 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n4 + 20 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n8 * 3 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n6 * 4 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n12 + 12 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n15 + 9 = 24 (left: )\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n2 * 12 = 24 (left: 12)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n2 * 12 = 24 (left: 12)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n6 * 4 = 24 (left: 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                40.001
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n"
                            ],
                            "new_ys": [
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 3 = 21 (left: 1 2 21)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 + 3 = 10 (left: 1 2 10)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 + 2 = 9 (left: 1 4 9)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n4 * 2 = 8 (left: 1 8)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n4 + 2 = 6 (left: 1 6)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n4 + 2 = 6 (left: 1 6)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 4 = 28 (left: 1 28)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 + 4 = 11 (left: 1 11)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 6)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n4 * 2 = 8 (left: 7 8)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 2 = 14 (left: 4 14)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 + 2 = 9 (left: 4 9)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 3 = 21 (left: 1 2 21)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 2, 4, 7, avoid reusing numbers; combine pairs from the original set only once. Prioritize operations like (7 - 1) = 6 or (4 + 2) = 6 to create intermediates near 24. Focus on forming 24 directly through multiplication or addition, then adjust with subtraction as needed, ensuring each number is used once.",
                    "value_summary": "Promising moves combine numbers toward intermediate solvable states, avoid dead-ends like 11, and strategically reduce complexity without reusing or creating unsolvable totals."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 - 4 = 3 (left: 3 1 2)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n",
                                "4 * 2 = 8 (left: 1 8 7)\n",
                                "4 + 2 = 6 (left: 1 6 7)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n",
                                "7 / 1 = 7 (left: 2 4 7)\n",
                                "2 * 4 = 8 (left: 7 8)\n",
                                "2 + 4 = 6 (left: 6 7)\n",
                                "7 - 4 = 3 (left: 3 1 2)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 + 4 = 8 (left: 8 6)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 * 6 = 24 (left: 24)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 * 6 = 24 (left: 4 24)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 + 20 = 24 (left: 20 4)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n4 * 2 = 8 (left: 1 7 8)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n8 + 4 = 12 (left: 1 7 12)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n14 - 4 = 10 (left: 1 7 10)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n14 + 4 = 18 (left: 1 7 18)\n",
                                "7 - 2 = 5 (left: 5 1 4)\n7 * 4 = 28 (left: 1 2 28)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                21.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 * 6 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 / 6 = 1 (left: 4 1)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 + 6 = 10 (left: 10)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 - 6 = -2 (left: -2)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * (7 - 1) = 24\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                2.001,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n"
                            ],
                            "new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n2 * 12 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n4 * 6 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n8 * 3 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n6 * 4 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n3 * 8 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n1 * 24 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n24 / 1 = 24 (left: )\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n\n"
                            ],
                            "values": [
                                0.003,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                2.001
                            ],
                            "select_new_ys": [
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n\n",
                                "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n4 * 6 = 24 (left: 24)\nAnswer: 4 * 6 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with 1, 2, 4, 7, focus on combining pairs from the original set only once, avoiding reuse. Prioritize forming intermediate totals close to 24 through multiplication and addition, then adjust with subtraction if necessary. Key strategies include pairing 7 with 4 or 2 to generate larger numbers (e.g., 7\u00d74=28, 7\u00d72=14) and then manipulating these totals to reach 24. For instance, from 7\u00d74=28, subtract 4 to get 24, but this requires multiple steps and careful tracking of used numbers. Avoid creating or assuming intermediate numbers not derivable from the initial set; every intermediate must be obtained via valid operations on available numbers. Since the previous attempt's step (4\u00d76=24) is invalid\u20146 isn't in the set\u2014focus instead on combining original numbers directly. For example, combining 7 and 2 to get 14, then multiplying by 2 if possible, or pairing 4 and 2 to get 8 and then combining with other results. Remember, each step must use only the numbers from the current set, reducing the total count until reaching 24.",
                    "value_summary": "For 1, 2, 4, 7, promising moves reduce complexity toward 24 by combining numbers using valid operations without reusing or invalidating original numbers. Avoid dead-ends like sums of 11 or creating impossible states; focus on intermediate solutions that progress toward 24 efficiently and legally."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n",
                                "7 + 4 = 11 (left: 1 2 11)\n",
                                "7 + 2 = 9 (left: 1 4 9)\n",
                                "4 * 2 = 8 (left: 1 7 8)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n",
                                "(Additional steps may be considered based on previous results)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                0.002
                            ],
                            "select_new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n"
                            ],
                            "new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n2 + 24 = 26 (left: 1 26)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 - 1 = 23 (left: 2 23)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n7 * 4 = 28 (left: 28 1 2)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n7 * 2 = 14 (left: 14 4 1)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n7 + 4 = 11 (left: 11 1 2)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n7 - 4 = 3 (left: 3 1 2)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n7 + 17 = 24 (left: 1 4 24)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n4 * 6 = 24 (left: 1 7 24)\n",
                                "14 + 10 = 24 (left: 1 7 24)\n7 * 3 + 3 = 24 (left: 1 3 24)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                20.002,
                                0.003,
                                60.0,
                                60.0,
                                60.0
                            ],
                            "select_new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n"
                            ],
                            "new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n4 * 6 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n8 * 3 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n12 + 12 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n6 * 4 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n2 * 12 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n2 + 22 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n4 * 6 = 24 (left: 6)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n7 + 17 = 24 (left: 17)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n8 + 16 = 24 (left: 16)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n12 + 12 = 24 (left: 12)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n3 * 8 = 24 (left: 8)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n6 * 4 = 24 (left: 4)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 2 24)\n24 (left: )\n"
                            ],
                            "values": [
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                3.0,
                                3.0,
                                3.0,
                                22.0,
                                2.001,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n4 * 6 = 24 (left: 24)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n4 * 6 = 24 (left: 24)\n"
                            ],
                            "new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\nAnswer: 28 - 4 = 24\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n4 * 6 = 24 (left: 24)\nAnswer: 7 * 4 = 28; 28 - 4 = 24\n"
                            ],
                            "values": [
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\nAnswer: 28 - 4 = 24\n",
                                "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n4 * 6 = 24 (left: 24)\nAnswer: 7 * 4 = 28; 28 - 4 = 24\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 using 1, 2, 4, 7, avoid relying on intermediate steps that reuse numbers or produce invalid operations. Focus on pairing 7 with 4 or 2 to generate larger totals: for example, 7\u00d74=28 or 7\u00d72=14. Then, adjust these results with addition or subtraction to reach 24\u2014such as subtracting 4 from 28 (28\u22124=24). Prioritize directly combining the original numbers via multiplication and addition, minimizing unnecessary steps. Do not attempt operations involving intermediate totals that aren\u2019t directly derivable from the initial set. Remember, every operation must use only remaining available numbers, and each number can only be used once. This targeted approach streamlines the path to 24, emphasizing effective pairing and minimal steps.",
                    "value_summary": "Promising moves simplify toward 24 via valid operations, avoiding dead-ends, impossible states, or excessive complexity."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n",
                                "7 + 4 = 11 (left: 1 2 11)\n",
                                "7 + 2 = 9 (left: 1 4 9)\n",
                                "7 - 4 = 3 (left: 1 2 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                1.002,
                                0.003,
                                0.003,
                                20.002
                            ],
                            "select_new_ys": [
                                "7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n28 - 4 = 24 (left: 1 7)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n14 + 10 = 24 (left: 1 4 7)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 4 - 4 = 24 (left: 1 7)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 14)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n28 - 4 = 24 (left: 1 7)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n14 + 10 = 24 (left: 1 7 10)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 2 = 14 (left: 1 4 14)\n"
                            ],
                            "values": [
                                2.001,
                                0.003,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 4 = 28 (left: 1 2 28)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 4 = 28 (left: 1 2 28)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 = 14 (left: 14 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n14 + 10 = 24 (left: 1 4)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 * 2 = 14 (left: 1 4 14)\n7 * 2 - 2 = 12 (left: 1 4 12)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 = 14 (left: 1 4 14)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers 1, 2, 4, 7 in each step. Prioritize pairing 7 with 4 or 2 via multiplication: 7\u00d74=28 or 7\u00d72=14. Then, adjust these results with addition or subtraction to reach 24 (e.g., 28\u22124=24). Avoid intermediate totals not directly derived from original numbers. Focus on valid, single-step operations combining original values to efficiently reach 24 without reusing or invalidating numbers.",
                    "value_summary": "Valid moves reduce the set toward 24 using original numbers; avoid steps that produce invalid or impossible intermediate states, especially involving numbers outside the initial set, ensuring each move remains consistent with the game's rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 - 4 = 1 (left: 1 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 / 4 = 1.25 (left: 1 1.25)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n1 + 4 = 5 (left: 5 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n1 * 4 = 4 (left: 4 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n8 + 1 = 9 (left: 9)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n8 / 1 = 8 (left: 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 - 4 = 16 (left: 1 16)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 / 4 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n7 * 4 = 28 (left: 7 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n7 * 2 = 14 (left: 7 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n7 + 4 = 11 (left: 11 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n7 + 2 = 9 (left: 9 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n7 - 4 = 3 (left: 3 20)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n7 - 2 = 5 (left: 5 20)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)  \n8 + 16 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n8 + 16 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n8 * 3 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n2 * 12 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n6 * 4 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \nNote: These steps are derived from the initial numbers assuming they are 8, 16, 3, 2, 12, 6, 4. If specific initial numbers are provided, please specify.\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)  \n8 + 16 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 5 = 9 (left: 1 9)\n9 * 1 = 9 (left: 8)  \n8 + 16 = 24 (left: )\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining original numbers through valid operations without reusing or invalidating them. Prioritize pairing 7 with 4 or 2 via multiplication (7\u00d74=28, 7\u00d72=14) to generate large totals. Use addition or subtraction with the remaining numbers to adjust these results toward 24\u2014such as 28\u22124=24. Avoid intermediate steps that produce non-original or invalid totals; keep operations straightforward and within the original set.",
                    "value_summary": "In the 24 game with numbers 1, 2, 4, 7, promising moves are those that systematically reduce the set toward 24 by combining original or intermediate results without producing invalid states. Moves should prioritize operations that bring the total closer to 24, avoiding intermediate outcomes outside the realm of achievable sums or products. If a move results in a set where no sequence of valid operations can reach 24\u2014such as impossible intermediate values or dead-ends\u2014it is unpromising. Focus on steps that maintain the possibility of combining remaining numbers toward 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 1 4 10) [Note: 10 is not in initial set; discard]\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 2 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 + 2 = 6 (left: 1 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 - 2 = 2 (left: 1 2)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                2.001,
                                1.002,
                                0.003,
                                1.002,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n14 + 10 = 24 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 - 4 = 24 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 - 4 = 10 (left: 1 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28, then 28 - 4 = 24 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n4 * 2 = 8 (left: 1 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 2 = 26 (left: 1 4 26)\n7 + 2 = 9 (left: 4 9)\n"
                            ],
                            "values": [
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                2.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 = 14 (left: 4 1 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n4 * 2 = 8 (left: 7 1 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 2 = 9 (left: 4 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n4 + 2 = 6 (left: 7 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 - 4 = 24 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 - 2 = 26 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 + 4 = 26 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 + 2 = 13 (left: 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n4 * 2 = 8 (left: 7 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 + 4 = 11 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 + 2 = 9 (left: 4 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n4 + 2 = 6 (left: 7 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 - 4 = 3 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 - 2 = 5 (left: 4 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n4 - 2 = 2 (left: 7 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n28 - 4 = 24 (left: 1)\n7 / 7 = 1 (left: 4 2 1)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 = 14 (left: 4 1 14)\n"
                            ]
                        }
                    ],
                    "summary": "Use only the original numbers 1, 2, 4, and 7 with valid operations. Prioritize pairing 7 with 4 or 2 via multiplication (7\u00d74=28, 7\u00d72=14) to create large totals. Then, adjust these results toward 24 by adding or subtracting the remaining numbers, avoiding invalid steps or introducing numbers outside the initial set. Focus on straightforward combinations to reach 24 efficiently.",
                    "value_summary": "Promising moves in 1, 2, 4, 7 reduce the set toward 24 through valid operations, avoiding impossible intermediate values or dead-ends. Unpromising moves result in states where achieving 24 is infeasible, often due to unreachable intermediate results or blocking the path to the target."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 2 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 + 2 = 9 (left: 4 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 - 4 = 3 (left: 2 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 - 2 = 5 (left: 4 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n14 - 4 = 10 (left: 7 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n14 - 2 = 12 (left: 4 12)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n28 / 7 = 4 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n28 / 4 = 7 (left: 1 7)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 * 4 = 28 (left: 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 * 2 = 14 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 + 4 = 11 (left: 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 + 2 = 9 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 - 2 = 5 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n14 - 7 = 7 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n14 / 2 = 7 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n7 * 4 = 28 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n7 * 2 = 14 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n7 + 4 = 11 (left: 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n7 + 2 = 9 (left: 4 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n4 * 2 = 8 (left: 7 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 2 28)\n4 + 2 = 6 (left: 7 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 * 4 = 28 (left: 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 * 2 = 14 (left: 4)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on combining 7 with 4 or 2 via multiplication to create large, manageable totals (e.g., 7\u00d74=28 or 7\u00d72=14). Then, use addition or subtraction with the remaining numbers to reach 24, avoiding steps that produce or rely on numbers outside the original set (1, 2, 4, 7). Do not generate new numbers by subtracting or adding in a way that yields values not in the initial set. Prioritize direct operations that keep all intermediate results within the original numbers, ensuring each step remains valid and leads efficiently toward 24.",
                    "value_summary": "In the 1, 2, 4, 7 puzzle, promising moves are those that systematically reduce the set toward 24 without creating unreachable or invalid intermediate results. Valid operations should combine available numbers to produce new values, maintaining logical consistency and avoiding reuse errors. Moves that lead to impossible states\u2014such as using nonexistent values or blocking the path to 24\u2014are unpromising. Effective steps preserve flexibility, progress toward 24, and avoid dead-ends or invalid operations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 - 4 = 24 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                21.001,
                                0.003,
                                40.001,
                                20.002
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 2 = 9 (left: 4 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 - 2 = 5 (left: 4 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n4 * 2 = 8 (left: 7 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n4 + 2 = 6 (left: 7 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 + 17 = 24 (left: 1 4 17) [Invalid: 17 not in set]\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 + 1 = 8 (left: 2 4 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 / 1 = 7 (left: 2 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n4 * 2 = 8 (left: 1 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n4 + 2 = 6 (left: 1 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 + 17 = 24 (not applicable, since 17 not in set)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 + 2 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 - 2 = 5 (left: 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 / 1 = 7 (left: 2 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n4 + 2 = 6 (left: 1 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n4 + 1 = 5 (left: 2 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n4 - 1 = 3 (left: 2 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n7 + 17 = 24 (left: 4 17) -- invalid as 17 not in set\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n7 + (4 - 1) = 10 (left: 10 2 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n7 * (4 - 1) = 21 (left: 2 21)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n7 * (2 + 1) = 21 (left: 4 21)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 7 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 7 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 4)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 7 6)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 * 4 = 28 (left: 1 2)\n"
                            ]
                        }
                    ],
                    "summary": "For the 1, 2, 4, 7 puzzle, prioritize combining 7 with 4 or 2 via multiplication to create larger intermediate totals (e.g., 7\u00d74=28 or 7\u00d72=14). Use these products to reach 24 through addition or subtraction with remaining numbers, ensuring all intermediate results stay within the original set or derivable from it. Avoid steps that produce or depend on numbers outside {1, 2, 4, 7}. When using subtraction, prefer operations that lead to manageable, close-to-24 totals (e.g., 28\u22124=24). Reuse only once per number, and always verify that each move is valid\u2014using only current set elements without reusing or creating new numbers. Focus on direct, efficient combinations\u2014such as 7\u00d7(4\u22121)=21 plus 3 (from 4\u22121) or 7+ (remaining operations)\u2014to streamline reaching 24.",
                    "value_summary": "Promising moves systematically combine available numbers toward 24 without creating unreachable or invalid states, preserving flexibility. Moves that involve invalid operations, reuse nonexistent values, or lead to dead-ends are unpromising. Focus on legal, logical steps that reduce options and maintain progression toward the target."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 / 1 = 7 (left: 7 4 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 2 = 8 (left: 7 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 3 = 21 (left: 21 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 24 1 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 24 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 24 1 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 17 = 24 (left: 24 1 5)\n24 - 1 = 23 (left: 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 / 1 = 7 (left: 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 / 4 = 1.75 (left: 1.75 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 * 4 = 28 (left: 28 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 * 2 = 14 (left: 14 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 + 17 = 24 (left: 17 4)\n"
                            ],
                            "values": [
                                0.003,
                                20.002,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 - 1 = 6 (left: 6 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 / 1 = 7 (left: 3 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 - 3 = 4 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 / 3 \u2248 2.33 (invalid)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n4 * 3 = 12 (left: 12 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n4 + 3 = 7 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 * 3 = 21 (left: 21)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n21 - 3 = 18 (left: 18)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n21 - 7 = 14 (left: 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 + 3 = 10 (left: 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n7 * (4 - 1) = 21 (left: 7 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n7 * 2 + 1 = 15 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n4 * (2 + 1) = 12 (left: 7 12)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n7 * (2 + 1) = 21 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n4 * 6 = 24 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n7 * 3 = 21 (left: 4 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 1 = 6 (left: 6 4 7)\n4 * 6 = 24 (left: 7)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 - 1 = 6 (left: 6 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 / 1 = 7 (left: 3 7)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve the 1, 2, 4, 7 puzzle, focus on leveraging multiplication involving 7 and 4 or 2, as these generate larger intermediate totals close to 24. For example, combining 7 and 4 via multiplication (7\u00d74=28) creates a number just above 24, allowing subtraction (28\u22124=24) or division strategies. Alternatively, multiplying 7 by 2 (7\u00d72=14) offers a base for addition with remaining numbers. Use the subtraction of 1 from 4 (4\u22121=3) to generate manageable numbers and facilitate reaching 24 through addition or multiplication. Prioritize combining 7 with 4\u22121 to produce 21, then add remaining 2 to reach 23, which is close but requires a final adjustment, such as adding 1 if possible. Remember, each move must combine two current numbers and produce a new one, reducing the total count stepwise without reusing or inventing new numbers. Valid moves include 7\u00d7(4\u22121)=21 (leftover 2), then 21+2=23 (not 24), so explore other operations like 7\u00d7(2+1)=21 or 4\u00d7(2+1)=12, then combine with 7 or 1 to reach 24. Always verify each step\u2019s legality and focus on direct combinations that approach 24 efficiently.",
                    "value_summary": "Effective moves reduce the set toward 24 through valid operations, avoiding dead-ends or invalid reuse. Prioritize combining numbers to approach 24 carefully; avoid steps that isolate or leave unreachable values. Moves that utilize all numbers logically and maintain flexibility are promising, while invalid or overly restrictive steps are unpromising."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 1 = 8 (left: 4 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 / 1 = 7 (left: 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 4 = 11 (left: 1 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 7)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 7)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 + 1 = 8 (left: 8 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 + 4 = 11 (left: 11 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 4 = 3 (left: 3 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 7)\n7 - 1 = 6 (left: 6)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 * 4 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 + 4 = 10 (left: 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 - 4 = 2 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n4 - 6 = -2 (left: -2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 / 4 = 1.5 (left: 1.5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n4 / 6 \u2248 0.6667 (left: 0.6667)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n7 * 4 = 28 (left: 7 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n7 - 1 = 6 (left: 6 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 * 4 = 28 (left: 7 28)\n7 + 1 = 8 (left: 8 4)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 * 4 = 24 (left: )\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 + 4 = 10 (left: 10)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 2, 4, 7 efficiently, prioritize combining 7 with 4 or 2 via multiplication to generate large intermediate totals near 24. For example, 7\u00d74=28, then subtract 4 to reach 24 (28\u22124=24). Alternatively, multiply 7\u00d72=14, then add 10 (from 4+1) to reach 24, but this requires creating 10 through prior steps. Focus on pairing larger numbers first to minimize complexity. Use subtraction to adjust overshoot results, such as 7\u22121=6, then multiply by 4 or 2 to approach 24. Remember, combining two numbers reduces the set, so plan moves to build toward 24 stepwise, avoiding excessive or unnecessary operations. Exploit the multiplication of 7 with 4 or 2 to generate close totals, then fine-tune with addition or subtraction. Always verify each intermediate step for legality, ensuring no reuse of numbers and adherence to game rules. This targeted approach maximizes the likelihood of reaching 24 efficiently.",
                    "value_summary": "For the 1, 2, 4, 7 puzzle, promising moves combine numbers to approach 24 without invalid reuse or dead-ends. Valid operations should produce achievable intermediate values, maintaining flexibility for subsequent steps. Moves that reuse, skip necessary operations, or lead to unreachable states are unpromising. Focus on logical, valid combinations that progressively narrow toward 24 while preserving options."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n"
                            ],
                            "values": [
                                1.002
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 - 1 = 6 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 + 4 = 11 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 + 2 = 9 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 - 4 = 3 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 - 2 = 5 (left: 6)\n"
                            ],
                            "values": [
                                1.002,
                                1.002,
                                0.003,
                                0.003,
                                0.003,
                                1.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 * 2 = 14 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 - 1 = 6 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n4 * 2 = 8 (left: 7 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 - 3 = 4 (left: 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 + 17 = 24 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n7 * 2 = 14 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n7 - 1 = 6 (left: 1 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n7 + 17 = 24 (left: 17)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n4 * 6 = 24 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n14 + 10 = 24 (left: 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n6 * 4 = 24 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 2 = 14 (left: 6)\n8 * 3 = 24 (left: 3)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 * 2 = 14 (left: 6)\n"
                            ]
                        }
                    ],
                    "summary": "Focus on leveraging 7 with 4 or 2 via multiplication to generate large intermediate totals quickly. For example, multiply 7\u00d74=28, then subtract 4 to reach 24, or multiply 7\u00d72=14 and combine with other operations to approach 24. Use subtraction to reduce overshoot, such as 7\u22121=6, then multiply by 4 or 2 to get closer to 24. Prioritize pairing larger numbers first to minimize complexity and avoid unnecessary steps. Create intermediate targets like 6 or 14 early, then combine with remaining numbers to reach 24 efficiently. Always verify each operation's legality, ensuring no reuse of numbers and proper sequencing to streamline solutions. This approach maximizes successful pathways to 24 with these specific numbers.",
                    "value_summary": "In the 1, 2, 4, 7 puzzle, promising moves generate valid intermediate values without reuse or dead-ends, maintaining flexibility toward 24. Moves that produce unreachable states or violate operation rules\u2014such as using non-existent or previously combined results\u2014are unpromising. Focus on logical combinations that preserve options, avoid invalid reuse, and steadily approach 24, ensuring each step yields achievable, open-ended states for continued progress."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 1 = 15 (left: 4 15)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 4 13)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 + 2 = 9 (left: 1 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n3 + 1 = 4 (left: 4 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n3 * 1 = 3 (left: 3 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n3 + 4 = 7 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n4 * 3 = 12 (left: 1 12)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n12 / 3 = 4 (left: 4 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n12 + 3 = 15 (left: 12 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n12 - 1 = 11 (left: 12 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n4 + 1 = 5 (left: 4 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 - 4 = 3 (left: 1 3)\n4 - 1 = 3 (left: 4 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 = 14 (left: 4 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 2 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 2 = 9 (left: 4 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                21.001,
                                20.002,
                                40.001
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 + 1 = 12 (left: 2 12)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 / 1 = 11 (left: 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 + 2 = 13 (left: 1 13)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 / 2 = 5.5 (left: 1 5.5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n11 - 2 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n11 - 9 = 2 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n11 - 10 = 1 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n11 / 1 = 11 (left: 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 1 2 11)\n11 / 2 = 5.5 (left: 1 5.5)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 - 1 = 10 (left: 2 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 + 1 = 12 (left: 2 12)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 1, 2, 4, 7 efficiently, prioritize combining larger numbers early. Use multiplication of 7 with 2 or 4 to generate high totals (e.g., 7\u00d74=28 or 7\u00d72=14) then subtract or add small numbers to reach 24. Avoid introducing intermediate numbers not present initially; all operations must use the original set exactly once. Focus on creating intermediate targets like 14, 6, or 8 by combining pairs, then adjust with remaining numbers. For example, 7\u00d72=14, then subtract 4 to get 10, and combine with 1 to reach 24. Always verify each step\u2019s legality, ensuring no reuse or dropping numbers; this streamlines solutions for these specific four numbers.",
                    "value_summary": "In the 1, 2, 4, 7 puzzle, promising moves produce valid intermediate values derived legitimately from current numbers, avoiding reuse or creation of nonexistent values. Such moves maintain flexibility toward reaching 24 by preserving achievable, open-ended states. Illegal moves\u2014such as generating values not present in the current set or reusing results improperly\u2014are unpromising, as they lead to dead-ends or violate rules. Effective strategies involve combining available numbers through valid operations to generate intermediate results that keep options open, steadily progressing toward 24 without creating unreachable or invalid states."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n8 / 4 = 2 (left: 2 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 8 = 22 (left: 1 22)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 7 = 4 (left: 4 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n8 * 5 = 40 (left: 1 40)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n40 / 5 = 8 (left: 1 8)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 / 5 = 4 (left: 4 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 - 16 = 4 (left: 4 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 / 4 = 5 (left: 5 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 - 4 = 16 (left: 16 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 - 1 = 19 (left: 19 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 / 4 = 5 (left: 5 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n4 * 5 = 20 (left: 1 20)\n20 - 1 = 19 (left: 19 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n3 + 1 = 4 (left: 4 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n8 / 4 = 2 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n7 * 2 = 14 (left: 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n14 - 10 = 4 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n24 / 1 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n7 * 4 = 28 (left: 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n28 - 4 = 24 (left: 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n24 / 1 = 24 (left: 1 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n24 / 1 = 24 (left: 1 24)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n3 - 1 = 2 (left: 2 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n3 * 8 = 24 (left: 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n3 + 1 = 4 (left: 4 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n8 / 8 = 1 (left: 1 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n8 - 3 = 5 (left: 5 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n8 + 3 = 11 (left: 11 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n8 * 3 = 24 (left: 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n8 / 1 = 8 (left: 8 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n24 / 1 = 24 (left: 1 24)\n1 + 23 = 24 (left: 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n24 / 1 = 24 (left: 1 24)\n24 * 1 = 24 (left: 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n24 / 1 = 24 (left: 1 24)\n24 / 1 = 24 (left: 24)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n3 - 1 = 2 (left: 2 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n3 * 8 = 24 (left: 24)\n"
                            ]
                        }
                    ],
                    "summary": "Prioritize combining the original numbers without creating intermediate totals that aren't part of the initial set. Use multiplication of 7 with 2 or 4 early to generate key targets (14 or 28), then adjust with addition or subtraction of remaining numbers\u2014ensuring each operation strictly combines two original or previously combined results without reuse. Avoid creating and reusing intermediate totals; focus on direct, legal operations to reach 24 efficiently.",
                    "value_summary": "In the 1, 2, 4, 7 puzzle, promising moves produce valid intermediate values derived directly from current numbers without reuse or creating unachievable results. Moves combining available numbers through legitimate operations retain flexibility toward 24 and preserve open-ended states. Illegal moves\u2014such as generating values not present in the current set or reusing results improperly\u2014are unpromising, as they risk dead-ends. Effective strategies focus on combining numbers to generate achievable, valid intermediate results that maintain multiple pathways toward reaching 24."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 4 = 10 (left: 1 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 10 = 4 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                40.001,
                                0.003,
                                60.0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n7 * 4 = 28 (left: 1 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 - 4 = 10 (left: 1 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 1 = 27 (left: 4 27)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n7 * 4 = 28 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n7 * 4 - 4 = 24 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n7 * 2 + 10 = 24 (left: 4 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 - 0 = 24 (left: 1 2 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                1.002
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n7 * 4 = 28 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n14 + 10 = 24 (left: 7 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n14 + 10 = 24 (left: 7 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n7 * 4 = 28 (left: 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n14 - 4 = 10 (left: 2 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n7 * 4 - 4 = 24 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n7 * 2 + 10 = 24 (left: 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n28 - 4 = 24 (left: 1 24)\n7 * 4 - 4 = 24 (left: 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n7 * 4 = 28 (left: 1 2)\n"
                            ]
                        }
                    ],
                    "summary": "For the numbers 1, 2, 4, 7, focus on early multiplication of 7 with 2 or 4 to generate key targets (14 or 28). Use these to combine with remaining numbers via addition or subtraction to reach 24 efficiently. Avoid creating intermediate totals that aren\u2019t directly useful; instead, directly combine original or previously combined results without reusing totals. Prioritize operations that produce 24 or facilitate its formation, such as leveraging 14 (from 7\u00d72) minus 4, or 28 (from 7\u00d74) minus 4, then adjust with remaining numbers. Discard steps that introduce invalid or redundant calculations that don\u2019t progress toward 24.",
                    "value_summary": "For the 1, 2, 4, 7 puzzle, promising moves produce valid, achievable intermediate values directly from current numbers without reuse or invalid operations. Moves combining available numbers through legitimate operations maintain multiple pathways toward 24. Illegal moves\u2014such as using numbers outside the set or invalid operations\u2014are unpromising, as they lead to dead-ends and hinder progress toward the solution."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 7 = 21 (left: 1 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (not applicable, 10 not available)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 4 = 10 (left: 1 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 / 7 = 2 (left: 1 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 7 = 4 (left: 1 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                20.002,
                                20.002,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 4 = 28 (left: 2, 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n28 - 4 = 24 (left: 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n28 - 2 = 26\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n14 + 10 (not available)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n14 + 4 = 18\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n28 / 7 = 4\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n28 - 4 = 24\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n7 * 2 = 14 (left: 1 4)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n7 * 4 = 28 (left: 1 2)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n28 - 4 = 24 (left: 1 2)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n28 - 2 = 26 (left: 1 4)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n14 + 10 (not available directly)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 / 4 = 7 (left: 1 7)\n14 - 4 = 10 (left: 1 4)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 4 = 28 (left: 2, 28)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 4 = 28 (left: 2, 28)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n7 * 2 = 14 (left: 4)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n7 * 4 = 28 (left: 2)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n28 - 4 = 24 (left: 7)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n28 - 2 = 26 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 4 = 28 (left: 2, 28)\n28 - 4 = 24 (left: 2)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n7 * 2 = 14 (left: 4)  \n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n7 * 4 = 28 (left: 2)  \n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 24 with numbers 1, 2, 4, 7, focus on generating key intermediate results through early multiplication involving 7. Specifically, compute 7\u00d72=14 and 7\u00d74=28, as these provide useful targets. From 14 or 28, combine with remaining numbers via addition or subtraction to reach 24. For example, 14 + 10 (not available directly, but via 4+6) is less straightforward, so prioritize direct operations. Avoid creating intermediate totals that are not directly useful toward 24; instead, utilize the initial key products to minimize complexity. Once you have 14 or 28, look for simple ways to adjust with remaining numbers: subtract 4 from 28 to get 24 (28-4=24), or subtract 14-10 if possible (but since 10 isn't available, focus on the former). Be cautious to only perform operations on the current set of remaining numbers\u2014never reuse or reintroduce numbers from previous steps improperly. Valid steps include directly combining remaining numbers after initial multiplications. Avoid invalid operations like using results not derived from the original set or reusing numbers improperly. This targeted approach streamlines reaching 24 efficiently.",
                    "value_summary": "Effective moves directly produce intermediate values achievable from original numbers via valid operations, maintaining multiple solution pathways. Moves resulting in values like 24 derived from invalid combinations or outside the original set are unpromising, as they lead to dead-ends and violate game rules."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                21.001
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 / 2 = 7 (left: 7 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 2 = 12 (left: 12 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 / 10 = 1.4 (discard, not integer)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n10 - 14 = -4 (discard, negative result)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n10 / 14 = 0.714... (discard, not integer)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n10 - 2 = 8 (left: 8 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n10 / 2 = 5 (left: 5 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n14 - 4 = 10 (left: 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n14 - 2 = 12 (left: 12)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n14 / 2 = 7 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n14 - 7 = 7 (left: 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n7 + 4 = 11 (left: 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n7 + 2 = 9 (left: 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 4 14)\n7 - 2 = 5 (left: 5)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.001,
                                0.002,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 / 2 = 7 (left: 7 10)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 / 2 = 7 (left: 7 10)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n7 * 4 = 28 (left: 7 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n7 * 2 = 14 (left: 14 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n28 - 4 = 24 (left: 7 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n14 + 10 (not available)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n28 - 4 = 24 (left: 7 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n7 * 4 = 28 (left: 7 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n28 - 4 = 24 (left: 7 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 / 2 = 7 (left: 7 10)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 / 2 = 7 (left: 7 10)\n7 * 4 = 28 (left: 2 28)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n7 * 4 = 28 (left: 7 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n7 * 2 = 14 (left: 14 4)\n"
                            ]
                        }
                    ],
                    "summary": "To solve 24 with the numbers 1, 2, 4, and 7, leverage the key initial multiplications involving 7 to generate intermediate targets efficiently. The most fruitful approach is to compute 7\u00d72=14 and 7\u00d74=28, as these provide straightforward routes toward 24 through simple addition or subtraction. For example, from 28, subtract 4 to get 24 directly (28\u22124=24). Alternatively, from 14, adding 10 (via 4+6, if possible) could be considered, but since 6 isn't available, focus on subtracting remaining numbers from 28. Prioritize operations that directly lead to 24 to minimize complexity. When combining numbers, always ensure you use the current set of remaining numbers and avoid reusing or reintroducing numbers improperly, as this violates game rules. After generating key intermediate results like 14 or 28, look for simple operations\u2014addition or subtraction\u2014with the remaining numbers to reach 24. For instance, after obtaining 28, subtract 4 to reach 24; from 14, adding 10 (if constructed) would be ideal, but since 10 isn't available, subtracting 2 and 4 from 28 is more direct. Avoid attempts that involve reusing numbers or operations that don't adhere to the rules\u2014such as subtracting a number not present in the current set or reusing intermediate results improperly. By focusing on the initial multiplications to create high-yield targets and then adjusting with remaining numbers, you streamline the path to 24 efficiently.",
                    "value_summary": "In evaluating moves for the 1, 2, 4, 7 puzzle, focus on whether operations produce intermediate values achievable solely from the original numbers through valid, legal steps. Effective moves generate intermediate results that can be formed by combining remaining numbers without reusing or dropping any arbitrarily, preserving multiple solution pathways. Moves resulting in values outside the original set or requiring reuse of numbers violate game rules and are unpromising, leading to dead-ends. Specifically, combining numbers to reach target values like 24 should involve operations on the initial set directly, maintaining the integrity of the available numbers after each step. Any step that produces an invalid intermediate\u2014such as using a number more times than available or creating impossible combinations\u2014is a red flag. Valid moves reduce the remaining numbers logically, enabling continued progress toward 24. Ultimately, promising steps keep options open, produce legitimate intermediate values, and respect the original set\u2019s constraints, whereas unpromising steps lead to dead-ends or rule violations."
                },
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n28 - 4 = 24 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n14 + 10 = 24 (left: 1 7)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 2 = 5 (left: 1 4 5)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 2 6 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 1 = 7 (left: 2 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n14 - 4 = 10 (left: 1 10 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n14 - 2 = 12 (left: 1 12 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 2 = 26 (left: 1 26 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n7 * 4 = 28 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n7 * 2 = 14 (left: 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n7 * 1 = 7 (left: 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n14 - 4 = 10 (left: 1 10)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n28 - 4 = 24 (left: 1 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 2 = 14 (left: 1 4 14)\n7 + 17 = 24 (left: 4 17)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "1 2 4 7",
                            "ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n"
                            ],
                            "new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 * 2 = 14 (left: 1 4 14)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n28 - 4 = 24 (left: 1 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n28 - 7 = 21 (left: 1 4 21)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n14 + 4 = 18 (left: 1 7 18)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n14 + 7 = 21 (left: 1 4 21)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 + 4 = 11 (left: 1 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 + 2 = 9 (left: 4 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n4 * 2 = 8 (left: 7 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 - 4 = 3 (left: 2 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 - 4 = 3 (left: 1 2 3)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 - 2 = 5 (left: 1 5 4)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 + 4 = 11 (left: 1 2 11)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 / 1 = 7 (left: 2 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 - 1 = 6 (left: 2 4 6)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 + 1 = 8 (left: 2 4 8)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 * 1 = 7 (left: 2 4 7)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 + 2 = 9 (left: 4 9)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n28 - 4 = 24 (left: 1 2 24)\n7 * 2 = 14 (left: 4 14)\n"
                            ],
                            "values": [
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            ],
                            "select_new_ys": [
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 * 4 = 28 (left: 1 2 28)\n",
                                "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 * 2 = 14 (left: 1 4 14)\n"
                            ]
                        }
                    ],
                    "summary": "To efficiently solve 24 with 1, 2, 4, and 7, focus on key initial multiplications involving 7 to generate intermediate targets. Multiply 7\u00d72=14 and 7\u00d74=28 to create high-value targets. From 28, subtract 4 to get 24 directly (28\u22124=24). Alternatively, from 14, adding 10 (via 4+6) isn't possible since 6 isn't available; instead, use subtraction: from 28, subtract 4 to reach 24. When working with remaining numbers, combine 2 and 4 to get 8, then consider operations with 7 to reach 24 (e.g., 7\u00d73=21, then add 3 if possible). Prioritize operations that directly produce 24 or intermediate targets close to it, avoiding reusing or misapplying numbers. Always track remaining numbers after each step, ensuring operations are valid. This approach streamlines reaching 24 by leveraging multiplications to generate high-yield intermediates and then adjusting with simple addition or subtraction.",
                    "value_summary": "In evaluating moves for the 1, 2, 4, 7 puzzle, focus on whether each operation produces intermediate values achievable solely from the original set through valid, legal steps. Promising moves generate intermediate results that can be derived by combining remaining numbers without reusing or introducing external values, thus maintaining multiple solution pathways. Moves that produce values outside the initial set or require combining numbers in invalid ways\u2014such as using numbers not obtainable from previous steps\u2014are unpromising and often lead to dead-ends. Valid steps reduce the remaining numbers logically, preserving options toward reaching 24. Ultimately, effective moves produce legitimate intermediate values consistent with the initial set, whereas invalid moves create impossible states or violate game rules."
                }
            ],
            "env_info": [
                {
                    "action": "4 + 7 = 11 (left: 1 2 11)\n11 - 1 = 10 (left: 2 10)\n14 + 10 = 24 (left: 24)\nAnswer: 2 * (7 - 1) = 12\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 1 2 24)\n24 / 1 = 24 (left: 24)\nAnswer: 4 * (7 - 1) = 24\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 * 4 - 4 = 24 (left: 1 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 - 4 = 24 (left: 7, 2)\n7 * 4 = 28 (left: 2 28)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "4 * 7 = 28 (left: 1 2 28)\n28 - 1 = 27 (left: 2 27)\n27 (no valid operation to reach 24 with just a single number)\n7 - 4 = 3 (left: 1 2 3)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "4 * 6 = 24 (left: 2)\n7 - 1 = 6 (left: 2 4 6)\n4 * 6 = 24 (left: 2)\n7 * 4 = 28 (left: 1 2 28)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 1 = 6 (left: 6 2 4)\n6 - 2 = 4 (left: 4 6)\n6 - 4 = 2 (left: 2)\n\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "28 - 4 = 24 (left: 1 2 24)\n1 + 2 = 3 (left: 3 24)\n3 + 21 = 24 (left: 24)\nAnswer: 28 - 4 = 24\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 2 = 5 (left: 1 4 5)\n7 * 4 = 28 (left: 1 28)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "4 + 5 = 9 (left: 1 9)\n9 - 1 = 8 (left: 8)  \n8 + 16 = 24 (left: )\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 2 = 5 (left: 1 5)\n7 * 4 = 28 (left: 1 2 28)\n7 * 4 = 28 (left: 1 2)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 2 = 5 (left: 1 5)\n7 * 2 = 14 (left: 4 14)\n7 * 4 = 28 (left: 14)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 * (4 - 1) = 21 (left: 4)\n7 + 4 = 11 (left: 1 2 11)\n7 * 2 = 14 (left: 1 4)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 4 = 3 (left: 3 1 5)\n7 - 4 = 3 (left: 3 1 7)\n7 - 1 = 6 (left: 6 3)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 - 1 = 6 (left: 4 6)\n7 - 1 = 6 (left: 6 4)\n6 * 4 = 24 (left: )\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "4 * 6 = 24 (left: 6)\n7 * 4 = 28 (left: 6)\n7 * 4 = 28 (left: 6)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 * 4 = 28 (left: 1 2 28)\n7 + 4 = 11 (left: 2 1 11)\n11 - 1 = 10 (left: 2 10)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "5 + 4 = 9 (left: 1 9)\n9 / 3 = 3 (left: 3 1 8)\n3 - 1 = 2 (left: 2 8)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "28 - 4 = 24 (left: 1 24)\n14 + 10 = 24 (left: 1 24)\n7 * 2 = 14 (left: 1 4)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "14 - 1 = 13 (left: 2)\n7 * 2 = 14 (left: 4, 14)\n7 * 2 = 14 (left: 4)  \n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "14 + 10 = 24 (left: 2 14 10)\n14 - 10 = 4 (left: 4 2)\n7 * 4 = 28 (left: 7 28)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                },
                {
                    "action": "7 * 4 = 28 (left: 1 2 28)\n7 - 1 = 6 (left: 2 4 6)\n7 * 4 = 28 (left: 1 2 28)\n",
                    "history": [
                        "7 - 2 = 5 (left: 1 4 5)"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 3239595,
                "prompt_tokens": 1827324,
                "cost": 1.4785704000000002
            }
        },
        {
            "idx": 900,
            "agent_info": [
                {
                    "steps": [
                        {
                            "step": 0,
                            "x": "4 5 6 10",
                            "ys": [
                                ""
                            ],
                            "new_ys": [
                                "4 + 5 = 9 (left: 6 9 10)\n",
                                "4 * 6 = 24 (left: 5 10)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n",
                                "10 - 6 = 4 (left: 4 5 4)\n",
                                "6 - 4 = 2 (left: 4 2 4)\n",
                                "4 + 4 = 8 (left: 2 8)\n",
                                "4 * 2 = 8 (left: 5 8)\n",
                                "8 / 4 = 2 (left: 5 2)\n",
                                "5 + 4 = 9 (left: 6 9)\n"
                            ],
                            "values": [
                                0.003,
                                0.003,
                                60.0,
                                60.0,
                                60.0,
                                60.0,
                                0.003,
                                40.001,
                                0.003,
                                0.003
                            ],
                            "select_new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n"
                            ]
                        },
                        {
                            "step": 1,
                            "x": "4 5 6 10",
                            "ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n"
                            ],
                            "new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 / 2 = 5 (left: 5 30)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 / 10 = 3 (left: 3 4)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 4 = 26 (left: 26 10)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 / 5 = 6 (left: 6 10)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n4 - 2 = 2 (left: 2 6)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n4 / 2 = 2 (left: 2 6)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n6 - 4 = 2 (left: 2 4)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n6 / 4 = 1.5 (left: 1.5 4)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n4 - 1.5 = 2.5 (left: 2.5 6)\n",
                                "10 / 5 = 2 (left: 4 2 6)\n4 / 1.5 \u2248 2.6667 (left: 2.6667 6)\n"
                            ],
                            "values": [
                                60.0,
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                20.002,
                                0.003,
                                40.001,
                                0.003,
                                0.003,
                                0.003,
                                0.002
                            ],
                            "select_new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n"
                            ]
                        },
                        {
                            "step": 2,
                            "x": "4 5 6 10",
                            "ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n"
                            ],
                            "new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n6 + 30 = 36 (left: 36)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 - 6 = 24 (left: 24)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 / 6 = 5 (left: 5)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 * 6 = 180 (left: 180)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n20 / 5 = 4 (left: 4)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n20 - 4 = 16 (left: 16)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n4 * 4 = 16 (left: 16)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n30 - 10 = 20 (left: 20 4)\n20 + 4 = 24 (left: )\n"
                            ],
                            "values": [
                                0.003,
                                60.0,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.003,
                                0.0
                            ],
                            "select_new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 - 6 = 24 (left: 24)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n6 + 30 = 36 (left: 36)\n"
                            ]
                        },
                        {
                            "step": 3,
                            "x": "4 5 6 10",
                            "ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 - 6 = 24 (left: 24)\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n6 + 30 = 36 (left: 36)\n"
                            ],
                            "new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 - 6 = 24 (left: 24)\nAnswer: (5 * 6) - (10 - 4) = 24\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n6 + 30 = 36 (left: 36)\n36\n"
                            ],
                            "values": [
                                40.0,
                                0
                            ],
                            "select_new_ys": [
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 - 6 = 24 (left: 24)\nAnswer: (5 * 6) - (10 - 4) = 24\n",
                                "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n6 + 30 = 36 (left: 36)\n36\n"
                            ]
                        }
                    ]
                }
            ],
            "env_info": [
                {
                    "action": "5 * 6 = 30 (left: 4 10 30)\n10 - 4 = 6 (left: 6 30)\n30 - 6 = 24 (left: 24)\nAnswer: (5 * 6) - (10 - 4) = 24\n",
                    "history": [
                        "Answer: (5 * 6) - (10 - 4) = 24"
                    ]
                }
            ],
            "usage_so_far": {
                "completion_tokens": 3262440,
                "prompt_tokens": 1833504,
                "cost": 1.4883264
            }
        }
    ],
    "summary": {
        "correct": 7,
        "total_puzzles": 15,
        "accuracy": 0.4666666666666667,
        "cost": {
            "completion_tokens": 3262440,
            "prompt_tokens": 1833504,
            "cost": 1.4883264
        }
    }
}